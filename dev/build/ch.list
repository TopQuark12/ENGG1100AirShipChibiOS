
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

08000160 <Reset_Handler>:
 8000160:	b672      	cpsid	i
 8000162:	4823      	ldr	r0, [pc, #140]	; (80001f0 <endfiniloop+0x6>)
 8000164:	f380 8809 	msr	PSP, r0
 8000168:	2002      	movs	r0, #2
 800016a:	f380 8814 	msr	CONTROL, r0
 800016e:	f3bf 8f6f 	isb	sy
 8000172:	f001 fac5 	bl	8001700 <__core_init>
 8000176:	f001 fa03 	bl	8001580 <__early_init>
 800017a:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 800017e:	491d      	ldr	r1, [pc, #116]	; (80001f4 <endfiniloop+0xa>)
 8000180:	4a1d      	ldr	r2, [pc, #116]	; (80001f8 <endfiniloop+0xe>)

08000182 <msloop>:
 8000182:	4291      	cmp	r1, r2
 8000184:	bf3c      	itt	cc
 8000186:	f841 0b04 	strcc.w	r0, [r1], #4
 800018a:	e7fa      	bcc.n	8000182 <msloop>
 800018c:	491b      	ldr	r1, [pc, #108]	; (80001fc <endfiniloop+0x12>)
 800018e:	4a18      	ldr	r2, [pc, #96]	; (80001f0 <endfiniloop+0x6>)

08000190 <psloop>:
 8000190:	4291      	cmp	r1, r2
 8000192:	bf3c      	itt	cc
 8000194:	f841 0b04 	strcc.w	r0, [r1], #4
 8000198:	e7fa      	bcc.n	8000190 <psloop>
 800019a:	4919      	ldr	r1, [pc, #100]	; (8000200 <endfiniloop+0x16>)
 800019c:	4a19      	ldr	r2, [pc, #100]	; (8000204 <endfiniloop+0x1a>)
 800019e:	4b1a      	ldr	r3, [pc, #104]	; (8000208 <endfiniloop+0x1e>)

080001a0 <dloop>:
 80001a0:	429a      	cmp	r2, r3
 80001a2:	bf3e      	ittt	cc
 80001a4:	f851 0b04 	ldrcc.w	r0, [r1], #4
 80001a8:	f842 0b04 	strcc.w	r0, [r2], #4
 80001ac:	e7f8      	bcc.n	80001a0 <dloop>
 80001ae:	2000      	movs	r0, #0
 80001b0:	4916      	ldr	r1, [pc, #88]	; (800020c <endfiniloop+0x22>)
 80001b2:	4a17      	ldr	r2, [pc, #92]	; (8000210 <endfiniloop+0x26>)

080001b4 <bloop>:
 80001b4:	4291      	cmp	r1, r2
 80001b6:	bf3c      	itt	cc
 80001b8:	f841 0b04 	strcc.w	r0, [r1], #4
 80001bc:	e7fa      	bcc.n	80001b4 <bloop>
 80001be:	f001 fa5f 	bl	8001680 <__init_ram_areas>
 80001c2:	f001 fa95 	bl	80016f0 <__late_init>
 80001c6:	4c13      	ldr	r4, [pc, #76]	; (8000214 <endfiniloop+0x2a>)
 80001c8:	4d13      	ldr	r5, [pc, #76]	; (8000218 <endfiniloop+0x2e>)

080001ca <initloop>:
 80001ca:	42ac      	cmp	r4, r5
 80001cc:	da03      	bge.n	80001d6 <endinitloop>
 80001ce:	f854 1b04 	ldr.w	r1, [r4], #4
 80001d2:	4788      	blx	r1
 80001d4:	e7f9      	b.n	80001ca <initloop>

080001d6 <endinitloop>:
 80001d6:	f000 ff93 	bl	8001100 <main>
 80001da:	4c10      	ldr	r4, [pc, #64]	; (800021c <endfiniloop+0x32>)
 80001dc:	4d10      	ldr	r5, [pc, #64]	; (8000220 <endfiniloop+0x36>)

080001de <finiloop>:
 80001de:	42ac      	cmp	r4, r5
 80001e0:	da03      	bge.n	80001ea <endfiniloop>
 80001e2:	f854 1b04 	ldr.w	r1, [r4], #4
 80001e6:	4788      	blx	r1
 80001e8:	e7f9      	b.n	80001de <finiloop>

080001ea <endfiniloop>:
 80001ea:	f001 ba79 	b.w	80016e0 <__default_exit>
 80001ee:	0000      	.short	0x0000
 80001f0:	20000800 	.word	0x20000800
 80001f4:	20000000 	.word	0x20000000
 80001f8:	20000400 	.word	0x20000400
 80001fc:	20000400 	.word	0x20000400
 8000200:	08001890 	.word	0x08001890
 8000204:	20000800 	.word	0x20000800
 8000208:	20000834 	.word	0x20000834
 800020c:	20000838 	.word	0x20000838
 8000210:	20000ec8 	.word	0x20000ec8
 8000214:	08000160 	.word	0x08000160
 8000218:	08000160 	.word	0x08000160
 800021c:	08000160 	.word	0x08000160
 8000220:	08000160 	.word	0x08000160
	...

08000230 <_port_switch>:
 8000230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000234:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000238:	68c3      	ldr	r3, [r0, #12]
 800023a:	469d      	mov	sp, r3
 800023c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000240 <_port_thread_start>:
 8000240:	2300      	movs	r3, #0
 8000242:	f383 8811 	msr	BASEPRI, r3
 8000246:	4628      	mov	r0, r5
 8000248:	47a0      	blx	r4
 800024a:	2000      	movs	r0, #0
 800024c:	f001 f9d0 	bl	80015f0 <chThdExit>

08000250 <_port_switch_from_isr>:
 8000250:	f001 f9f6 	bl	8001640 <chSchDoReschedule>

08000254 <_port_exit_from_isr>:
 8000254:	df00      	svc	0
 8000256:	e7fe      	b.n	8000256 <_port_exit_from_isr+0x2>
	...

08000260 <chTMStartMeasurementX.constprop.20>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000260:	4b01      	ldr	r3, [pc, #4]	; (8000268 <chTMStartMeasurementX.constprop.20+0x8>)
 8000262:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8000264:	6083      	str	r3, [r0, #8]
 8000266:	4770      	bx	lr
 8000268:	e0001000 	.word	0xe0001000
 800026c:	00000000 	.word	0x00000000

08000270 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000270:	e7fe      	b.n	8000270 <_idle_thread>
 8000272:	bf00      	nop
	...

08000280 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8000280:	b410      	push	{r4}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000282:	2320      	movs	r3, #32
 8000284:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000288:	4c09      	ldr	r4, [pc, #36]	; (80002b0 <chCoreAlloc+0x30>)
 800028a:	4b0a      	ldr	r3, [pc, #40]	; (80002b4 <chCoreAlloc+0x34>)
 800028c:	6822      	ldr	r2, [r4, #0]
 800028e:	6819      	ldr	r1, [r3, #0]
  size = MEM_ALIGN_NEXT(size);
 8000290:	1dc3      	adds	r3, r0, #7
 8000292:	f023 0307 	bic.w	r3, r3, #7
  if ((size_t)(endmem - nextmem) < size) {
 8000296:	1a89      	subs	r1, r1, r2
 8000298:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800029a:	bf9d      	ittte	ls
 800029c:	189b      	addls	r3, r3, r2
 800029e:	6023      	strls	r3, [r4, #0]

  return p;
 80002a0:	4610      	movls	r0, r2
    return NULL;
 80002a2:	2000      	movhi	r0, #0
 80002a4:	2300      	movs	r3, #0
 80002a6:	f383 8811 	msr	BASEPRI, r3
}
 80002aa:	bc10      	pop	{r4}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000d4c 	.word	0x20000d4c
 80002b4:	20000d10 	.word	0x20000d10
	...

080002c0 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 80002c0:	4a02      	ldr	r2, [pc, #8]	; (80002cc <notify2+0xc>)
 80002c2:	68d3      	ldr	r3, [r2, #12]
 80002c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002c8:	60d3      	str	r3, [r2, #12]
 80002ca:	4770      	bx	lr
 80002cc:	40004400 	.word	0x40004400

080002d0 <pwm_lld_serve_interrupt>:
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 80002d0:	6983      	ldr	r3, [r0, #24]
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 80002d2:	b570      	push	{r4, r5, r6, lr}
  sr  = pwmp->tim->SR;
 80002d4:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80002d6:	68da      	ldr	r2, [r3, #12]
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 80002d8:	4605      	mov	r5, r0
 80002da:	4014      	ands	r4, r2
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80002dc:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 80002de:	43d2      	mvns	r2, r2
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80002e0:	07a6      	lsls	r6, r4, #30
  pwmp->tim->SR = ~sr;
 80002e2:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80002e4:	d503      	bpl.n	80002ee <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
 80002e6:	6843      	ldr	r3, [r0, #4]
 80002e8:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80002ea:	b103      	cbz	r3, 80002ee <pwm_lld_serve_interrupt+0x1e>
    pwmp->config->channels[0].callback(pwmp);
 80002ec:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80002ee:	0760      	lsls	r0, r4, #29
 80002f0:	d504      	bpl.n	80002fc <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
 80002f2:	686b      	ldr	r3, [r5, #4]
 80002f4:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80002f6:	b10b      	cbz	r3, 80002fc <pwm_lld_serve_interrupt+0x2c>
    pwmp->config->channels[1].callback(pwmp);
 80002f8:	4628      	mov	r0, r5
 80002fa:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80002fc:	0721      	lsls	r1, r4, #28
 80002fe:	d504      	bpl.n	800030a <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
 8000300:	686b      	ldr	r3, [r5, #4]
 8000302:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8000304:	b10b      	cbz	r3, 800030a <pwm_lld_serve_interrupt+0x3a>
    pwmp->config->channels[2].callback(pwmp);
 8000306:	4628      	mov	r0, r5
 8000308:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 800030a:	06e2      	lsls	r2, r4, #27
 800030c:	d504      	bpl.n	8000318 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
 800030e:	686b      	ldr	r3, [r5, #4]
 8000310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8000312:	b10b      	cbz	r3, 8000318 <pwm_lld_serve_interrupt+0x48>
    pwmp->config->channels[3].callback(pwmp);
 8000314:	4628      	mov	r0, r5
 8000316:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 8000318:	07e3      	lsls	r3, r4, #31
 800031a:	d506      	bpl.n	800032a <pwm_lld_serve_interrupt+0x5a>
 800031c:	686b      	ldr	r3, [r5, #4]
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	b11b      	cbz	r3, 800032a <pwm_lld_serve_interrupt+0x5a>
    pwmp->config->callback(pwmp);
 8000322:	4628      	mov	r0, r5
}
 8000324:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pwmp->config->callback(pwmp);
 8000328:	4718      	bx	r3
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	0000      	movs	r0, r0
	...

08000330 <pwm_lld_start>:
void pwm_lld_start(PWMDriver *pwmp) {
 8000330:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (pwmp->state == PWM_STOP) {
 8000332:	7803      	ldrb	r3, [r0, #0]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d052      	beq.n	80003de <pwm_lld_start+0xae>
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 8000338:	2200      	movs	r2, #0
 800033a:	6983      	ldr	r3, [r0, #24]
 800033c:	601a      	str	r2, [r3, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 800033e:	635a      	str	r2, [r3, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8000340:	639a      	str	r2, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 8000342:	63da      	str	r2, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 8000344:	641a      	str	r2, [r3, #64]	; 0x40
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 8000346:	625a      	str	r2, [r3, #36]	; 0x24
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8000348:	6841      	ldr	r1, [r0, #4]
 800034a:	6942      	ldr	r2, [r0, #20]
 800034c:	680d      	ldr	r5, [r1, #0]
  pwmp->tim->ARR  = pwmp->period - 1;
 800034e:	6884      	ldr	r4, [r0, #8]
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8000350:	fbb2 f0f5 	udiv	r0, r2, r5
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8000354:	68ca      	ldr	r2, [r1, #12]
  pwmp->tim->CR2  = pwmp->config->cr2;
 8000356:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8000358:	f002 020f 	and.w	r2, r2, #15
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 800035c:	3801      	subs	r0, #1
  pwmp->tim->ARR  = pwmp->period - 1;
 800035e:	3c01      	subs	r4, #1
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8000360:	2a01      	cmp	r2, #1
  pwmp->tim->PSC  = psc;
 8000362:	6298      	str	r0, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 8000364:	62dc      	str	r4, [r3, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 8000366:	605d      	str	r5, [r3, #4]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8000368:	d037      	beq.n	80003da <pwm_lld_start+0xaa>
 800036a:	2a02      	cmp	r2, #2
 800036c:	d133      	bne.n	80003d6 <pwm_lld_start+0xa6>
    ccer |= STM32_TIM_CCER_CC1E;
 800036e:	f042 0201 	orr.w	r2, r2, #1
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 8000372:	6948      	ldr	r0, [r1, #20]
 8000374:	f000 000f 	and.w	r0, r0, #15
 8000378:	2801      	cmp	r0, #1
 800037a:	d029      	beq.n	80003d0 <pwm_lld_start+0xa0>
 800037c:	2802      	cmp	r0, #2
 800037e:	d025      	beq.n	80003cc <pwm_lld_start+0x9c>
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 8000380:	69c8      	ldr	r0, [r1, #28]
 8000382:	f000 000f 	and.w	r0, r0, #15
 8000386:	2801      	cmp	r0, #1
 8000388:	d01d      	beq.n	80003c6 <pwm_lld_start+0x96>
 800038a:	2802      	cmp	r0, #2
 800038c:	d019      	beq.n	80003c2 <pwm_lld_start+0x92>
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 800038e:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8000390:	f000 000f 	and.w	r0, r0, #15
 8000394:	2801      	cmp	r0, #1
 8000396:	d003      	beq.n	80003a0 <pwm_lld_start+0x70>
 8000398:	2802      	cmp	r0, #2
 800039a:	d103      	bne.n	80003a4 <pwm_lld_start+0x74>
    ccer |= STM32_TIM_CCER_CC4P;
 800039c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    ccer |= STM32_TIM_CCER_CC4E;
 80003a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 80003a4:	2601      	movs	r6, #1
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 80003a6:	2500      	movs	r5, #0
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 80003a8:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 80003ac:	2085      	movs	r0, #133	; 0x85
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 80003ae:	6b09      	ldr	r1, [r1, #48]	; 0x30
  pwmp->tim->CCER  = ccer;
 80003b0:	621a      	str	r2, [r3, #32]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 80003b2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 80003b6:	615e      	str	r6, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 80003b8:	611d      	str	r5, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 80003ba:	60d9      	str	r1, [r3, #12]
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 80003bc:	645c      	str	r4, [r3, #68]	; 0x44
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 80003be:	6018      	str	r0, [r3, #0]
 80003c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccer |= STM32_TIM_CCER_CC3P;
 80003c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    ccer |= STM32_TIM_CCER_CC3E;
 80003c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80003ca:	e7e0      	b.n	800038e <pwm_lld_start+0x5e>
    ccer |= STM32_TIM_CCER_CC2P;
 80003cc:	f042 0220 	orr.w	r2, r2, #32
    ccer |= STM32_TIM_CCER_CC2E;
 80003d0:	f042 0210 	orr.w	r2, r2, #16
 80003d4:	e7d4      	b.n	8000380 <pwm_lld_start+0x50>
  ccer = 0;
 80003d6:	2200      	movs	r2, #0
 80003d8:	e7cb      	b.n	8000372 <pwm_lld_start+0x42>
 80003da:	2200      	movs	r2, #0
 80003dc:	e7c7      	b.n	800036e <pwm_lld_start+0x3e>
    if (&PWMD1 == pwmp) {
 80003de:	4b21      	ldr	r3, [pc, #132]	; (8000464 <pwm_lld_start+0x134>)
 80003e0:	4298      	cmp	r0, r3
 80003e2:	d008      	beq.n	80003f6 <pwm_lld_start+0xc6>
    if (&PWMD3 == pwmp) {
 80003e4:	4b20      	ldr	r3, [pc, #128]	; (8000468 <pwm_lld_start+0x138>)
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d025      	beq.n	8000436 <pwm_lld_start+0x106>
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 80003ea:	f646 0268 	movw	r2, #26728	; 0x6868
 80003ee:	6983      	ldr	r3, [r0, #24]
 80003f0:	619a      	str	r2, [r3, #24]
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 80003f2:	61da      	str	r2, [r3, #28]
 80003f4:	e7a8      	b.n	8000348 <pwm_lld_start+0x18>

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80003f6:	2570      	movs	r5, #112	; 0x70
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80003f8:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80003fc:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
      rccResetTIM1();
 8000400:	f04f 0e00 	mov.w	lr, #0
      rccEnableTIM1(FALSE);
 8000404:	4a19      	ldr	r2, [pc, #100]	; (800046c <pwm_lld_start+0x13c>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000406:	4b1a      	ldr	r3, [pc, #104]	; (8000470 <pwm_lld_start+0x140>)
 8000408:	6991      	ldr	r1, [r2, #24]
      pwmp->clock = STM32_TIMCLK2;
 800040a:	4f1a      	ldr	r7, [pc, #104]	; (8000474 <pwm_lld_start+0x144>)
      rccEnableTIM1(FALSE);
 800040c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8000410:	6191      	str	r1, [r2, #24]
      rccResetTIM1();
 8000412:	68d1      	ldr	r1, [r2, #12]
 8000414:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8000418:	60d1      	str	r1, [r2, #12]
 800041a:	f8c2 e00c 	str.w	lr, [r2, #12]
 800041e:	f883 5319 	strb.w	r5, [r3, #793]	; 0x319
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000422:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000426:	601e      	str	r6, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000428:	f883 531b 	strb.w	r5, [r3, #795]	; 0x31b
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800042c:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000430:	601c      	str	r4, [r3, #0]
      pwmp->clock = STM32_TIMCLK2;
 8000432:	6147      	str	r7, [r0, #20]
 8000434:	e7d9      	b.n	80003ea <pwm_lld_start+0xba>
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000436:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
      rccResetTIM3();
 800043a:	2700      	movs	r7, #0
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800043c:	2670      	movs	r6, #112	; 0x70
      rccEnableTIM3(FALSE);
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <pwm_lld_start+0x13c>)
 8000440:	4a0b      	ldr	r2, [pc, #44]	; (8000470 <pwm_lld_start+0x140>)
 8000442:	69d9      	ldr	r1, [r3, #28]
      pwmp->clock = STM32_TIMCLK1;
 8000444:	4d0b      	ldr	r5, [pc, #44]	; (8000474 <pwm_lld_start+0x144>)
      rccEnableTIM3(FALSE);
 8000446:	f041 0102 	orr.w	r1, r1, #2
 800044a:	61d9      	str	r1, [r3, #28]
      rccResetTIM3();
 800044c:	6919      	ldr	r1, [r3, #16]
 800044e:	f041 0102 	orr.w	r1, r1, #2
 8000452:	6119      	str	r1, [r3, #16]
 8000454:	611f      	str	r7, [r3, #16]
 8000456:	f882 631d 	strb.w	r6, [r2, #797]	; 0x31d
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800045a:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800045e:	6014      	str	r4, [r2, #0]
      pwmp->clock = STM32_TIMCLK1;
 8000460:	6145      	str	r5, [r0, #20]
 8000462:	e7c2      	b.n	80003ea <pwm_lld_start+0xba>
 8000464:	20000ac8 	.word	0x20000ac8
 8000468:	20000ae4 	.word	0x20000ae4
 800046c:	40021000 	.word	0x40021000
 8000470:	e000e100 	.word	0xe000e100
 8000474:	02dc6c00 	.word	0x02dc6c00
	...

08000480 <_port_irq_epilogue>:
 8000480:	2320      	movs	r3, #32
 8000482:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000486:	4b11      	ldr	r3, [pc, #68]	; (80004cc <_port_irq_epilogue+0x4c>)
 8000488:	685b      	ldr	r3, [r3, #4]
 800048a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800048e:	d102      	bne.n	8000496 <_port_irq_epilogue+0x16>
 8000490:	f383 8811 	msr	BASEPRI, r3
 8000494:	4770      	bx	lr
void _port_irq_epilogue(void) {
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800049a:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800049e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
 80004a2:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
 80004a6:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80004aa:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 80004ae:	4a08      	ldr	r2, [pc, #32]	; (80004d0 <_port_irq_epilogue+0x50>)
 80004b0:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 80004b2:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 80004b4:	6889      	ldr	r1, [r1, #8]
 80004b6:	6892      	ldr	r2, [r2, #8]
 80004b8:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80004ba:	bf8c      	ite	hi
 80004bc:	4a05      	ldrhi	r2, [pc, #20]	; (80004d4 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80004be:	4a06      	ldrls	r2, [pc, #24]	; (80004d8 <_port_irq_epilogue+0x58>)
 80004c0:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bc80      	pop	{r7}
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	e000ed00 	.word	0xe000ed00
 80004d0:	20000b98 	.word	0x20000b98
 80004d4:	08000251 	.word	0x08000251
 80004d8:	08000254 	.word	0x08000254
 80004dc:	00000000 	.word	0x00000000

080004e0 <VectorB4>:
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 80004e0:	b508      	push	{r3, lr}
  pwm_lld_serve_interrupt(&PWMD3);
 80004e2:	4803      	ldr	r0, [pc, #12]	; (80004f0 <VectorB4+0x10>)
 80004e4:	f7ff fef4 	bl	80002d0 <pwm_lld_serve_interrupt>
}
 80004e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80004ec:	f7ff bfc8 	b.w	8000480 <_port_irq_epilogue>
 80004f0:	20000ae4 	.word	0x20000ae4
	...

08000500 <VectorA4>:
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8000500:	b508      	push	{r3, lr}
  pwm_lld_serve_interrupt(&PWMD1);
 8000502:	4803      	ldr	r0, [pc, #12]	; (8000510 <VectorA4+0x10>)
 8000504:	f7ff fee4 	bl	80002d0 <pwm_lld_serve_interrupt>
}
 8000508:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800050c:	f7ff bfb8 	b.w	8000480 <_port_irq_epilogue>
 8000510:	20000ac8 	.word	0x20000ac8
	...

08000520 <VectorAC>:
 8000520:	f7ff bfee 	b.w	8000500 <VectorA4>
	...

08000530 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8000530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000534:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000538:	6923      	ldr	r3, [r4, #16]
 800053a:	079b      	lsls	r3, r3, #30
 800053c:	d403      	bmi.n	8000546 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 800053e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 8000542:	f7ff bf9d 	b.w	8000480 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
 8000546:	2700      	movs	r7, #0
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000548:	2520      	movs	r5, #32
 800054a:	6127      	str	r7, [r4, #16]
 800054c:	f385 8811 	msr	BASEPRI, r5
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8000550:	4e1e      	ldr	r6, [pc, #120]	; (80005cc <VectorB0+0x9c>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000552:	6a60      	ldr	r0, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000554:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
  vtp = ch.vtlist.vt_next;
 8000558:	69f3      	ldr	r3, [r6, #28]
 800055a:	b280      	uxth	r0, r0
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 800055c:	eba0 010e 	sub.w	r1, r0, lr
 8000560:	891a      	ldrh	r2, [r3, #8]
 8000562:	b289      	uxth	r1, r1
 8000564:	4291      	cmp	r1, r2
 8000566:	f106 081c 	add.w	r8, r6, #28
 800056a:	d31b      	bcc.n	80005a4 <VectorB0+0x74>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800056c:	6819      	ldr	r1, [r3, #0]
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 800056e:	4472      	add	r2, lr
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000570:	4541      	cmp	r1, r8
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000572:	84f2      	strh	r2, [r6, #38]	; 0x26
    fn = vtp->vt_func;
 8000574:	68da      	ldr	r2, [r3, #12]
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000576:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 800057a:	61f1      	str	r1, [r6, #28]
    vtp->vt_func = NULL;
 800057c:	60df      	str	r7, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 800057e:	bf08      	it	eq
 8000580:	60e7      	streq	r7, [r4, #12]
 8000582:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8000586:	6918      	ldr	r0, [r3, #16]
 8000588:	4790      	blx	r2
 800058a:	f385 8811 	msr	BASEPRI, r5
  return (systime_t)STM32_ST_TIM->CNT;
 800058e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000590:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8000594:	69f3      	ldr	r3, [r6, #28]
 8000596:	b280      	uxth	r0, r0
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000598:	eba0 010e 	sub.w	r1, r0, lr
 800059c:	891a      	ldrh	r2, [r3, #8]
 800059e:	b289      	uxth	r1, r1
 80005a0:	428a      	cmp	r2, r1
 80005a2:	d9e3      	bls.n	800056c <VectorB0+0x3c>
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 80005a4:	4543      	cmp	r3, r8
 80005a6:	d00a      	beq.n	80005be <VectorB0+0x8e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 80005a8:	4472      	add	r2, lr
 80005aa:	1a12      	subs	r2, r2, r0
 80005ac:	b292      	uxth	r2, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }
  port_timer_set_alarm(now + delta);
 80005ae:	2a02      	cmp	r2, #2
 80005b0:	bf2c      	ite	cs
 80005b2:	1882      	addcs	r2, r0, r2
 80005b4:	1c82      	addcc	r2, r0, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80005b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005ba:	b292      	uxth	r2, r2
 80005bc:	635a      	str	r2, [r3, #52]	; 0x34
 80005be:	2300      	movs	r3, #0
 80005c0:	f383 8811 	msr	BASEPRI, r3
}
 80005c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 80005c8:	f7ff bf5a 	b.w	8000480 <_port_irq_epilogue>
 80005cc:	20000b98 	.word	0x20000b98

080005d0 <SVC_Handler>:
void SVC_Handler(void) {
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80005d4:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
 80005d8:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80005da:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80005de:	2300      	movs	r3, #0
 80005e0:	f383 8811 	msr	BASEPRI, r3
}
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bc80      	pop	{r7}
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	0000      	movs	r0, r0
	...

080005f0 <chTMStopMeasurementX>:
 80005f0:	4b0e      	ldr	r3, [pc, #56]	; (800062c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80005f2:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <chTMStopMeasurementX+0x40>)
 80005f4:	685b      	ldr	r3, [r3, #4]
  tmp->last = (now - tmp->last) - offset;
 80005f6:	6881      	ldr	r1, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80005f8:	6f12      	ldr	r2, [r2, #112]	; 0x70
  tmp->last = (now - tmp->last) - offset;
 80005fa:	1a5b      	subs	r3, r3, r1
 80005fc:	1a9b      	subs	r3, r3, r2
  tmp->n++;
 80005fe:	68c2      	ldr	r2, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000600:	b430      	push	{r4, r5}
  tmp->cumulative += (rttime_t)tmp->last;
 8000602:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
 8000606:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 8000608:	3201      	adds	r2, #1
  tmp->cumulative += (rttime_t)tmp->last;
 800060a:	18e4      	adds	r4, r4, r3
  tmp->n++;
 800060c:	60c2      	str	r2, [r0, #12]
  if (tmp->last < tmp->best) {
 800060e:	6802      	ldr	r2, [r0, #0]
  tmp->cumulative += (rttime_t)tmp->last;
 8000610:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8000614:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 8000616:	bf88      	it	hi
 8000618:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 800061a:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 800061c:	e9c0 4504 	strd	r4, r5, [r0, #16]
}
 8000620:	bc30      	pop	{r4, r5}
  tmp->last = (now - tmp->last) - offset;
 8000622:	6083      	str	r3, [r0, #8]
    tmp->best = tmp->last;
 8000624:	bf38      	it	cc
 8000626:	6003      	strcc	r3, [r0, #0]
}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e0001000 	.word	0xe0001000
 8000630:	20000b98 	.word	0x20000b98
	...

08000640 <wakeup>:
 8000640:	2320      	movs	r3, #32
 8000642:	f383 8811 	msr	BASEPRI, r3
  switch (tp->p_state) {
 8000646:	7f03      	ldrb	r3, [r0, #28]
 8000648:	2b07      	cmp	r3, #7
 800064a:	d80e      	bhi.n	800066a <wakeup+0x2a>
 800064c:	e8df f003 	tbb	[pc, r3]
 8000650:	230d0d27 	.word	0x230d0d27
 8000654:	080d0408 	.word	0x080d0408
    chSemFastSignalI(tp->p_u.wtsemp);
 8000658:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800065a:	6893      	ldr	r3, [r2, #8]
 800065c:	3301      	adds	r3, #1
 800065e:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000660:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000664:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000666:	6802      	ldr	r2, [r0, #0]
 8000668:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 800066a:	b410      	push	{r4}
  tp->p_state = CH_STATE_READY;
 800066c:	2200      	movs	r2, #0
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800066e:	f04f 34ff 	mov.w	r4, #4294967295
 8000672:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <wakeup+0x68>)
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000676:	6204      	str	r4, [r0, #32]
  tp->p_state = CH_STATE_READY;
 8000678:	7702      	strb	r2, [r0, #28]
    cp = cp->p_next;
 800067a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800067c:	689a      	ldr	r2, [r3, #8]
 800067e:	428a      	cmp	r2, r1
 8000680:	d2fb      	bcs.n	800067a <wakeup+0x3a>
  tp->p_prev = cp->p_prev;
 8000682:	685a      	ldr	r2, [r3, #4]
 8000684:	2100      	movs	r1, #0
  tp->p_next = cp;
 8000686:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 8000688:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = tp;
 800068a:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 800068c:	6058      	str	r0, [r3, #4]
 800068e:	f381 8811 	msr	BASEPRI, r1
}
 8000692:	bc10      	pop	{r4}
 8000694:	4770      	bx	lr
    *tp->p_u.wttrp = NULL;
 8000696:	2200      	movs	r2, #0
 8000698:	6a03      	ldr	r3, [r0, #32]
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	e7e5      	b.n	800066a <wakeup+0x2a>
 800069e:	2300      	movs	r3, #0
 80006a0:	f383 8811 	msr	BASEPRI, r3
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000b98 	.word	0x20000b98
 80006ac:	00000000 	.word	0x00000000

080006b0 <chSchReadyI>:
  tp->p_state = CH_STATE_READY;
 80006b0:	2200      	movs	r2, #0
thread_t *chSchReadyI(thread_t *tp) {
 80006b2:	b410      	push	{r4}
 80006b4:	4604      	mov	r4, r0
 80006b6:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <chSchReadyI+0x24>)
  tp->p_state = CH_STATE_READY;
 80006ba:	7702      	strb	r2, [r0, #28]
    cp = cp->p_next;
 80006bc:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80006be:	689a      	ldr	r2, [r3, #8]
 80006c0:	428a      	cmp	r2, r1
 80006c2:	d2fb      	bcs.n	80006bc <chSchReadyI+0xc>
  tp->p_prev = cp->p_prev;
 80006c4:	685a      	ldr	r2, [r3, #4]
}
 80006c6:	4620      	mov	r0, r4
  tp->p_next = cp;
 80006c8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 80006ca:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 80006cc:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80006ce:	605c      	str	r4, [r3, #4]
}
 80006d0:	bc10      	pop	{r4}
 80006d2:	4770      	bx	lr
 80006d4:	20000b98 	.word	0x20000b98
	...

080006e0 <chEvtBroadcastFlagsI.constprop.15>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80006e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 80006e2:	4f17      	ldr	r7, [pc, #92]	; (8000740 <chEvtBroadcastFlagsI.constprop.15+0x60>)
 80006e4:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80006e8:	42bc      	cmp	r4, r7
 80006ea:	d020      	beq.n	800072e <chEvtBroadcastFlagsI.constprop.15+0x4e>
 80006ec:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 80006ee:	2600      	movs	r6, #0
 80006f0:	e002      	b.n	80006f8 <chEvtBroadcastFlagsI.constprop.15+0x18>
    elp = elp->el_next;
 80006f2:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80006f4:	42bc      	cmp	r4, r7
 80006f6:	d01a      	beq.n	800072e <chEvtBroadcastFlagsI.constprop.15+0x4e>
    elp->el_flags |= flags;
 80006f8:	68e3      	ldr	r3, [r4, #12]
 80006fa:	432b      	orrs	r3, r5
 80006fc:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 80006fe:	b115      	cbz	r5, 8000706 <chEvtBroadcastFlagsI.constprop.15+0x26>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 8000700:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8000702:	4213      	tst	r3, r2
 8000704:	d0f5      	beq.n	80006f2 <chEvtBroadcastFlagsI.constprop.15+0x12>
      chEvtSignalI(elp->el_listener, elp->el_events);
 8000706:	6860      	ldr	r0, [r4, #4]
  tp->p_epending |= events;
 8000708:	68a3      	ldr	r3, [r4, #8]
 800070a:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800070c:	7f02      	ldrb	r2, [r0, #28]
  tp->p_epending |= events;
 800070e:	430b      	orrs	r3, r1
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000710:	2a0a      	cmp	r2, #10
  tp->p_epending |= events;
 8000712:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000714:	d00c      	beq.n	8000730 <chEvtBroadcastFlagsI.constprop.15+0x50>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8000716:	2a0b      	cmp	r2, #11
 8000718:	d1eb      	bne.n	80006f2 <chEvtBroadcastFlagsI.constprop.15+0x12>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 800071a:	6a02      	ldr	r2, [r0, #32]
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 800071c:	ea32 0303 	bics.w	r3, r2, r3
 8000720:	d1e7      	bne.n	80006f2 <chEvtBroadcastFlagsI.constprop.15+0x12>
    tp->p_u.rdymsg = MSG_OK;
 8000722:	6206      	str	r6, [r0, #32]
    (void) chSchReadyI(tp);
 8000724:	f7ff ffc4 	bl	80006b0 <chSchReadyI>
    elp = elp->el_next;
 8000728:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 800072a:	42bc      	cmp	r4, r7
 800072c:	d1e4      	bne.n	80006f8 <chEvtBroadcastFlagsI.constprop.15+0x18>
 800072e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8000730:	6a02      	ldr	r2, [r0, #32]
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000732:	4213      	tst	r3, r2
 8000734:	d0dd      	beq.n	80006f2 <chEvtBroadcastFlagsI.constprop.15+0x12>
    tp->p_u.rdymsg = MSG_OK;
 8000736:	6206      	str	r6, [r0, #32]
    (void) chSchReadyI(tp);
 8000738:	f7ff ffba 	bl	80006b0 <chSchReadyI>
 800073c:	e7f4      	b.n	8000728 <chEvtBroadcastFlagsI.constprop.15+0x48>
 800073e:	bf00      	nop
 8000740:	20000b00 	.word	0x20000b00
	...

08000750 <chIQResetI.constprop.12>:
 *
 * @param[in] iqp       pointer to an @p input_queue_t structure
 *
 * @iclass
 */
void chIQResetI(input_queue_t *iqp) {
 8000750:	b570      	push	{r4, r5, r6, lr}

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 8000752:	4c0c      	ldr	r4, [pc, #48]	; (8000784 <chIQResetI.constprop.12+0x34>)
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 8000754:	2100      	movs	r1, #0
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000756:	4625      	mov	r5, r4
 8000758:	f855 3f0c 	ldr.w	r3, [r5, #12]!
  iqp->q_rdptr = iqp->q_buffer;
 800075c:	69a2      	ldr	r2, [r4, #24]
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  while (queue_notempty(tqp)) {
 800075e:	42ab      	cmp	r3, r5
  iqp->q_counter = 0;
 8000760:	6161      	str	r1, [r4, #20]
  iqp->q_rdptr = iqp->q_buffer;
 8000762:	6262      	str	r2, [r4, #36]	; 0x24
  iqp->q_wrptr = iqp->q_buffer;
 8000764:	6222      	str	r2, [r4, #32]
 8000766:	d00b      	beq.n	8000780 <chIQResetI.constprop.12+0x30>

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8000768:	f06f 0601 	mvn.w	r6, #1
  tqp->p_next = tp->p_next;
 800076c:	681a      	ldr	r2, [r3, #0]
  (void) chSchReadyI(tp);
 800076e:	4618      	mov	r0, r3
 8000770:	60e2      	str	r2, [r4, #12]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000772:	6055      	str	r5, [r2, #4]
  tp->p_u.rdymsg = msg;
 8000774:	621e      	str	r6, [r3, #32]
  (void) chSchReadyI(tp);
 8000776:	f7ff ff9b 	bl	80006b0 <chSchReadyI>
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800077a:	68e3      	ldr	r3, [r4, #12]
 800077c:	42ab      	cmp	r3, r5
 800077e:	d1f5      	bne.n	800076c <chIQResetI.constprop.12+0x1c>
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	bf00      	nop
 8000784:	20000b00 	.word	0x20000b00
	...

08000790 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8000790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  USART_TypeDef *u = sdp->usart;
 8000794:	4d67      	ldr	r5, [pc, #412]	; (8000934 <VectorD8+0x1a4>)
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8000796:	b083      	sub	sp, #12
  USART_TypeDef *u = sdp->usart;
 8000798:	f8d5 6094 	ldr.w	r6, [r5, #148]	; 0x94
  uint16_t cr1 = u->CR1;
 800079c:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 80007a0:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 80007a2:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 80007a4:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 80007a6:	d47d      	bmi.n	80008a4 <VectorD8+0x114>
 80007a8:	2320      	movs	r3, #32
 80007aa:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80007ae:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80007b2:	d046      	beq.n	8000842 <VectorD8+0xb2>
  tp->p_u.rdymsg = msg;
 80007b4:	f04f 0800 	mov.w	r8, #0
  if (queue_notempty(tqp)) {
 80007b8:	4f5f      	ldr	r7, [pc, #380]	; (8000938 <VectorD8+0x1a8>)
 80007ba:	e007      	b.n	80007cc <VectorD8+0x3c>
    if (sr & USART_SR_RXNE)
 80007bc:	06a1      	lsls	r1, r4, #26
    b = u->DR;
 80007be:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 80007c0:	d41c      	bmi.n	80007fc <VectorD8+0x6c>
    sr = u->SR;
 80007c2:	6834      	ldr	r4, [r6, #0]
 80007c4:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80007c6:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80007ca:	d03a      	beq.n	8000842 <VectorD8+0xb2>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 80007cc:	0723      	lsls	r3, r4, #28
 80007ce:	d0f5      	beq.n	80007bc <VectorD8+0x2c>
    sts |= SD_OVERRUN_ERROR;
 80007d0:	f014 0f08 	tst.w	r4, #8
 80007d4:	bf0c      	ite	eq
 80007d6:	2000      	moveq	r0, #0
 80007d8:	2080      	movne	r0, #128	; 0x80
  if (sr & USART_SR_PE)
 80007da:	07e1      	lsls	r1, r4, #31
    sts |= SD_PARITY_ERROR;
 80007dc:	bf48      	it	mi
 80007de:	f040 0020 	orrmi.w	r0, r0, #32
  if (sr & USART_SR_FE)
 80007e2:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 80007e4:	bf48      	it	mi
 80007e6:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (sr & USART_SR_NE)
 80007ea:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 80007ec:	bf48      	it	mi
 80007ee:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80007f2:	f7ff ff75 	bl	80006e0 <chEvtBroadcastFlagsI.constprop.15>
    if (sr & USART_SR_RXNE)
 80007f6:	06a1      	lsls	r1, r4, #26
    b = u->DR;
 80007f8:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 80007fa:	d5e2      	bpl.n	80007c2 <VectorD8+0x32>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 80007fc:	696a      	ldr	r2, [r5, #20]
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 80007fe:	2a00      	cmp	r2, #0
 8000800:	d040      	beq.n	8000884 <VectorD8+0xf4>
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8000802:	6a2a      	ldr	r2, [r5, #32]
 8000804:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000806:	428a      	cmp	r2, r1
 8000808:	d045      	beq.n	8000896 <VectorD8+0x106>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 800080a:	6969      	ldr	r1, [r5, #20]
  *iqp->q_wrptr++ = b;
 800080c:	1c50      	adds	r0, r2, #1
  iqp->q_counter++;
 800080e:	3101      	adds	r1, #1
  *iqp->q_wrptr++ = b;
 8000810:	6228      	str	r0, [r5, #32]
  iqp->q_counter++;
 8000812:	6169      	str	r1, [r5, #20]
    b = u->DR;
 8000814:	7013      	strb	r3, [r2, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8000816:	6a2a      	ldr	r2, [r5, #32]
 8000818:	69eb      	ldr	r3, [r5, #28]
 800081a:	429a      	cmp	r2, r3
 800081c:	d301      	bcc.n	8000822 <VectorD8+0x92>
    iqp->q_wrptr = iqp->q_buffer;
 800081e:	69ab      	ldr	r3, [r5, #24]
 8000820:	622b      	str	r3, [r5, #32]
 8000822:	68eb      	ldr	r3, [r5, #12]
 8000824:	42bb      	cmp	r3, r7
 8000826:	d0cc      	beq.n	80007c2 <VectorD8+0x32>
  tqp->p_next = tp->p_next;
 8000828:	681a      	ldr	r2, [r3, #0]
  (void) chSchReadyI(tp);
 800082a:	4618      	mov	r0, r3
 800082c:	60ea      	str	r2, [r5, #12]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800082e:	6057      	str	r7, [r2, #4]
  tp->p_u.rdymsg = msg;
 8000830:	f8c3 8020 	str.w	r8, [r3, #32]
  (void) chSchReadyI(tp);
 8000834:	f7ff ff3c 	bl	80006b0 <chSchReadyI>
    sr = u->SR;
 8000838:	6834      	ldr	r4, [r6, #0]
 800083a:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800083c:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000840:	d1c4      	bne.n	80007cc <VectorD8+0x3c>
 8000842:	2300      	movs	r3, #0
 8000844:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8000848:	f019 0f80 	tst.w	r9, #128	; 0x80
 800084c:	d001      	beq.n	8000852 <VectorD8+0xc2>
 800084e:	0622      	lsls	r2, r4, #24
 8000850:	d436      	bmi.n	80008c0 <VectorD8+0x130>
  if (sr & USART_SR_TC) {
 8000852:	0663      	lsls	r3, r4, #25
 8000854:	d511      	bpl.n	800087a <VectorD8+0xea>
 8000856:	2320      	movs	r3, #32
 8000858:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800085c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800085e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000860:	429a      	cmp	r2, r3
 8000862:	d052      	beq.n	800090a <VectorD8+0x17a>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000864:	f64f 73bf 	movw	r3, #65471	; 0xffbf
    u->SR = ~USART_SR_TC;
 8000868:	f06f 0240 	mvn.w	r2, #64	; 0x40
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800086c:	ea09 0303 	and.w	r3, r9, r3
 8000870:	60f3      	str	r3, [r6, #12]
 8000872:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 8000874:	6032      	str	r2, [r6, #0]
 8000876:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
}
 800087a:	b003      	add	sp, #12
 800087c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8000880:	f7ff bdfe 	b.w	8000480 <_port_irq_epilogue>
 8000884:	2004      	movs	r0, #4
 8000886:	9301      	str	r3, [sp, #4]
 8000888:	f7ff ff2a 	bl	80006e0 <chEvtBroadcastFlagsI.constprop.15>
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 800088c:	6a2a      	ldr	r2, [r5, #32]
 800088e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000890:	9b01      	ldr	r3, [sp, #4]
 8000892:	428a      	cmp	r2, r1
 8000894:	d1b9      	bne.n	800080a <VectorD8+0x7a>
 8000896:	6969      	ldr	r1, [r5, #20]
 8000898:	2900      	cmp	r1, #0
 800089a:	d0b6      	beq.n	800080a <VectorD8+0x7a>
 800089c:	2080      	movs	r0, #128	; 0x80
 800089e:	f7ff ff1f 	bl	80006e0 <chEvtBroadcastFlagsI.constprop.15>
 80008a2:	e78e      	b.n	80007c2 <VectorD8+0x32>
 80008a4:	2320      	movs	r3, #32
 80008a6:	f383 8811 	msr	BASEPRI, r3
 80008aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008ae:	f7ff ff17 	bl	80006e0 <chEvtBroadcastFlagsI.constprop.15>
    u->SR = ~USART_SR_LBD;
 80008b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80008b6:	2300      	movs	r3, #0
 80008b8:	6032      	str	r2, [r6, #0]
 80008ba:	f383 8811 	msr	BASEPRI, r3
 80008be:	e773      	b.n	80007a8 <VectorD8+0x18>
 80008c0:	2320      	movs	r3, #32
 80008c2:	f383 8811 	msr	BASEPRI, r3
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 80008c6:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80008c8:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d024      	beq.n	8000918 <VectorD8+0x188>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 80008ce:	6baa      	ldr	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 80008d0:	6c28      	ldr	r0, [r5, #64]	; 0x40
  b = *oqp->q_rdptr++;
 80008d2:	1c59      	adds	r1, r3, #1
  oqp->q_counter++;
 80008d4:	3201      	adds	r2, #1
 80008d6:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 80008d8:	64a9      	str	r1, [r5, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
 80008da:	4281      	cmp	r1, r0
  b = *oqp->q_rdptr++;
 80008dc:	781f      	ldrb	r7, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 80008de:	d301      	bcc.n	80008e4 <VectorD8+0x154>
    oqp->q_rdptr = oqp->q_buffer;
 80008e0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80008e2:	64ab      	str	r3, [r5, #72]	; 0x48
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80008e4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80008e6:	4a15      	ldr	r2, [pc, #84]	; (800093c <VectorD8+0x1ac>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d009      	beq.n	8000900 <VectorD8+0x170>
  tp->p_u.rdymsg = msg;
 80008ec:	f04f 0e00 	mov.w	lr, #0
  tqp->p_next = tp->p_next;
 80008f0:	6819      	ldr	r1, [r3, #0]
  (void) chSchReadyI(tp);
 80008f2:	4618      	mov	r0, r3
 80008f4:	6329      	str	r1, [r5, #48]	; 0x30
  tqp->p_next->p_prev = (thread_t *)tqp;
 80008f6:	604a      	str	r2, [r1, #4]
  tp->p_u.rdymsg = msg;
 80008f8:	f8c3 e020 	str.w	lr, [r3, #32]
  (void) chSchReadyI(tp);
 80008fc:	f7ff fed8 	bl	80006b0 <chSchReadyI>
      u->DR = b;
 8000900:	6077      	str	r7, [r6, #4]
 8000902:	2300      	movs	r3, #0
 8000904:	f383 8811 	msr	BASEPRI, r3
 8000908:	e7a3      	b.n	8000852 <VectorD8+0xc2>
 800090a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800090c:	2b00      	cmp	r3, #0
 800090e:	d0a9      	beq.n	8000864 <VectorD8+0xd4>
 8000910:	2010      	movs	r0, #16
 8000912:	f7ff fee5 	bl	80006e0 <chEvtBroadcastFlagsI.constprop.15>
 8000916:	e7a5      	b.n	8000864 <VectorD8+0xd4>
 8000918:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800091a:	2a00      	cmp	r2, #0
 800091c:	d0d7      	beq.n	80008ce <VectorD8+0x13e>
 800091e:	2008      	movs	r0, #8
 8000920:	f7ff fede 	bl	80006e0 <chEvtBroadcastFlagsI.constprop.15>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8000924:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000928:	ea09 0303 	and.w	r3, r9, r3
 800092c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000930:	60f3      	str	r3, [r6, #12]
 8000932:	e7e6      	b.n	8000902 <VectorD8+0x172>
 8000934:	20000b00 	.word	0x20000b00
 8000938:	20000b0c 	.word	0x20000b0c
 800093c:	20000b30 	.word	0x20000b30

08000940 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8000940:	e7fe      	b.n	8000940 <BusFault_Handler>
 8000942:	bf00      	nop
	...

08000950 <chThdCreateStatic.constprop.23>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8000950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000952:	461d      	mov	r5, r3
 8000954:	4604      	mov	r4, r0
 8000956:	2320      	movs	r3, #32
 8000958:	f383 8811 	msr	BASEPRI, r3
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800095c:	2000      	movs	r0, #0
  tp->p_refs = (trefs_t)1;
 800095e:	2701      	movs	r7, #1
  tp->p_state = CH_STATE_WTSTART;
 8000960:	f04f 0e02 	mov.w	lr, #2
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000964:	3924      	subs	r1, #36	; 0x24
 8000966:	1866      	adds	r6, r4, r1
 8000968:	60e6      	str	r6, [r4, #12]
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <chThdCreateStatic.constprop.23+0x9c>)
 800096c:	5065      	str	r5, [r4, r1]
  REG_INSERT(tp);
 800096e:	4d20      	ldr	r5, [pc, #128]	; (80009f0 <chThdCreateStatic.constprop.23+0xa0>)
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000970:	6233      	str	r3, [r6, #32]
 8000972:	6070      	str	r0, [r6, #4]
  REG_INSERT(tp);
 8000974:	6125      	str	r5, [r4, #16]
 8000976:	696b      	ldr	r3, [r5, #20]
  tp->p_refs = (trefs_t)1;
 8000978:	77a7      	strb	r7, [r4, #30]
  REG_INSERT(tp);
 800097a:	6163      	str	r3, [r4, #20]
  tp->p_prio = prio;
 800097c:	60a2      	str	r2, [r4, #8]
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800097e:	7760      	strb	r0, [r4, #29]
  tp->p_state = CH_STATE_WTSTART;
 8000980:	f884 e01c 	strb.w	lr, [r4, #28]
  tp->p_realprio = prio;
 8000984:	63e2      	str	r2, [r4, #60]	; 0x3c
  tp->p_mtxlist = NULL;
 8000986:	63a0      	str	r0, [r4, #56]	; 0x38
  tp->p_epending = (eventmask_t)0;
 8000988:	6360      	str	r0, [r4, #52]	; 0x34
  tp->p_name = NULL;
 800098a:	61a0      	str	r0, [r4, #24]
  REG_INSERT(tp);
 800098c:	611c      	str	r4, [r3, #16]
  if (ntp->p_prio <= currp->p_prio) {
 800098e:	69ae      	ldr	r6, [r5, #24]
  ntp->p_u.rdymsg = msg;
 8000990:	6220      	str	r0, [r4, #32]
  if (ntp->p_prio <= currp->p_prio) {
 8000992:	68b1      	ldr	r1, [r6, #8]
  queue_init(&tp->p_msgqueue);
 8000994:	f104 0328 	add.w	r3, r4, #40	; 0x28
  list_init(&tp->p_waiting);
 8000998:	f104 0724 	add.w	r7, r4, #36	; 0x24
 800099c:	428a      	cmp	r2, r1
  REG_INSERT(tp);
 800099e:	616c      	str	r4, [r5, #20]
  tlp->p_next = (thread_t *)tlp;
 80009a0:	6267      	str	r7, [r4, #36]	; 0x24
  tqp->p_next = (thread_t *)tqp;
 80009a2:	62a3      	str	r3, [r4, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 80009a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009a6:	d80e      	bhi.n	80009c6 <chThdCreateStatic.constprop.23+0x76>
  tp->p_state = CH_STATE_READY;
 80009a8:	7720      	strb	r0, [r4, #28]
    cp = cp->p_next;
 80009aa:	682d      	ldr	r5, [r5, #0]
  } while (cp->p_prio >= tp->p_prio);
 80009ac:	68a9      	ldr	r1, [r5, #8]
 80009ae:	428a      	cmp	r2, r1
 80009b0:	d9fb      	bls.n	80009aa <chThdCreateStatic.constprop.23+0x5a>
  tp->p_prev = cp->p_prev;
 80009b2:	686a      	ldr	r2, [r5, #4]
  tp->p_next = cp;
 80009b4:	6025      	str	r5, [r4, #0]
  tp->p_prev = cp->p_prev;
 80009b6:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 80009b8:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80009ba:	606c      	str	r4, [r5, #4]
 80009bc:	2300      	movs	r3, #0
 80009be:	f383 8811 	msr	BASEPRI, r3
}
 80009c2:	4620      	mov	r0, r4
 80009c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  cp = (thread_t *)&ch.rlist.r_queue;
 80009c6:	462b      	mov	r3, r5
  tp->p_state = CH_STATE_READY;
 80009c8:	7730      	strb	r0, [r6, #28]
    cp = cp->p_next;
 80009ca:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	4291      	cmp	r1, r2
 80009d0:	d9fb      	bls.n	80009ca <chThdCreateStatic.constprop.23+0x7a>
    ntp->p_state = CH_STATE_CURRENT;
 80009d2:	2701      	movs	r7, #1
  tp->p_prev = cp->p_prev;
 80009d4:	685a      	ldr	r2, [r3, #4]
    chSysSwitch(ntp, otp);
 80009d6:	4631      	mov	r1, r6
  tp->p_next = cp;
 80009d8:	6033      	str	r3, [r6, #0]
  tp->p_prev = cp->p_prev;
 80009da:	6072      	str	r2, [r6, #4]
    chSysSwitch(ntp, otp);
 80009dc:	4620      	mov	r0, r4
  tp->p_prev->p_next = tp;
 80009de:	6016      	str	r6, [r2, #0]
  cp->p_prev = tp;
 80009e0:	605e      	str	r6, [r3, #4]
    ntp->p_state = CH_STATE_CURRENT;
 80009e2:	7727      	strb	r7, [r4, #28]
    setcurrp(ntp);
 80009e4:	61ac      	str	r4, [r5, #24]
    chSysSwitch(ntp, otp);
 80009e6:	f7ff fc23 	bl	8000230 <_port_switch>
 80009ea:	e7e7      	b.n	80009bc <chThdCreateStatic.constprop.23+0x6c>
 80009ec:	08000241 	.word	0x08000241
 80009f0:	20000b98 	.word	0x20000b98
	...

08000a00 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 8000a00:	b430      	push	{r4, r5}
  currp->p_state = CH_STATE_CURRENT;
 8000a02:	2501      	movs	r5, #1
  otp = currp;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <chSchGoSleepS+0x20>)
 8000a06:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->p_next;
 8000a08:	681a      	ldr	r2, [r3, #0]
  otp->p_state = newstate;
 8000a0a:	7708      	strb	r0, [r1, #28]
  tqp->p_next = tp->p_next;
 8000a0c:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
 8000a0e:	4610      	mov	r0, r2
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000a10:	6063      	str	r3, [r4, #4]
  currp->p_state = CH_STATE_CURRENT;
 8000a12:	7715      	strb	r5, [r2, #28]
  tqp->p_next = tp->p_next;
 8000a14:	601c      	str	r4, [r3, #0]
}
 8000a16:	bc30      	pop	{r4, r5}
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000a18:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 8000a1a:	f7ff bc09 	b.w	8000230 <_port_switch>
 8000a1e:	bf00      	nop
 8000a20:	20000b98 	.word	0x20000b98
	...

08000a30 <chSchGoSleepTimeoutS>:
  if (TIME_INFINITE != time) {
 8000a30:	f64f 73ff 	movw	r3, #65535	; 0xffff
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000a34:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (TIME_INFINITE != time) {
 8000a36:	4299      	cmp	r1, r3
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000a38:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
 8000a3a:	d055      	beq.n	8000ae8 <chSchGoSleepTimeoutS+0xb8>
    chVTDoSetI(&vt, time, wakeup, currp);
 8000a3c:	4c4c      	ldr	r4, [pc, #304]	; (8000b70 <chSchGoSleepTimeoutS+0x140>)
  return (systime_t)STM32_ST_TIM->CNT;
 8000a3e:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000a42:	4625      	mov	r5, r4
 8000a44:	4607      	mov	r7, r0
 8000a46:	f855 0f1c 	ldr.w	r0, [r5, #28]!
 8000a4a:	f8de 2024 	ldr.w	r2, [lr, #36]	; 0x24
  vtp->vt_par = par;
 8000a4e:	69a6      	ldr	r6, [r4, #24]
 8000a50:	2902      	cmp	r1, #2
  vtp->vt_func = vtfunc;
 8000a52:	4b48      	ldr	r3, [pc, #288]	; (8000b74 <chSchGoSleepTimeoutS+0x144>)
 8000a54:	bf38      	it	cc
 8000a56:	2102      	movcc	r1, #2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000a58:	42a8      	cmp	r0, r5
  vtp->vt_par = par;
 8000a5a:	9605      	str	r6, [sp, #20]
  vtp->vt_func = vtfunc;
 8000a5c:	9304      	str	r3, [sp, #16]
 8000a5e:	b296      	uxth	r6, r2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000a60:	d06e      	beq.n	8000b40 <chSchGoSleepTimeoutS+0x110>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.vt_next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.vt_lasttime + delay;
 8000a62:	f8b4 c026 	ldrh.w	ip, [r4, #38]	; 0x26

    if (delta < now - ch.vtlist.vt_lasttime) {
 8000a66:	b292      	uxth	r2, r2
    delta = now - ch.vtlist.vt_lasttime + delay;
 8000a68:	eba6 060c 	sub.w	r6, r6, ip
 8000a6c:	198b      	adds	r3, r1, r6
    if (delta < now - ch.vtlist.vt_lasttime) {
 8000a6e:	eba2 020c 	sub.w	r2, r2, ip
    delta = now - ch.vtlist.vt_lasttime + delay;
 8000a72:	b29b      	uxth	r3, r3
    if (delta < now - ch.vtlist.vt_lasttime) {
 8000a74:	4293      	cmp	r3, r2
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
 8000a76:	8902      	ldrh	r2, [r0, #8]
    if (delta < now - ch.vtlist.vt_lasttime) {
 8000a78:	db31      	blt.n	8000ade <chSchGoSleepTimeoutS+0xae>
      p = p->vt_next;
    }
    else if (delta < p->vt_delta) {
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d33b      	bcc.n	8000af6 <chSchGoSleepTimeoutS+0xc6>
  p = ch.vtlist.vt_next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d905      	bls.n	8000a8e <chSchGoSleepTimeoutS+0x5e>
    delta -= p->vt_delta;
    p = p->vt_next;
 8000a82:	6800      	ldr	r0, [r0, #0]
    delta -= p->vt_delta;
 8000a84:	1a9b      	subs	r3, r3, r2
  while (p->vt_delta < delta) {
 8000a86:	8902      	ldrh	r2, [r0, #8]
    delta -= p->vt_delta;
 8000a88:	b29b      	uxth	r3, r3
  while (p->vt_delta < delta) {
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d3f9      	bcc.n	8000a82 <chSchGoSleepTimeoutS+0x52>
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
  ch.vtlist.vt_delta = (systime_t)-1;
 8000a8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8000a92:	6842      	ldr	r2, [r0, #4]
  vtp->vt_prev->vt_next = vtp;
 8000a94:	ae01      	add	r6, sp, #4
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8000a96:	9202      	str	r2, [sp, #8]
  vtp->vt_next = p;
 8000a98:	9001      	str	r0, [sp, #4]
  vtp->vt_prev->vt_next = vtp;
 8000a9a:	6016      	str	r6, [r2, #0]
  p->vt_prev = vtp;
 8000a9c:	6046      	str	r6, [r0, #4]
  vtp->vt_delta = delta
 8000a9e:	f8ad 300c 	strh.w	r3, [sp, #12]
  p->vt_delta -= delta;
 8000aa2:	8902      	ldrh	r2, [r0, #8]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	8103      	strh	r3, [r0, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8000aa8:	84a1      	strh	r1, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8000aaa:	4638      	mov	r0, r7
 8000aac:	f7ff ffa8 	bl	8000a00 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8000ab0:	9b04      	ldr	r3, [sp, #16]
 8000ab2:	b183      	cbz	r3, 8000ad6 <chSchGoSleepTimeoutS+0xa6>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8000ab4:	69e3      	ldr	r3, [r4, #28]
 8000ab6:	42b3      	cmp	r3, r6
 8000ab8:	d023      	beq.n	8000b02 <chSchGoSleepTimeoutS+0xd2>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
    vtp->vt_func = NULL;
 8000aba:	2100      	movs	r1, #0
    vtp->vt_prev->vt_next = vtp->vt_next;
 8000abc:	9a02      	ldr	r2, [sp, #8]
 8000abe:	9b01      	ldr	r3, [sp, #4]
 8000ac0:	6013      	str	r3, [r2, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000ac2:	9b01      	ldr	r3, [sp, #4]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000ac4:	42ab      	cmp	r3, r5
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000ac6:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 8000ac8:	9104      	str	r1, [sp, #16]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000aca:	d004      	beq.n	8000ad6 <chSchGoSleepTimeoutS+0xa6>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 8000acc:	891a      	ldrh	r2, [r3, #8]
 8000ace:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8000ad2:	440a      	add	r2, r1
 8000ad4:	811a      	strh	r2, [r3, #8]
  return currp->p_u.rdymsg;
 8000ad6:	69a3      	ldr	r3, [r4, #24]
}
 8000ad8:	6a18      	ldr	r0, [r3, #32]
 8000ada:	b007      	add	sp, #28
 8000adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      p = p->vt_next;
 8000ade:	6800      	ldr	r0, [r0, #0]
      delta -= p->vt_delta;
 8000ae0:	1a9b      	subs	r3, r3, r2
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	8902      	ldrh	r2, [r0, #8]
 8000ae6:	e7ca      	b.n	8000a7e <chSchGoSleepTimeoutS+0x4e>
    chSchGoSleepS(newstate);
 8000ae8:	f7ff ff8a 	bl	8000a00 <chSchGoSleepS>
 8000aec:	4c20      	ldr	r4, [pc, #128]	; (8000b70 <chSchGoSleepTimeoutS+0x140>)
  return currp->p_u.rdymsg;
 8000aee:	69a3      	ldr	r3, [r4, #24]
}
 8000af0:	6a18      	ldr	r0, [r3, #32]
 8000af2:	b007      	add	sp, #28
 8000af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      port_timer_set_alarm(ch.vtlist.vt_lasttime + delta);
 8000af6:	eb0c 0103 	add.w	r1, ip, r3
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000afa:	b289      	uxth	r1, r1
 8000afc:	f8ce 1034 	str.w	r1, [lr, #52]	; 0x34
 8000b00:	e7bd      	b.n	8000a7e <chSchGoSleepTimeoutS+0x4e>
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8000b02:	2300      	movs	r3, #0
  ch.vtlist.vt_next = vtp->vt_next;
 8000b04:	9e01      	ldr	r6, [sp, #4]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000b06:	42ae      	cmp	r6, r5
  ch.vtlist.vt_next = vtp->vt_next;
 8000b08:	61e6      	str	r6, [r4, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000b0a:	6075      	str	r5, [r6, #4]
  vtp->vt_func = NULL;
 8000b0c:	9304      	str	r3, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000b0e:	d02a      	beq.n	8000b66 <chSchGoSleepTimeoutS+0x136>
  return (systime_t)STM32_ST_TIM->CNT;
 8000b10:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000b14:	6a42      	ldr	r2, [r0, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000b16:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000b18:	8933      	ldrh	r3, [r6, #8]
 8000b1a:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 8000b1e:	b292      	uxth	r2, r2
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000b20:	1a51      	subs	r1, r2, r1
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000b22:	442b      	add	r3, r5
 8000b24:	b29b      	uxth	r3, r3
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000b26:	b289      	uxth	r1, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8000b28:	428b      	cmp	r3, r1
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000b2a:	8133      	strh	r3, [r6, #8]
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8000b2c:	d9d3      	bls.n	8000ad6 <chSchGoSleepTimeoutS+0xa6>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8000b2e:	1a5b      	subs	r3, r3, r1
 8000b30:	b29b      	uxth	r3, r3
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	bf2c      	ite	cs
 8000b36:	18d3      	addcs	r3, r2, r3
 8000b38:	1c93      	addcc	r3, r2, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	6343      	str	r3, [r0, #52]	; 0x34
 8000b3e:	e7ca      	b.n	8000ad6 <chSchGoSleepTimeoutS+0xa6>
  STM32_ST_TIM->SR     = 0;
 8000b40:	2000      	movs	r0, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000b42:	2202      	movs	r2, #2
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8000b44:	198b      	adds	r3, r1, r6
      ch.vtlist.vt_lasttime = now;
 8000b46:	84e6      	strh	r6, [r4, #38]	; 0x26
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000b48:	b29b      	uxth	r3, r3
      ch.vtlist.vt_next = vtp;
 8000b4a:	ae01      	add	r6, sp, #4
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 8000b4c:	9501      	str	r5, [sp, #4]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000b4e:	9502      	str	r5, [sp, #8]
      vtp->vt_delta = delay;
 8000b50:	f8ad 100c 	strh.w	r1, [sp, #12]
      ch.vtlist.vt_next = vtp;
 8000b54:	61e6      	str	r6, [r4, #28]
      ch.vtlist.vt_prev = vtp;
 8000b56:	6226      	str	r6, [r4, #32]
 8000b58:	f8ce 3034 	str.w	r3, [lr, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8000b5c:	f8ce 0010 	str.w	r0, [lr, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000b60:	f8ce 200c 	str.w	r2, [lr, #12]
 8000b64:	e7a1      	b.n	8000aaa <chSchGoSleepTimeoutS+0x7a>
  STM32_ST_TIM->DIER = 0;
 8000b66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b6a:	60d3      	str	r3, [r2, #12]
 8000b6c:	e7b3      	b.n	8000ad6 <chSchGoSleepTimeoutS+0xa6>
 8000b6e:	bf00      	nop
 8000b70:	20000b98 	.word	0x20000b98
 8000b74:	08000641 	.word	0x08000641
	...

08000b80 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8000b80:	b161      	cbz	r1, 8000b9c <chThdEnqueueTimeoutS+0x1c>
 8000b82:	4602      	mov	r2, r0
  queue_insert(currp, tqp);
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8000b86:	b410      	push	{r4}
  queue_insert(currp, tqp);
 8000b88:	699b      	ldr	r3, [r3, #24]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000b8a:	2004      	movs	r0, #4
  tp->p_next = (thread_t *)tqp;
 8000b8c:	601a      	str	r2, [r3, #0]
  tp->p_prev = tqp->p_prev;
 8000b8e:	6854      	ldr	r4, [r2, #4]
 8000b90:	605c      	str	r4, [r3, #4]
  tp->p_prev->p_next = tp;
 8000b92:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 8000b94:	6053      	str	r3, [r2, #4]
}
 8000b96:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000b98:	f7ff bf4a 	b.w	8000a30 <chSchGoSleepTimeoutS>
}
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000b98 	.word	0x20000b98
	...

08000bb0 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8000bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	460d      	mov	r5, r1
 8000bba:	4616      	mov	r6, r2
 8000bbc:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 8000bbe:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8000bc2:	f04f 0920 	mov.w	r9, #32
 8000bc6:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 8000bca:	2700      	movs	r7, #0
 8000bcc:	46ba      	mov	sl, r7
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8000bce:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8000bd0:	f105 0b01 	add.w	fp, r5, #1
    while (chOQIsFullI(oqp)) {
 8000bd4:	b303      	cbz	r3, 8000c18 <chOQWriteTimeout+0x68>
    *oqp->q_wrptr++ = *bp++;
 8000bd6:	6961      	ldr	r1, [r4, #20]
    oqp->q_counter--;
 8000bd8:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8000bda:	1c48      	adds	r0, r1, #1
    oqp->q_counter--;
 8000bdc:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 8000bde:	6160      	str	r0, [r4, #20]
    oqp->q_counter--;
 8000be0:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8000be2:	782b      	ldrb	r3, [r5, #0]
 8000be4:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8000be6:	6923      	ldr	r3, [r4, #16]
 8000be8:	6961      	ldr	r1, [r4, #20]
 8000bea:	4299      	cmp	r1, r3
      oqp->q_wrptr = oqp->q_buffer;
 8000bec:	bf24      	itt	cs
 8000bee:	68e3      	ldrcs	r3, [r4, #12]
 8000bf0:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 8000bf2:	f1b8 0f00 	cmp.w	r8, #0
 8000bf6:	d001      	beq.n	8000bfc <chOQWriteTimeout+0x4c>
      nfy(oqp);
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	47c0      	blx	r8
 8000bfc:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 8000c00:	3e01      	subs	r6, #1
    w++;
 8000c02:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 8000c06:	d011      	beq.n	8000c2c <chOQWriteTimeout+0x7c>
 8000c08:	f389 8811 	msr	BASEPRI, r9
    *oqp->q_wrptr++ = *bp++;
 8000c0c:	465d      	mov	r5, fp
 8000c0e:	68a3      	ldr	r3, [r4, #8]
 8000c10:	f105 0b01 	add.w	fp, r5, #1
    while (chOQIsFullI(oqp)) {
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d1de      	bne.n	8000bd6 <chOQWriteTimeout+0x26>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8000c18:	9901      	ldr	r1, [sp, #4]
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	f7ff ffaf 	bl	8000b80 <chThdEnqueueTimeoutS>
 8000c22:	9b00      	ldr	r3, [sp, #0]
 8000c24:	2800      	cmp	r0, #0
 8000c26:	d0d2      	beq.n	8000bce <chOQWriteTimeout+0x1e>
 8000c28:	f383 8811 	msr	BASEPRI, r3
      return w;
    }
    chSysLock();
  }
}
 8000c2c:	4638      	mov	r0, r7
 8000c2e:	b003      	add	sp, #12
 8000c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000c40 <writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8000c40:	3030      	adds	r0, #48	; 0x30
 8000c42:	f7ff bfb5 	b.w	8000bb0 <chOQWriteTimeout>
 8000c46:	bf00      	nop
	...

08000c50 <write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8000c50:	3030      	adds	r0, #48	; 0x30
 8000c52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c56:	f7ff bfab 	b.w	8000bb0 <chOQWriteTimeout>
 8000c5a:	bf00      	nop
 8000c5c:	0000      	movs	r0, r0
	...

08000c60 <chOQPutTimeout>:
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8000c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c62:	4604      	mov	r4, r0
 8000c64:	460f      	mov	r7, r1
 8000c66:	4616      	mov	r6, r2
 8000c68:	2320      	movs	r3, #32
 8000c6a:	f383 8811 	msr	BASEPRI, r3
 8000c6e:	e005      	b.n	8000c7c <chOQPutTimeout+0x1c>
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8000c70:	4631      	mov	r1, r6
 8000c72:	4620      	mov	r0, r4
 8000c74:	f7ff ff84 	bl	8000b80 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8000c78:	2800      	cmp	r0, #0
 8000c7a:	db17      	blt.n	8000cac <chOQPutTimeout+0x4c>
 8000c7c:	68a5      	ldr	r5, [r4, #8]
  while (chOQIsFullI(oqp)) {
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	d0f6      	beq.n	8000c70 <chOQPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 8000c82:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8000c84:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000c86:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8000c88:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8000c8a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 8000c8c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000c8e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8000c90:	6923      	ldr	r3, [r4, #16]
 8000c92:	6962      	ldr	r2, [r4, #20]
 8000c94:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8000c96:	bf24      	itt	cs
 8000c98:	68e3      	ldrcs	r3, [r4, #12]
 8000c9a:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 8000c9c:	69e3      	ldr	r3, [r4, #28]
 8000c9e:	b10b      	cbz	r3, 8000ca4 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	4798      	blx	r3
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f380 8811 	msr	BASEPRI, r0
}
 8000caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cac:	f385 8811 	msr	BASEPRI, r5
 8000cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cb2:	bf00      	nop
	...

08000cc0 <putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8000cc0:	3030      	adds	r0, #48	; 0x30
 8000cc2:	f7ff bfcd 	b.w	8000c60 <chOQPutTimeout>
 8000cc6:	bf00      	nop
	...

08000cd0 <put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8000cd0:	3030      	adds	r0, #48	; 0x30
 8000cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cd6:	f7ff bfc3 	b.w	8000c60 <chOQPutTimeout>
 8000cda:	bf00      	nop
 8000cdc:	0000      	movs	r0, r0
	...

08000ce0 <chIQReadTimeout>:
                       size_t n, systime_t timeout) {
 8000ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ce4:	4604      	mov	r4, r0
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	4689      	mov	r9, r1
 8000cea:	4693      	mov	fp, r2
 8000cec:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 8000cee:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8000cf2:	2720      	movs	r7, #32
 8000cf4:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	46b2      	mov	sl, r6
 8000cfc:	9701      	str	r7, [sp, #4]
    if (nfy != NULL) {
 8000cfe:	f1b8 0f00 	cmp.w	r8, #0
 8000d02:	d007      	beq.n	8000d14 <chIQReadTimeout+0x34>
      nfy(iqp);
 8000d04:	4620      	mov	r0, r4
 8000d06:	47c0      	blx	r8
 8000d08:	e004      	b.n	8000d14 <chIQReadTimeout+0x34>
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	4620      	mov	r0, r4
 8000d0e:	f7ff ff37 	bl	8000b80 <chThdEnqueueTimeoutS>
 8000d12:	b9d0      	cbnz	r0, 8000d4a <chIQReadTimeout+0x6a>
  return (bool)(chQSpaceI(iqp) == 0U);
 8000d14:	68a7      	ldr	r7, [r4, #8]
    while (chIQIsEmptyI(iqp)) {
 8000d16:	2f00      	cmp	r7, #0
 8000d18:	d0f7      	beq.n	8000d0a <chIQReadTimeout+0x2a>
    *bp++ = *iqp->q_rdptr++;
 8000d1a:	69a2      	ldr	r2, [r4, #24]
    iqp->q_counter--;
 8000d1c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8000d1e:	1c51      	adds	r1, r2, #1
    iqp->q_counter--;
 8000d20:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 8000d22:	61a1      	str	r1, [r4, #24]
    iqp->q_counter--;
 8000d24:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8000d26:	7813      	ldrb	r3, [r2, #0]
 8000d28:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 8000d2c:	6923      	ldr	r3, [r4, #16]
 8000d2e:	69a2      	ldr	r2, [r4, #24]
 8000d30:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8000d32:	bf24      	itt	cs
 8000d34:	68e3      	ldrcs	r3, [r4, #12]
 8000d36:	61a3      	strcs	r3, [r4, #24]
 8000d38:	f38a 8811 	msr	BASEPRI, sl
    r++;
 8000d3c:	3601      	adds	r6, #1
    if (--n == 0U) {
 8000d3e:	45b3      	cmp	fp, r6
 8000d40:	d005      	beq.n	8000d4e <chIQReadTimeout+0x6e>
 8000d42:	9b01      	ldr	r3, [sp, #4]
 8000d44:	f383 8811 	msr	BASEPRI, r3
 8000d48:	e7d9      	b.n	8000cfe <chIQReadTimeout+0x1e>
 8000d4a:	f387 8811 	msr	BASEPRI, r7
}
 8000d4e:	4630      	mov	r0, r6
 8000d50:	b003      	add	sp, #12
 8000d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d56:	bf00      	nop
	...

08000d60 <readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8000d60:	300c      	adds	r0, #12
 8000d62:	f7ff bfbd 	b.w	8000ce0 <chIQReadTimeout>
 8000d66:	bf00      	nop
	...

08000d70 <read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8000d70:	300c      	adds	r0, #12
 8000d72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d76:	f7ff bfb3 	b.w	8000ce0 <chIQReadTimeout>
 8000d7a:	bf00      	nop
 8000d7c:	0000      	movs	r0, r0
	...

08000d80 <chIQGetTimeout>:
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8000d80:	b570      	push	{r4, r5, r6, lr}
 8000d82:	2320      	movs	r3, #32
 8000d84:	460e      	mov	r6, r1
 8000d86:	4604      	mov	r4, r0
 8000d88:	f383 8811 	msr	BASEPRI, r3
  if (iqp->q_notify != NULL) {
 8000d8c:	69c3      	ldr	r3, [r0, #28]
 8000d8e:	b13b      	cbz	r3, 8000da0 <chIQGetTimeout+0x20>
    iqp->q_notify(iqp);
 8000d90:	4798      	blx	r3
 8000d92:	e005      	b.n	8000da0 <chIQGetTimeout+0x20>
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8000d94:	4631      	mov	r1, r6
 8000d96:	4620      	mov	r0, r4
 8000d98:	f7ff fef2 	bl	8000b80 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8000d9c:	2800      	cmp	r0, #0
 8000d9e:	db13      	blt.n	8000dc8 <chIQGetTimeout+0x48>
 8000da0:	68a5      	ldr	r5, [r4, #8]
  while (chIQIsEmptyI(iqp)) {
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	d0f6      	beq.n	8000d94 <chIQGetTimeout+0x14>
  b = *iqp->q_rdptr++;
 8000da6:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8000da8:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8000daa:	6925      	ldr	r5, [r4, #16]
  b = *iqp->q_rdptr++;
 8000dac:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8000dae:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8000db0:	42aa      	cmp	r2, r5
  iqp->q_counter--;
 8000db2:	60a3      	str	r3, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer;
 8000db4:	bf28      	it	cs
 8000db6:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 8000db8:	61a2      	str	r2, [r4, #24]
 8000dba:	7808      	ldrb	r0, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8000dbc:	bf28      	it	cs
 8000dbe:	61a3      	strcs	r3, [r4, #24]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f383 8811 	msr	BASEPRI, r3
}
 8000dc6:	bd70      	pop	{r4, r5, r6, pc}
 8000dc8:	f385 8811 	msr	BASEPRI, r5
 8000dcc:	bd70      	pop	{r4, r5, r6, pc}
 8000dce:	bf00      	nop

08000dd0 <gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8000dd0:	300c      	adds	r0, #12
 8000dd2:	f7ff bfd5 	b.w	8000d80 <chIQGetTimeout>
 8000dd6:	bf00      	nop
	...

08000de0 <get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8000de0:	300c      	adds	r0, #12
 8000de2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000de6:	f7ff bfcb 	b.w	8000d80 <chIQGetTimeout>
 8000dea:	bf00      	nop
 8000dec:	0000      	movs	r0, r0
	...

08000df0 <chThdSleep>:
void chThdSleep(systime_t time) {
 8000df0:	b508      	push	{r3, lr}
 8000df2:	4601      	mov	r1, r0
 8000df4:	2320      	movs	r3, #32
 8000df6:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8000dfa:	2008      	movs	r0, #8
 8000dfc:	f7ff fe18 	bl	8000a30 <chSchGoSleepTimeoutS>
 8000e00:	2300      	movs	r3, #0
 8000e02:	f383 8811 	msr	BASEPRI, r3
 8000e06:	bd08      	pop	{r3, pc}
	...

08000e10 <MotorThd>:
  pwmEnableChannel(pin->driver, pin->channel, PWM_PERCENTAGE_TO_WIDTH(pin->driver, pin->dutycycle));

}

static THD_WORKING_AREA(MotorThdwa, 128);
static THD_FUNCTION(MotorThd, arg) {
 8000e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return ch.rlist.r_current;
 8000e14:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8000ea4 <MotorThd+0x94>
  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8000e18:	f8d8 3018 	ldr.w	r3, [r8, #24]

  (void)arg;

  static uint8_t i = 0;

  while (!chThdShouldTerminateX()) {
 8000e1c:	7f5b      	ldrb	r3, [r3, #29]
 8000e1e:	f013 0604 	ands.w	r6, r3, #4
 8000e22:	d137      	bne.n	8000e94 <MotorThd+0x84>
 8000e24:	4c1c      	ldr	r4, [pc, #112]	; (8000e98 <MotorThd+0x88>)
 8000e26:	4d1d      	ldr	r5, [pc, #116]	; (8000e9c <MotorThd+0x8c>)
  pwmEnableChannel(pin->driver, pin->channel, PWM_PERCENTAGE_TO_WIDTH(pin->driver, pin->dutycycle));
 8000e28:	4f1d      	ldr	r7, [pc, #116]	; (8000ea0 <MotorThd+0x90>)

    for (i = 0; i < MOTORNUM; i++) {
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f04f 0e20 	mov.w	lr, #32

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
 8000e30:	2001      	movs	r0, #1
 8000e32:	7026      	strb	r6, [r4, #0]
  pwmEnableChannel(pin->driver, pin->channel, PWM_PERCENTAGE_TO_WIDTH(pin->driver, pin->dutycycle));
 8000e34:	f855 c033 	ldr.w	ip, [r5, r3, lsl #3]
 8000e38:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8000e3c:	88d9      	ldrh	r1, [r3, #6]
 8000e3e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8000e42:	f893 9004 	ldrb.w	r9, [r3, #4]
 8000e46:	fb02 f201 	mul.w	r2, r2, r1
 8000e4a:	fba7 3202 	umull	r3, r2, r7, r2
 8000e4e:	0b52      	lsrs	r2, r2, #13
 8000e50:	f38e 8811 	msr	BASEPRI, lr
 8000e54:	f8dc 100c 	ldr.w	r1, [ip, #12]
  pwmp->tim->CCR[channel] = width;
 8000e58:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8000e5c:	fa00 fa09 	lsl.w	sl, r0, r9
 8000e60:	f109 090c 	add.w	r9, r9, #12
 8000e64:	ea41 010a 	orr.w	r1, r1, sl
 8000e68:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8000e6c:	f8cc 100c 	str.w	r1, [ip, #12]
 8000e70:	f8c9 2004 	str.w	r2, [r9, #4]
 8000e74:	f386 8811 	msr	BASEPRI, r6
    for (i = 0; i < MOTORNUM; i++) {
 8000e78:	7823      	ldrb	r3, [r4, #0]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	7023      	strb	r3, [r4, #0]
 8000e82:	d9d7      	bls.n	8000e34 <MotorThd+0x24>
      motorpwmSet(&motorPins[i]);
    }

    chThdSleepMilliseconds(1);
 8000e84:	2001      	movs	r0, #1
 8000e86:	f7ff ffb3 	bl	8000df0 <chThdSleep>
 8000e8a:	f8d8 3018 	ldr.w	r3, [r8, #24]
  while (!chThdShouldTerminateX()) {
 8000e8e:	7f5b      	ldrb	r3, [r3, #29]
 8000e90:	075b      	lsls	r3, r3, #29
 8000e92:	d5ca      	bpl.n	8000e2a <MotorThd+0x1a>
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	20000d17 	.word	0x20000d17
 8000e9c:	20000d18 	.word	0x20000d18
 8000ea0:	d1b71759 	.word	0xd1b71759
 8000ea4:	20000b98 	.word	0x20000b98
	...

08000eb0 <Thread1>:
static THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palClearPad(GPIOC, GPIOC_BUTTON);
 8000eb0:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8000eb4:	462e      	mov	r6, r5
static THD_FUNCTION(Thread1, arg) {
 8000eb6:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <Thread1+0x24>)
 8000eba:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <Thread1+0x28>)
 8000ebc:	699b      	ldr	r3, [r3, #24]
    palClearPad(GPIOC, GPIOC_BUTTON);
 8000ebe:	4c07      	ldr	r4, [pc, #28]	; (8000edc <Thread1+0x2c>)
 8000ec0:	619a      	str	r2, [r3, #24]
 8000ec2:	6166      	str	r6, [r4, #20]
    chThdSleepMilliseconds(50);
 8000ec4:	2032      	movs	r0, #50	; 0x32
 8000ec6:	f7ff ff93 	bl	8000df0 <chThdSleep>
    palSetPad(GPIOC, GPIOC_BUTTON);
 8000eca:	6125      	str	r5, [r4, #16]
    chThdSleepMilliseconds(50);
 8000ecc:	2032      	movs	r0, #50	; 0x32
 8000ece:	f7ff ff8f 	bl	8000df0 <chThdSleep>
 8000ed2:	e7f6      	b.n	8000ec2 <Thread1+0x12>
 8000ed4:	20000b98 	.word	0x20000b98
 8000ed8:	080017b0 	.word	0x080017b0
 8000edc:	40011000 	.word	0x40011000

08000ee0 <BluetoothThd>:
  i = 0;

}

static THD_WORKING_AREA(BluetoothThd_wa, 128);
static THD_FUNCTION(BluetoothThd, arg) {
 8000ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  (void)arg;

  memset((void*) sdrxbuf, 0, SERIAL_BUFFERS_SIZE);
 8000ee4:	f04f 0920 	mov.w	r9, #32
static THD_FUNCTION(BluetoothThd, arg) {
 8000ee8:	b089      	sub	sp, #36	; 0x24
  memset((void*) sdrxbuf, 0, SERIAL_BUFFERS_SIZE);
 8000eea:	2100      	movs	r1, #0
 8000eec:	464a      	mov	r2, r9
 8000eee:	4879      	ldr	r0, [pc, #484]	; (80010d4 <BluetoothThd+0x1f4>)
 8000ef0:	f000 fc0e 	bl	8001710 <memset>
 8000ef4:	f389 8811 	msr	BASEPRI, r9
  elp->el_events   = events;
 8000ef8:	2701      	movs	r7, #1
  elp->el_wflags   = wflags;
 8000efa:	f240 30e6 	movw	r0, #998	; 0x3e6
  elp->el_flags    = (eventflags_t)0;
 8000efe:	2100      	movs	r1, #0
  elp->el_next     = esp->es_next;
 8000f00:	4a75      	ldr	r2, [pc, #468]	; (80010d8 <BluetoothThd+0x1f8>)
  elp->el_listener = currp;
 8000f02:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 80010f4 <BluetoothThd+0x214>
  elp->el_next     = esp->es_next;
 8000f06:	6856      	ldr	r6, [r2, #4]
 8000f08:	eb0d 0309 	add.w	r3, sp, r9
  elp->el_listener = currp;
 8000f0c:	f8da 5018 	ldr.w	r5, [sl, #24]
  elp->el_next     = esp->es_next;
 8000f10:	f843 6d14 	str.w	r6, [r3, #-20]!
  elp->el_listener = currp;
 8000f14:	9504      	str	r5, [sp, #16]
  elp->el_events   = events;
 8000f16:	9705      	str	r7, [sp, #20]
  elp->el_wflags   = wflags;
 8000f18:	9007      	str	r0, [sp, #28]
  esp->es_next     = elp;
 8000f1a:	6053      	str	r3, [r2, #4]
  elp->el_flags    = (eventflags_t)0;
 8000f1c:	9106      	str	r1, [sp, #24]
 8000f1e:	f381 8811 	msr	BASEPRI, r1
  return ch.rlist.r_current;
 8000f22:	f8da 5018 	ldr.w	r5, [sl, #24]
  static eventflags_t pending_flags;
  static eventflags_t current_flag;
  chEvtRegisterMaskWithFlags(chnGetEventSource(&SD2), &serial_listener,
                             SERIAL_EVT_MASK, serial_wkup_flags);   //setup event listening

  while (!chThdShouldTerminateX()) {
 8000f26:	7f6b      	ldrb	r3, [r5, #29]
 8000f28:	0759      	lsls	r1, r3, #29
 8000f2a:	d43e      	bmi.n	8000faa <BluetoothThd+0xca>
        switch(current_flag) {

            case CHN_INPUT_AVAILABLE:                                     //Serial data available
                chThdSleep(MS2ST(ACQTIME));                            //Acquire data packet, release CPU
                if((!pending_flags)) {
                    datalength = sdAsynchronousRead(&SD2, &sdrxbuf,
 8000f2c:	f102 030c 	add.w	r3, r2, #12
 8000f30:	4c6a      	ldr	r4, [pc, #424]	; (80010dc <BluetoothThd+0x1fc>)
 8000f32:	4e6b      	ldr	r6, [pc, #428]	; (80010e0 <BluetoothThd+0x200>)
 8000f34:	f8df b19c 	ldr.w	fp, [pc, #412]	; 80010d4 <BluetoothThd+0x1f4>
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	f389 8811 	msr	BASEPRI, r9
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8000f3e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8000f40:	07da      	lsls	r2, r3, #31
 8000f42:	f140 80b2 	bpl.w	80010aa <BluetoothThd+0x1ca>
 8000f46:	f06f 0201 	mvn.w	r2, #1
    ctp->p_u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
    m = ctp->p_epending & events;
  }
  ctp->p_epending &= ~m;
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	636b      	str	r3, [r5, #52]	; 0x34
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f383 8811 	msr	BASEPRI, r3
 8000f54:	f389 8811 	msr	BASEPRI, r9
  flags = elp->el_flags;
 8000f58:	9a06      	ldr	r2, [sp, #24]
  elp->el_flags = (eventflags_t)0;
 8000f5a:	9306      	str	r3, [sp, #24]
    pending_flags = chEvtGetAndClearFlagsI(&serial_listener);       //get event flag
 8000f5c:	6022      	str	r2, [r4, #0]
 8000f5e:	f383 8811 	msr	BASEPRI, r3
 8000f62:	6822      	ldr	r2, [r4, #0]
    foundheader = false;
 8000f64:	7033      	strb	r3, [r6, #0]
        current_flag = LEAST_SET_BIT(pending_flags);                  //isolates single flag to work on
 8000f66:	4253      	negs	r3, r2
 8000f68:	4013      	ands	r3, r2
        pending_flags &= ~current_flag;                               //removes isolated flag
 8000f6a:	ea22 0203 	bic.w	r2, r2, r3
        switch(current_flag) {
 8000f6e:	2b40      	cmp	r3, #64	; 0x40
        pending_flags &= ~current_flag;                               //removes isolated flag
 8000f70:	6022      	str	r2, [r4, #0]
        switch(current_flag) {
 8000f72:	d026      	beq.n	8000fc2 <BluetoothThd+0xe2>
 8000f74:	d82e      	bhi.n	8000fd4 <BluetoothThd+0xf4>
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	d03e      	beq.n	8000ff8 <BluetoothThd+0x118>
 8000f7a:	2b20      	cmp	r3, #32
 8000f7c:	d033      	beq.n	8000fe6 <BluetoothThd+0x106>
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d01f      	beq.n	8000fc2 <BluetoothThd+0xe2>
            default:
                break;

        }

    } while (pending_flags && !foundheader);
 8000f82:	b112      	cbz	r2, 8000f8a <BluetoothThd+0xaa>
 8000f84:	7833      	ldrb	r3, [r6, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0ed      	beq.n	8000f66 <BluetoothThd+0x86>
 8000f8a:	f389 8811 	msr	BASEPRI, r9

    FLUSH_I_QUEUE(&SD2);
 8000f8e:	f7ff fbdf 	bl	8000750 <chIQResetI.constprop.12>
 8000f92:	2100      	movs	r1, #0
 8000f94:	f381 8811 	msr	BASEPRI, r1
    memset((void*)sdrxbuf, 0, SERIAL_BUFFERS_SIZE);               //Flush RX buffer
 8000f98:	2220      	movs	r2, #32
 8000f9a:	4658      	mov	r0, fp
 8000f9c:	f000 fbb8 	bl	8001710 <memset>
 8000fa0:	f8da 5018 	ldr.w	r5, [sl, #24]
  while (!chThdShouldTerminateX()) {
 8000fa4:	7f6b      	ldrb	r3, [r5, #29]
 8000fa6:	075b      	lsls	r3, r3, #29
 8000fa8:	d5c7      	bpl.n	8000f3a <BluetoothThd+0x5a>

  }

}
 8000faa:	b009      	add	sp, #36	; 0x24
 8000fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fb0:	2d00      	cmp	r5, #0
 8000fb2:	f040 808c 	bne.w	80010ce <BluetoothThd+0x1ee>
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f040 8085 	bne.w	80010c6 <BluetoothThd+0x1e6>
  i = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	4a49      	ldr	r2, [pc, #292]	; (80010e4 <BluetoothThd+0x204>)
 8000fc0:	7013      	strb	r3, [r2, #0]
 8000fc2:	f389 8811 	msr	BASEPRI, r9
            FLUSH_I_QUEUE(&SD2);
 8000fc6:	f7ff fbc3 	bl	8000750 <chIQResetI.constprop.12>
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f383 8811 	msr	BASEPRI, r3
 8000fd0:	6822      	ldr	r2, [r4, #0]
 8000fd2:	e7d6      	b.n	8000f82 <BluetoothThd+0xa2>
        switch(current_flag) {
 8000fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fd8:	d0f3      	beq.n	8000fc2 <BluetoothThd+0xe2>
 8000fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fde:	d0f0      	beq.n	8000fc2 <BluetoothThd+0xe2>
 8000fe0:	2b80      	cmp	r3, #128	; 0x80
 8000fe2:	d1ce      	bne.n	8000f82 <BluetoothThd+0xa2>
 8000fe4:	e7ed      	b.n	8000fc2 <BluetoothThd+0xe2>
 8000fe6:	f383 8811 	msr	BASEPRI, r3
            FLUSH_I_QUEUE(&SD2);
 8000fea:	f7ff fbb1 	bl	8000750 <chIQResetI.constprop.12>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f383 8811 	msr	BASEPRI, r3
 8000ff4:	6822      	ldr	r2, [r4, #0]
 8000ff6:	e7c4      	b.n	8000f82 <BluetoothThd+0xa2>
                chThdSleep(MS2ST(ACQTIME));                            //Acquire data packet, release CPU
 8000ff8:	200f      	movs	r0, #15
 8000ffa:	f7ff fef9 	bl	8000df0 <chThdSleep>
                if((!pending_flags)) {
 8000ffe:	6825      	ldr	r5, [r4, #0]
 8001000:	2d00      	cmp	r5, #0
 8001002:	d1de      	bne.n	8000fc2 <BluetoothThd+0xe2>
                    datalength = sdAsynchronousRead(&SD2, &sdrxbuf,
 8001004:	462b      	mov	r3, r5
 8001006:	2220      	movs	r2, #32
 8001008:	4659      	mov	r1, fp
 800100a:	9801      	ldr	r0, [sp, #4]
 800100c:	f7ff fe68 	bl	8000ce0 <chIQReadTimeout>
 8001010:	4a35      	ldr	r2, [pc, #212]	; (80010e8 <BluetoothThd+0x208>)
 8001012:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80010f8 <BluetoothThd+0x218>
 8001016:	4935      	ldr	r1, [pc, #212]	; (80010ec <BluetoothThd+0x20c>)
 8001018:	b2c0      	uxtb	r0, r0
 800101a:	7010      	strb	r0, [r2, #0]
  i = 0;
 800101c:	462b      	mov	r3, r5
 800101e:	462a      	mov	r2, r5
 8001020:	f9bc 7000 	ldrsh.w	r7, [ip]
 8001024:	f891 e000 	ldrb.w	lr, [r1]
 8001028:	e001      	b.n	800102e <BluetoothThd+0x14e>
        i++;
 800102a:	3201      	adds	r2, #1
 800102c:	b2d2      	uxtb	r2, r2
  while(i < datalength) {                                                   //Scan for frame head
 800102e:	4290      	cmp	r0, r2
 8001030:	d9be      	bls.n	8000fb0 <BluetoothThd+0xd0>
    if ((sdrxbuf[i] == FRAMEHEAD) &&                                  //Verify first byte value
 8001032:	f81b 1002 	ldrb.w	r1, [fp, r2]
 8001036:	2940      	cmp	r1, #64	; 0x40
 8001038:	d1f7      	bne.n	800102a <BluetoothThd+0x14a>
        (sdrxbuf[i + 2] == FRAMEINDEXER)) {
 800103a:	eb0b 0102 	add.w	r1, fp, r2
    if ((sdrxbuf[i] == FRAMEHEAD) &&                                  //Verify first byte value
 800103e:	7889      	ldrb	r1, [r1, #2]
 8001040:	293a      	cmp	r1, #58	; 0x3a
 8001042:	d1f2      	bne.n	800102a <BluetoothThd+0x14a>
      i++;
 8001044:	1c53      	adds	r3, r2, #1
      i++;
 8001046:	3203      	adds	r2, #3
      motornum = sdrxbuf[i] - 48;
 8001048:	b2db      	uxtb	r3, r3
      i++;
 800104a:	b2d2      	uxtb	r2, r2
      motornum = sdrxbuf[i] - 48;
 800104c:	f81b 5003 	ldrb.w	r5, [fp, r3]
      while((sdrxbuf[i] != FRAMEEND) && (i < datalength)) {
 8001050:	f81b 8002 	ldrb.w	r8, [fp, r2]
      motornum = sdrxbuf[i] - 48;
 8001054:	3d30      	subs	r5, #48	; 0x30
      while((sdrxbuf[i] != FRAMEEND) && (i < datalength)) {
 8001056:	f1b8 0f26 	cmp.w	r8, #38	; 0x26
      motornum = sdrxbuf[i] - 48;
 800105a:	b2ed      	uxtb	r5, r5
      while((sdrxbuf[i] != FRAMEEND) && (i < datalength)) {
 800105c:	d02f      	beq.n	80010be <BluetoothThd+0x1de>
 800105e:	4290      	cmp	r0, r2
 8001060:	d92d      	bls.n	80010be <BluetoothThd+0x1de>
 8001062:	f04f 0e00 	mov.w	lr, #0
 8001066:	4677      	mov	r7, lr
 8001068:	e001      	b.n	800106e <BluetoothThd+0x18e>
 800106a:	4290      	cmp	r0, r2
 800106c:	d912      	bls.n	8001094 <BluetoothThd+0x1b4>
        i++;
 800106e:	3201      	adds	r2, #1
 8001070:	b2d2      	uxtb	r2, r2
        if (sdrxbuf[i] == NEGATIVECHAR) {
 8001072:	f1b8 0f2d 	cmp.w	r8, #45	; 0x2d
          power = power * 10 + (sdrxbuf[i] - 48);
 8001076:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 800107a:	f1a8 0130 	sub.w	r1, r8, #48	; 0x30
      while((sdrxbuf[i] != FRAMEEND) && (i < datalength)) {
 800107e:	f81b 8002 	ldrb.w	r8, [fp, r2]
          power = power * 10 + (sdrxbuf[i] - 48);
 8001082:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8001086:	bf14      	ite	ne
 8001088:	b21f      	sxthne	r7, r3
          negative = true;
 800108a:	f04f 0e01 	moveq.w	lr, #1
      while((sdrxbuf[i] != FRAMEEND) && (i < datalength)) {
 800108e:	f1b8 0f26 	cmp.w	r8, #38	; 0x26
 8001092:	d1ea      	bne.n	800106a <BluetoothThd+0x18a>
      power = negative ? -power : power;
 8001094:	f1be 0f00 	cmp.w	lr, #0
 8001098:	d012      	beq.n	80010c0 <BluetoothThd+0x1e0>
 800109a:	427f      	negs	r7, r7
 800109c:	b23f      	sxth	r7, r7
      motorPwrCommand[motornum] = power;
 800109e:	2301      	movs	r3, #1
 80010a0:	4913      	ldr	r1, [pc, #76]	; (80010f0 <BluetoothThd+0x210>)
 80010a2:	f821 7015 	strh.w	r7, [r1, r5, lsl #1]
 80010a6:	461d      	mov	r5, r3
 80010a8:	e7c1      	b.n	800102e <BluetoothThd+0x14e>
    ctp->p_u.ewmask = events;
 80010aa:	2301      	movs	r3, #1
    chSchGoSleepS(CH_STATE_WTOREVT);
 80010ac:	200a      	movs	r0, #10
    ctp->p_u.ewmask = events;
 80010ae:	622b      	str	r3, [r5, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 80010b0:	f7ff fca6 	bl	8000a00 <chSchGoSleepS>
    m = ctp->p_epending & events;
 80010b4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80010b6:	f003 0201 	and.w	r2, r3, #1
 80010ba:	43d2      	mvns	r2, r2
 80010bc:	e745      	b.n	8000f4a <BluetoothThd+0x6a>
      while((sdrxbuf[i] != FRAMEEND) && (i < datalength)) {
 80010be:	2700      	movs	r7, #0
 80010c0:	f04f 0e00 	mov.w	lr, #0
 80010c4:	e7eb      	b.n	800109e <BluetoothThd+0x1be>
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <BluetoothThd+0x20c>)
 80010c8:	f883 e000 	strb.w	lr, [r3]
 80010cc:	e776      	b.n	8000fbc <BluetoothThd+0xdc>
 80010ce:	f8ac 7000 	strh.w	r7, [ip]
 80010d2:	e770      	b.n	8000fb6 <BluetoothThd+0xd6>
 80010d4:	20000d5c 	.word	0x20000d5c
 80010d8:	20000b00 	.word	0x20000b00
 80010dc:	20000d50 	.word	0x20000d50
 80010e0:	20000d14 	.word	0x20000d14
 80010e4:	20000d16 	.word	0x20000d16
 80010e8:	20000ce8 	.word	0x20000ce8
 80010ec:	20000d4a 	.word	0x20000d4a
 80010f0:	20000d40 	.word	0x20000d40
 80010f4:	20000b98 	.word	0x20000b98
 80010f8:	20000d58 	.word	0x20000d58
 80010fc:	00000000 	.word	0x00000000

08001100 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8001100:	2300      	movs	r3, #0
 8001102:	f04f 31ff 	mov.w	r1, #4294967295
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001106:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
 800110a:	f04f 3488 	mov.w	r4, #2290649224	; 0x88888888
 800110e:	4ec2      	ldr	r6, [pc, #776]	; (8001418 <main+0x318>)
  }
}

PWMpin_t* pins;

int main(void) {
 8001110:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  pwmp->state    = PWM_STOP;
 8001114:	2201      	movs	r2, #1
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8001116:	f04f 0904 	mov.w	r9, #4
  oqp->q_counter = size;
 800111a:	f04f 0b20 	mov.w	fp, #32
 800111e:	6937      	ldr	r7, [r6, #16]
  sdp->vmt = &vmt;
 8001120:	4dbe      	ldr	r5, [pc, #760]	; (800141c <main+0x31c>)
 8001122:	6131      	str	r1, [r6, #16]
 8001124:	6133      	str	r3, [r6, #16]
  rccResetAPB2(0xFFFFFFFF);
 8001126:	68f7      	ldr	r7, [r6, #12]
 8001128:	60f1      	str	r1, [r6, #12]
 800112a:	60f3      	str	r3, [r6, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 800112c:	69f7      	ldr	r7, [r6, #28]
 800112e:	46ae      	mov	lr, r5
 8001130:	ea47 070c 	orr.w	r7, r7, ip
 8001134:	61f7      	str	r7, [r6, #28]
  rccEnableBKPInterface(FALSE);
 8001136:	69f7      	ldr	r7, [r6, #28]
  PWR->CR |= PWR_CR_DBP;
 8001138:	f8df 832c 	ldr.w	r8, [pc, #812]	; 8001468 <main+0x368>
  rccEnableBKPInterface(FALSE);
 800113c:	f047 6700 	orr.w	r7, r7, #134217728	; 0x8000000
 8001140:	61f7      	str	r7, [r6, #28]
  PWR->CR |= PWR_CR_DBP;
 8001142:	f8d8 7000 	ldr.w	r7, [r8]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001146:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800114a:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 800114e:	f8c8 7000 	str.w	r7, [r8]
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8001152:	f8d6 8018 	ldr.w	r8, [r6, #24]
  GPIOA->ODR = config->PAData.odr;
 8001156:	4fb2      	ldr	r7, [pc, #712]	; (8001420 <main+0x320>)
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8001158:	f048 087d 	orr.w	r8, r8, #125	; 0x7d
 800115c:	f8c6 8018 	str.w	r8, [r6, #24]
  GPIOA->ODR = config->PAData.odr;
 8001160:	f8df 8308 	ldr.w	r8, [pc, #776]	; 800146c <main+0x36c>
 8001164:	b08b      	sub	sp, #44	; 0x2c
 8001166:	f8c7 800c 	str.w	r8, [r7, #12]
  GPIOA->CRH = config->PAData.crh;
 800116a:	f8df 8304 	ldr.w	r8, [pc, #772]	; 8001470 <main+0x370>
  tp->p_prio = prio;
 800116e:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8001172:	f8c7 8004 	str.w	r8, [r7, #4]
  GPIOA->CRL = config->PAData.crl;
 8001176:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 8001474 <main+0x374>
 800117a:	f8c7 8000 	str.w	r8, [r7]
  GPIOB->ODR = config->PBData.odr;
 800117e:	f8c7 140c 	str.w	r1, [r7, #1036]	; 0x40c
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 8001182:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 8001478 <main+0x378>
  GPIOB->CRH = config->PBData.crh;
 8001186:	f8c7 4404 	str.w	r4, [r7, #1028]	; 0x404
  GPIOB->CRL = config->PBData.crl;
 800118a:	f8c7 4400 	str.w	r4, [r7, #1024]	; 0x400
  GPIOC->CRH = config->PCData.crh;
 800118e:	4fa5      	ldr	r7, [pc, #660]	; (8001424 <main+0x324>)
  GPIOC->ODR = config->PCData.odr;
 8001190:	f8c8 100c 	str.w	r1, [r8, #12]
  GPIOC->CRH = config->PCData.crh;
 8001194:	f8c8 7004 	str.w	r7, [r8, #4]
  GPIOC->CRL = config->PCData.crl;
 8001198:	f8c8 4000 	str.w	r4, [r8]
  GPIOD->ODR = config->PDData.odr;
 800119c:	4fa2      	ldr	r7, [pc, #648]	; (8001428 <main+0x328>)
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 800119e:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800147c <main+0x37c>
  GPIOD->ODR = config->PDData.odr;
 80011a2:	60f9      	str	r1, [r7, #12]
  GPIOD->CRH = config->PDData.crh;
 80011a4:	607c      	str	r4, [r7, #4]
  GPIOD->CRL = config->PDData.crl;
 80011a6:	f8c7 8000 	str.w	r8, [r7]
 80011aa:	4fa0      	ldr	r7, [pc, #640]	; (800142c <main+0x32c>)
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 80011ac:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 8001480 <main+0x380>
 80011b0:	f8c8 100c 	str.w	r1, [r8, #12]
  pwmp->config   = NULL;
 80011b4:	607b      	str	r3, [r7, #4]
  GPIOE->CRH = config->PEData.crh;
 80011b6:	f8c8 4004 	str.w	r4, [r8, #4]
  pwmp->enabled  = 0;
 80011ba:	60fb      	str	r3, [r7, #12]
  GPIOE->CRL = config->PEData.crl;
 80011bc:	f8c8 4000 	str.w	r4, [r8]
  pwmp->state    = PWM_STOP;
 80011c0:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 8001484 <main+0x384>
 80011c4:	703a      	strb	r2, [r7, #0]
  iqp->q_counter = 0;
 80011c6:	616b      	str	r3, [r5, #20]
 80011c8:	f887 9010 	strb.w	r9, [r7, #16]
 80011cc:	f888 2000 	strb.w	r2, [r8]
  oqp->q_counter = size;
 80011d0:	f8c5 b038 	str.w	fp, [r5, #56]	; 0x38
  ST_ENABLE_CLOCK();
 80011d4:	69f4      	ldr	r4, [r6, #28]
  PWMD3.channels = STM32_TIM3_CHANNELS;
 80011d6:	f888 9010 	strb.w	r9, [r8, #16]
 80011da:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8001488 <main+0x388>
 80011de:	4314      	orrs	r4, r2
 80011e0:	f84e 9b04 	str.w	r9, [lr], #4
  sdp->state = SD_STOP;
 80011e4:	722a      	strb	r2, [r5, #8]
  pwmp->enabled  = 0;
 80011e6:	f8c8 300c 	str.w	r3, [r8, #12]
  iqp->q_notify  = infy;
 80011ea:	62ab      	str	r3, [r5, #40]	; 0x28
  pwmp->config   = NULL;
 80011ec:	f8c8 3004 	str.w	r3, [r8, #4]
  iqp->q_link    = link;
 80011f0:	62ed      	str	r5, [r5, #44]	; 0x2c
  oqp->q_link    = link;
 80011f2:	652d      	str	r5, [r5, #80]	; 0x50
 80011f4:	61f4      	str	r4, [r6, #28]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 80011f6:	f8c5 e004 	str.w	lr, [r5, #4]
  PWMD1.tim = STM32_TIM1;
 80011fa:	f8df e290 	ldr.w	lr, [pc, #656]	; 800148c <main+0x38c>
  ST_ENABLE_STOP();
 80011fe:	4c8c      	ldr	r4, [pc, #560]	; (8001430 <main+0x330>)
 8001200:	f8c7 e018 	str.w	lr, [r7, #24]
  PWMD3.tim = STM32_TIM3;
 8001204:	f5ae 3e94 	sub.w	lr, lr, #75776	; 0x12800
 8001208:	f8c8 e018 	str.w	lr, [r8, #24]
  oqp->q_top     = bp + size;
 800120c:	f105 0e94 	add.w	lr, r5, #148	; 0x94
 8001210:	f8c5 e040 	str.w	lr, [r5, #64]	; 0x40
  oqp->q_notify  = onfy;
 8001214:	f8df e278 	ldr.w	lr, [pc, #632]	; 8001490 <main+0x390>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001218:	f8df 9278 	ldr.w	r9, [pc, #632]	; 8001494 <main+0x394>
 800121c:	f8c5 e04c 	str.w	lr, [r5, #76]	; 0x4c
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8001220:	f8df e274 	ldr.w	lr, [pc, #628]	; 8001498 <main+0x398>
 8001224:	f8c5 e094 	str.w	lr, [r5, #148]	; 0x94
 8001228:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800122c:	f44e 6e00 	orr.w	lr, lr, #2048	; 0x800
 8001230:	f8c4 e004 	str.w	lr, [r4, #4]
  tqp->p_next = (thread_t *)tqp;
 8001234:	f105 040c 	add.w	r4, r5, #12
 8001238:	60ec      	str	r4, [r5, #12]
  tqp->p_prev = (thread_t *)tqp;
 800123a:	612c      	str	r4, [r5, #16]
  iqp->q_buffer  = bp;
 800123c:	f105 0454 	add.w	r4, r5, #84	; 0x54
 8001240:	61ac      	str	r4, [r5, #24]
  iqp->q_rdptr   = bp;
 8001242:	626c      	str	r4, [r5, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8001244:	622c      	str	r4, [r5, #32]
  iqp->q_top     = bp + size;
 8001246:	f105 0474 	add.w	r4, r5, #116	; 0x74
 800124a:	61ec      	str	r4, [r5, #28]
  oqp->q_buffer  = bp;
 800124c:	63ec      	str	r4, [r5, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 800124e:	64ac      	str	r4, [r5, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8001250:	646c      	str	r4, [r5, #68]	; 0x44
  tqp->p_next = (thread_t *)tqp;
 8001252:	f105 0430 	add.w	r4, r5, #48	; 0x30
 8001256:	632c      	str	r4, [r5, #48]	; 0x30
  tqp->p_prev = (thread_t *)tqp;
 8001258:	636c      	str	r4, [r5, #52]	; 0x34
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800125a:	f64b 347f 	movw	r4, #47999	; 0xbb7f
 800125e:	6284      	str	r4, [r0, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001260:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001264:	62c4      	str	r4, [r0, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8001266:	6183      	str	r3, [r0, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8001268:	6343      	str	r3, [r0, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 800126a:	60c3      	str	r3, [r0, #12]
  STM32_ST_TIM->CR2    = 0;
 800126c:	6043      	str	r3, [r0, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800126e:	6142      	str	r2, [r0, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8001270:	6002      	str	r2, [r0, #0]
 8001272:	9203      	str	r2, [sp, #12]
 8001274:	f06f 027f 	mvn.w	r2, #127	; 0x7f
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8001278:	f64f 0eff 	movw	lr, #63743	; 0xf8ff
 800127c:	f889 231c 	strb.w	r2, [r9, #796]	; 0x31c
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	f04f 0210 	mov.w	r2, #16
  SCB->VTOR = CORTEX_VTOR_INIT;
 8001284:	486b      	ldr	r0, [pc, #428]	; (8001434 <main+0x334>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001286:	f8c9 c180 	str.w	ip, [r9, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800128a:	f8c9 c000 	str.w	ip, [r9]
 800128e:	6083      	str	r3, [r0, #8]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001290:	68c4      	ldr	r4, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001292:	f8df c208 	ldr.w	ip, [pc, #520]	; 800149c <main+0x39c>
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8001296:	ea04 0e0e 	and.w	lr, r4, lr
  reg_value  =  (reg_value                                   |
 800129a:	4c67      	ldr	r4, [pc, #412]	; (8001438 <main+0x338>)
 800129c:	ea4e 0404 	orr.w	r4, lr, r4
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80012a0:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 80014a0 <main+0x3a0>
  SCB->AIRCR =  reg_value;
 80012a4:	60c4      	str	r4, [r0, #12]
 80012a6:	f8de 400c 	ldr.w	r4, [lr, #12]
 80012aa:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 80012ae:	f8ce 400c 	str.w	r4, [lr, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80012b2:	f8dc e000 	ldr.w	lr, [ip]
  tqp->p_next = (thread_t *)tqp;
 80012b6:	4c61      	ldr	r4, [pc, #388]	; (800143c <main+0x33c>)
 80012b8:	f04e 0e01 	orr.w	lr, lr, #1
 80012bc:	f8cc e000 	str.w	lr, [ip]
  ch.vtlist.vt_delta = (systime_t)-1;
 80012c0:	84a1      	strh	r1, [r4, #36]	; 0x24
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c2:	77c2      	strb	r2, [r0, #31]
  tqp->p_prev = (thread_t *)tqp;
 80012c4:	6064      	str	r4, [r4, #4]
 80012c6:	f880 b022 	strb.w	fp, [r0, #34]	; 0x22
  tmp->best       = (rtcnt_t)-1;
 80012ca:	9104      	str	r1, [sp, #16]
  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 80012cc:	f104 011c 	add.w	r1, r4, #28
  tmp->cumulative = (rttime_t)0;
 80012d0:	2200      	movs	r2, #0
  tmp->worst      = (rtcnt_t)0;
 80012d2:	9305      	str	r3, [sp, #20]
  tmp->last       = (rtcnt_t)0;
 80012d4:	9306      	str	r3, [sp, #24]
  ch.rlist.r_prio = NOPRIO;
 80012d6:	60a3      	str	r3, [r4, #8]
  ch.vtlist.vt_lasttime = (systime_t)0;
 80012d8:	84e3      	strh	r3, [r4, #38]	; 0x26
  ch.tm.offset = (rtcnt_t)0;
 80012da:	6723      	str	r3, [r4, #112]	; 0x70
  tqp->p_next = (thread_t *)tqp;
 80012dc:	6024      	str	r4, [r4, #0]
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 80012de:	6124      	str	r4, [r4, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 80012e0:	6164      	str	r4, [r4, #20]
  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 80012e2:	61e1      	str	r1, [r4, #28]
  tmp->n          = (ucnt_t)0;
 80012e4:	9307      	str	r3, [sp, #28]
 80012e6:	9302      	str	r3, [sp, #8]
  tmp->cumulative = (rttime_t)0;
 80012e8:	2300      	movs	r3, #0
  chTMStartMeasurementX(&tm);
 80012ea:	a804      	add	r0, sp, #16
  tmp->cumulative = (rttime_t)0;
 80012ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 80012f0:	6221      	str	r1, [r4, #32]
  chTMStartMeasurementX(&tm);
 80012f2:	f7fe ffb5 	bl	8000260 <chTMStartMeasurementX.constprop.20>
  chTMStopMeasurementX(&tm);
 80012f6:	a804      	add	r0, sp, #16
 80012f8:	f7ff f97a 	bl	80005f0 <chTMStopMeasurementX>
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80012fc:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80014a4 <main+0x3a4>
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001300:	484f      	ldr	r0, [pc, #316]	; (8001440 <main+0x340>)
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8001302:	4950      	ldr	r1, [pc, #320]	; (8001444 <main+0x344>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001304:	f02e 0307 	bic.w	r3, lr, #7
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001308:	f020 0007 	bic.w	r0, r0, #7
  REG_INSERT(tp);
 800130c:	f8d4 c014 	ldr.w	ip, [r4, #20]
 8001310:	9000      	str	r0, [sp, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001312:	9301      	str	r3, [sp, #4]
  tp->p_refs = (trefs_t)1;
 8001314:	9a03      	ldr	r2, [sp, #12]
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001316:	9b02      	ldr	r3, [sp, #8]
  ch.tm.offset = tm.last;
 8001318:	9806      	ldr	r0, [sp, #24]
 800131a:	f101 0e10 	add.w	lr, r1, #16
 800131e:	f8c1 e010 	str.w	lr, [r1, #16]
  tqp->p_prev = (thread_t *)tqp;
 8001322:	f8c1 e014 	str.w	lr, [r1, #20]
  REG_INSERT(tp);
 8001326:	f104 0e2c 	add.w	lr, r4, #44	; 0x2c
 800132a:	6720      	str	r0, [r4, #112]	; 0x70
 800132c:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8001330:	618b      	str	r3, [r1, #24]
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001332:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
  tp->p_mtxlist = NULL;
 8001336:	6663      	str	r3, [r4, #100]	; 0x64
  tp->p_epending = (eventmask_t)0;
 8001338:	6623      	str	r3, [r4, #96]	; 0x60
  tp->p_refs = (trefs_t)1;
 800133a:	f884 204a 	strb.w	r2, [r4, #74]	; 0x4a
  tp->p_name = NULL;
 800133e:	6463      	str	r3, [r4, #68]	; 0x44
  REG_INSERT(tp);
 8001340:	63e4      	str	r4, [r4, #60]	; 0x3c
  tp->p_prio = prio;
 8001342:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
  tp->p_realprio = prio;
 8001346:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
  REG_INSERT(tp);
 800134a:	f8cc e010 	str.w	lr, [ip, #16]
 800134e:	f8c4 e014 	str.w	lr, [r4, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8001352:	f8c4 e018 	str.w	lr, [r4, #24]
 8001356:	f8df c150 	ldr.w	ip, [pc, #336]	; 80014a8 <main+0x3a8>
  tlp->p_next = (thread_t *)tlp;
 800135a:	f104 0e50 	add.w	lr, r4, #80	; 0x50
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800135e:	9800      	ldr	r0, [sp, #0]
 8001360:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
 8001364:	f8df e144 	ldr.w	lr, [pc, #324]	; 80014ac <main+0x3ac>
  default_heap.h_free.h.u.next = NULL;
 8001368:	608b      	str	r3, [r1, #8]
  default_heap.h_free.h.size = 0;
 800136a:	60cb      	str	r3, [r1, #12]
  default_heap.h_provider = chCoreAlloc;
 800136c:	f8c1 c000 	str.w	ip, [r1]
  tqp->p_next = (thread_t *)tqp;
 8001370:	f104 0154 	add.w	r1, r4, #84	; 0x54
 8001374:	6561      	str	r1, [r4, #84]	; 0x54
  tqp->p_prev = (thread_t *)tqp;
 8001376:	65a1      	str	r1, [r4, #88]	; 0x58
 8001378:	f8ce 0000 	str.w	r0, [lr]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800137c:	4932      	ldr	r1, [pc, #200]	; (8001448 <main+0x348>)
 800137e:	9801      	ldr	r0, [sp, #4]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8001380:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 8001384:	6008      	str	r0, [r1, #0]
 8001386:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 800138a:	b662      	cpsie	i
 800138c:	492f      	ldr	r1, [pc, #188]	; (800144c <main+0x34c>)
 800138e:	69a3      	ldr	r3, [r4, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 8001390:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8001394:	6199      	str	r1, [r3, #24]
 8001396:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <main+0x350>)
 8001398:	21d8      	movs	r1, #216	; 0xd8
 800139a:	f7ff fad9 	bl	8000950 <chThdCreateStatic.constprop.23>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 800139e:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <main+0x354>)
 80013a0:	6183      	str	r3, [r0, #24]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80013a2:	f38b 8811 	msr	BASEPRI, fp
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 80013a6:	7a2b      	ldrb	r3, [r5, #8]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d10a      	bne.n	80013c2 <main+0x2c2>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80013ac:	22c0      	movs	r2, #192	; 0xc0
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(FALSE);
 80013ae:	69f3      	ldr	r3, [r6, #28]
 80013b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b4:	61f3      	str	r3, [r6, #28]
 80013b6:	f889 2326 	strb.w	r2, [r9, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80013ba:	f8c9 a184 	str.w	sl, [r9, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80013be:	f8c9 a004 	str.w	sl, [r9, #4]
    u->BRR = STM32_PCLK2 / config->speed;
 80013c2:	f640 12c4 	movw	r2, #2500	; 0x9c4
  USART_TypeDef *u = sdp->usart;
 80013c6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80013ca:	f244 0140 	movw	r1, #16448	; 0x4040
    u->BRR = STM32_PCLK2 / config->speed;
 80013ce:	609a      	str	r2, [r3, #8]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80013d0:	f04f 0a01 	mov.w	sl, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80013d4:	f242 122c 	movw	r2, #8492	; 0x212c
  u->SR = 0;
 80013d8:	2600      	movs	r6, #0
  sdp->state = SD_READY;
 80013da:	f04f 0902 	mov.w	r9, #2
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80013de:	6119      	str	r1, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80013e0:	f8c3 a014 	str.w	sl, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80013e4:	60da      	str	r2, [r3, #12]
  u->SR = 0;
 80013e6:	601e      	str	r6, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 80013e8:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f885 9008 	strb.w	r9, [r5, #8]
 80013f0:	f386 8811 	msr	BASEPRI, r6

void bluetoothInit(void) {

  sdStart(&SD2, &SerialCfg);

  memset((void*) motorPwrCommand, 0, sizeof(motorPwrCommand));
 80013f4:	4c18      	ldr	r4, [pc, #96]	; (8001458 <main+0x358>)

  chThdCreateStatic(BluetoothThd_wa, sizeof(BluetoothThd_wa),
 80013f6:	4b19      	ldr	r3, [pc, #100]	; (800145c <main+0x35c>)
 80013f8:	2245      	movs	r2, #69	; 0x45
 80013fa:	f44f 71a4 	mov.w	r1, #328	; 0x148
  memset((void*) motorPwrCommand, 0, sizeof(motorPwrCommand));
 80013fe:	6026      	str	r6, [r4, #0]
 8001400:	6066      	str	r6, [r4, #4]
 8001402:	8126      	strh	r6, [r4, #8]
  chThdCreateStatic(BluetoothThd_wa, sizeof(BluetoothThd_wa),
 8001404:	4816      	ldr	r0, [pc, #88]	; (8001460 <main+0x360>)
 8001406:	f7ff faa3 	bl	8000950 <chThdCreateStatic.constprop.23>
 800140a:	2520      	movs	r5, #32
 800140c:	f385 8811 	msr	BASEPRI, r5
  pwmp->config = config;
 8001410:	4c14      	ldr	r4, [pc, #80]	; (8001464 <main+0x364>)
  pwm_lld_start(pwmp);
 8001412:	4806      	ldr	r0, [pc, #24]	; (800142c <main+0x32c>)
  pwmp->period = config->period;
 8001414:	6863      	ldr	r3, [r4, #4]
 8001416:	e04b      	b.n	80014b0 <main+0x3b0>
 8001418:	40021000 	.word	0x40021000
 800141c:	20000b00 	.word	0x20000b00
 8001420:	40010800 	.word	0x40010800
 8001424:	88388888 	.word	0x88388888
 8001428:	40011400 	.word	0x40011400
 800142c:	20000ac8 	.word	0x20000ac8
 8001430:	e0042000 	.word	0xe0042000
 8001434:	e000ed00 	.word	0xe000ed00
 8001438:	05fa0300 	.word	0x05fa0300
 800143c:	20000b98 	.word	0x20000b98
 8001440:	20000ecf 	.word	0x20000ecf
 8001444:	20000cf0 	.word	0x20000cf0
 8001448:	20000d10 	.word	0x20000d10
 800144c:	080017c0 	.word	0x080017c0
 8001450:	08000271 	.word	0x08000271
 8001454:	080017e0 	.word	0x080017e0
 8001458:	20000d40 	.word	0x20000d40
 800145c:	08000ee1 	.word	0x08000ee1
 8001460:	20000838 	.word	0x20000838
 8001464:	20000800 	.word	0x20000800
 8001468:	40007000 	.word	0x40007000
 800146c:	ffffbfdf 	.word	0xffffbfdf
 8001470:	8888bbbb 	.word	0x8888bbbb
 8001474:	bb384b88 	.word	0xbb384b88
 8001478:	40011000 	.word	0x40011000
 800147c:	88888844 	.word	0x88888844
 8001480:	40011800 	.word	0x40011800
 8001484:	20000ae4 	.word	0x20000ae4
 8001488:	08001870 	.word	0x08001870
 800148c:	40012c00 	.word	0x40012c00
 8001490:	080002c1 	.word	0x080002c1
 8001494:	e000e100 	.word	0xe000e100
 8001498:	40004400 	.word	0x40004400
 800149c:	e0001000 	.word	0xe0001000
 80014a0:	e000edf0 	.word	0xe000edf0
 80014a4:	20005000 	.word	0x20005000
 80014a8:	08000281 	.word	0x08000281
 80014ac:	20000d4c 	.word	0x20000d4c
  pwmp->config = config;
 80014b0:	607c      	str	r4, [r7, #4]
  pwmp->period = config->period;
 80014b2:	60bb      	str	r3, [r7, #8]
  pwm_lld_start(pwmp);
 80014b4:	f7fe ff3c 	bl	8000330 <pwm_lld_start>
  pwmp->enabled = 0;
 80014b8:	60fe      	str	r6, [r7, #12]
  pwmp->state = PWM_READY;
 80014ba:	f887 9000 	strb.w	r9, [r7]
 80014be:	f386 8811 	msr	BASEPRI, r6
 80014c2:	f385 8811 	msr	BASEPRI, r5
  pwmp->period = config->period;
 80014c6:	6863      	ldr	r3, [r4, #4]
  pwm_lld_start(pwmp);
 80014c8:	4823      	ldr	r0, [pc, #140]	; (8001558 <main+0x458>)
  pwmp->config = config;
 80014ca:	f8c8 4004 	str.w	r4, [r8, #4]
  pwmp->period = config->period;
 80014ce:	f8c8 3008 	str.w	r3, [r8, #8]
  pwm_lld_start(pwmp);
 80014d2:	f7fe ff2d 	bl	8000330 <pwm_lld_start>
  pwmp->enabled = 0;
 80014d6:	f8c8 600c 	str.w	r6, [r8, #12]
  pwmp->state = PWM_READY;
 80014da:	f888 9000 	strb.w	r9, [r8]
 80014de:	f386 8811 	msr	BASEPRI, r6
void motorpwmInit(void) {

  pwmStart(&PWMD1, &pwmcfg);
  pwmStart(&PWMD3, &pwmcfg);

  memset((void*) motorPins, 0, sizeof(PWMpin_t) * MOTORNUM);
 80014e2:	4631      	mov	r1, r6
  pin->channel = PWMchannel;
 80014e4:	2603      	movs	r6, #3
  memset((void*) motorPins, 0, sizeof(PWMpin_t) * MOTORNUM);
 80014e6:	4c1d      	ldr	r4, [pc, #116]	; (800155c <main+0x45c>)
 80014e8:	2228      	movs	r2, #40	; 0x28
 80014ea:	4620      	mov	r0, r4
 80014ec:	f000 f910 	bl	8001710 <memset>

  bluetoothInit();

  motorpwmInit();

  pins = getPins();
 80014f0:	4d1b      	ldr	r5, [pc, #108]	; (8001560 <main+0x460>)
  pin->driver = PWMdriver;
 80014f2:	6027      	str	r7, [r4, #0]
 80014f4:	60a7      	str	r7, [r4, #8]
 80014f6:	6127      	str	r7, [r4, #16]
 80014f8:	61a7      	str	r7, [r4, #24]
  pin->channel = PWMchannel;
 80014fa:	7726      	strb	r6, [r4, #28]
  pinInit(&motorPins[1], &PWMD1, 1);
  pinInit(&motorPins[2], &PWMD1, 2);
  pinInit(&motorPins[3], &PWMD1, 3);
  pinInit(&motorPins[4], &PWMD3, 0);

  chThdCreateStatic(MotorThdwa, sizeof(MotorThdwa), NORMALPRIO + 10, MotorThd, NULL);
 80014fc:	4b19      	ldr	r3, [pc, #100]	; (8001564 <main+0x464>)
 80014fe:	224a      	movs	r2, #74	; 0x4a
 8001500:	f44f 71a4 	mov.w	r1, #328	; 0x148
  pin->channel = PWMchannel;
 8001504:	f884 a00c 	strb.w	sl, [r4, #12]
 8001508:	f884 9014 	strb.w	r9, [r4, #20]
  pin->driver = PWMdriver;
 800150c:	f8c4 8020 	str.w	r8, [r4, #32]
  chThdCreateStatic(MotorThdwa, sizeof(MotorThdwa), NORMALPRIO + 10, MotorThd, NULL);
 8001510:	4815      	ldr	r0, [pc, #84]	; (8001568 <main+0x468>)
 8001512:	f7ff fa1d 	bl	8000950 <chThdCreateStatic.constprop.23>
  static uint8_t i = 0;

  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <main+0x46c>)
 8001518:	2240      	movs	r2, #64	; 0x40
 800151a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800151e:	4814      	ldr	r0, [pc, #80]	; (8001570 <main+0x470>)
  pins = getPins();
 8001520:	602c      	str	r4, [r5, #0]
 8001522:	2705      	movs	r7, #5

  while (true) {

    for (i = 0; i < MOTORNUM; i++) {
      pins[i].dutycycle = pins[i].dutycycle >= 10000 ? 0 : pins[i].dutycycle + 200;
 8001524:	f242 740f 	movw	r4, #9999	; 0x270f
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 8001528:	f7ff fa12 	bl	8000950 <chThdCreateStatic.constprop.23>
 800152c:	4e11      	ldr	r6, [pc, #68]	; (8001574 <main+0x474>)
 800152e:	682a      	ldr	r2, [r5, #0]
 8001530:	f102 0128 	add.w	r1, r2, #40	; 0x28
      pins[i].dutycycle = pins[i].dutycycle >= 10000 ? 0 : pins[i].dutycycle + 200;
 8001534:	88d3      	ldrh	r3, [r2, #6]
 8001536:	3208      	adds	r2, #8
 8001538:	42a3      	cmp	r3, r4
 800153a:	f103 03c8 	add.w	r3, r3, #200	; 0xc8
 800153e:	bf8c      	ite	hi
 8001540:	2300      	movhi	r3, #0
 8001542:	b29b      	uxthls	r3, r3
 8001544:	f822 3c02 	strh.w	r3, [r2, #-2]
    for (i = 0; i < MOTORNUM; i++) {
 8001548:	4291      	cmp	r1, r2
 800154a:	d1f3      	bne.n	8001534 <main+0x434>
    }

    chThdSleepMilliseconds(20);
 800154c:	2014      	movs	r0, #20
 800154e:	7037      	strb	r7, [r6, #0]
 8001550:	f7ff fc4e 	bl	8000df0 <chThdSleep>
 8001554:	e7eb      	b.n	800152e <main+0x42e>
 8001556:	bf00      	nop
 8001558:	20000ae4 	.word	0x20000ae4
 800155c:	20000d18 	.word	0x20000d18
 8001560:	20000d54 	.word	0x20000d54
 8001564:	08000e11 	.word	0x08000e11
 8001568:	20000980 	.word	0x20000980
 800156c:	08000eb1 	.word	0x08000eb1
 8001570:	20000d80 	.word	0x20000d80
 8001574:	20000d15 	.word	0x20000d15
	...

08001580 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <__early_init+0x60>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001582:	4619      	mov	r1, r3
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	f042 0201 	orr.w	r2, r2, #1
 800158a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800158c:	680b      	ldr	r3, [r1, #0]
 800158e:	079a      	lsls	r2, r3, #30
 8001590:	d5fc      	bpl.n	800158c <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001592:	2000      	movs	r0, #0
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001594:	680b      	ldr	r3, [r1, #0]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001596:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <__early_init+0x60>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001598:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 800159c:	600b      	str	r3, [r1, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800159e:	6048      	str	r0, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80015a0:	6853      	ldr	r3, [r2, #4]
 80015a2:	f013 0f0c 	tst.w	r3, #12
 80015a6:	d1fb      	bne.n	80015a0 <__early_init+0x20>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 80015a8:	6853      	ldr	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80015aa:	490d      	ldr	r1, [pc, #52]	; (80015e0 <__early_init+0x60>)
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 80015ac:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 80015b0:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 80015b2:	6813      	ldr	r3, [r2, #0]
 80015b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015b8:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80015ba:	680b      	ldr	r3, [r1, #0]
 80015bc:	019b      	lsls	r3, r3, #6
 80015be:	d5fc      	bpl.n	80015ba <__early_init+0x3a>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80015c0:	2211      	movs	r2, #17
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <__early_init+0x64>)
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 80015c4:	4808      	ldr	r0, [pc, #32]	; (80015e8 <__early_init+0x68>)
 80015c6:	6048      	str	r0, [r1, #4]
  FLASH->ACR = STM32_FLASHBITS;
 80015c8:	601a      	str	r2, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 80015ca:	684b      	ldr	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80015cc:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <__early_init+0x60>)
  RCC->CFGR |= STM32_SW;
 80015ce:	f043 0302 	orr.w	r3, r3, #2
 80015d2:	604b      	str	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80015d4:	6853      	ldr	r3, [r2, #4]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d1fa      	bne.n	80015d4 <__early_init+0x54>
 * any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 80015de:	4770      	bx	lr
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40022000 	.word	0x40022000
 80015e8:	00686400 	.word	0x00686400
 80015ec:	00000000 	.word	0x00000000

080015f0 <chThdExit>:
void chThdExit(msg_t msg) {
 80015f0:	b538      	push	{r3, r4, r5, lr}
 80015f2:	2220      	movs	r2, #32
 80015f4:	4603      	mov	r3, r0
 80015f6:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
 80015fa:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <chThdExit+0x44>)
 80015fc:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->p_next != (thread_t *)tlp);
 80015fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->p_waiting)) {
 8001600:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8001604:	4285      	cmp	r5, r0
  tp->p_u.exitcode = msg;
 8001606:	6223      	str	r3, [r4, #32]
  while (list_notempty(&tp->p_waiting)) {
 8001608:	d006      	beq.n	8001618 <chThdExit+0x28>
  tlp->p_next = tp->p_next;
 800160a:	6803      	ldr	r3, [r0, #0]
 800160c:	6263      	str	r3, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 800160e:	f7ff f84f 	bl	80006b0 <chSchReadyI>
  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001612:	6a60      	ldr	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->p_waiting)) {
 8001614:	42a8      	cmp	r0, r5
 8001616:	d1f8      	bne.n	800160a <chThdExit+0x1a>
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8001618:	7f63      	ldrb	r3, [r4, #29]
 800161a:	079b      	lsls	r3, r3, #30
 800161c:	d104      	bne.n	8001628 <chThdExit+0x38>
    REG_REMOVE(tp);
 800161e:	6922      	ldr	r2, [r4, #16]
 8001620:	6963      	ldr	r3, [r4, #20]
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	6922      	ldr	r2, [r4, #16]
 8001626:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8001628:	200f      	movs	r0, #15
}
 800162a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 800162e:	f7ff b9e7 	b.w	8000a00 <chSchGoSleepS>
 8001632:	bf00      	nop
 8001634:	20000b98 	.word	0x20000b98
	...

08001640 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8001640:	b470      	push	{r4, r5, r6}
  currp->p_state = CH_STATE_CURRENT;
 8001642:	2601      	movs	r6, #1
  otp->p_state = CH_STATE_READY;
 8001644:	2500      	movs	r5, #0
  otp = currp;
 8001646:	4a0c      	ldr	r2, [pc, #48]	; (8001678 <chSchDoReschedule+0x38>)
  thread_t *tp = tqp->p_next;
 8001648:	6810      	ldr	r0, [r2, #0]
 800164a:	6994      	ldr	r4, [r2, #24]
  tqp->p_next = tp->p_next;
 800164c:	6803      	ldr	r3, [r0, #0]
  if (otp->p_prio == IDLEPRIO) {
 800164e:	68a1      	ldr	r1, [r4, #8]
 8001650:	6013      	str	r3, [r2, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001652:	605a      	str	r2, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
 8001654:	7706      	strb	r6, [r0, #28]
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001656:	6190      	str	r0, [r2, #24]
  otp->p_state = CH_STATE_READY;
 8001658:	7725      	strb	r5, [r4, #28]
 800165a:	e000      	b.n	800165e <chSchDoReschedule+0x1e>
 800165c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio > otp->p_prio);
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	4291      	cmp	r1, r2
 8001662:	d3fb      	bcc.n	800165c <chSchDoReschedule+0x1c>
  otp->p_prev = cp->p_prev;
 8001664:	685a      	ldr	r2, [r3, #4]
  chSysSwitch(currp, otp);
 8001666:	4621      	mov	r1, r4
  otp->p_next = cp;
 8001668:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
 800166a:	6062      	str	r2, [r4, #4]
  otp->p_prev->p_next = otp;
 800166c:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 800166e:	605c      	str	r4, [r3, #4]
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */
}
 8001670:	bc70      	pop	{r4, r5, r6}
  chSysSwitch(currp, otp);
 8001672:	f7fe bddd 	b.w	8000230 <_port_switch>
 8001676:	bf00      	nop
 8001678:	20000b98 	.word	0x20000b98
 800167c:	00000000 	.word	0x00000000

08001680 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001680:	b5f0      	push	{r4, r5, r6, r7, lr}
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001682:	2600      	movs	r6, #0
  const ram_init_area_t *rap = ram_areas;
 8001684:	4f11      	ldr	r7, [pc, #68]	; (80016cc <__init_ram_areas+0x4c>)
void __init_ram_areas(void) {
 8001686:	4d12      	ldr	r5, [pc, #72]	; (80016d0 <__init_ram_areas+0x50>)
 8001688:	4c12      	ldr	r4, [pc, #72]	; (80016d4 <__init_ram_areas+0x54>)
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <__init_ram_areas+0x58>)
 800168c:	4913      	ldr	r1, [pc, #76]	; (80016dc <__init_ram_areas+0x5c>)
 800168e:	f107 0e80 	add.w	lr, r7, #128	; 0x80
    while (p < rap->clear_area) {
 8001692:	429c      	cmp	r4, r3
 8001694:	d911      	bls.n	80016ba <__init_ram_areas+0x3a>
 8001696:	461a      	mov	r2, r3
 8001698:	3904      	subs	r1, #4
      *p = *tp;
 800169a:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800169e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 80016a2:	4294      	cmp	r4, r2
 80016a4:	d8f9      	bhi.n	800169a <__init_ram_areas+0x1a>
 80016a6:	43da      	mvns	r2, r3
 80016a8:	4414      	add	r4, r2
 80016aa:	f024 0403 	bic.w	r4, r4, #3
 80016ae:	3404      	adds	r4, #4
 80016b0:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 80016b2:	429d      	cmp	r5, r3
 80016b4:	d903      	bls.n	80016be <__init_ram_areas+0x3e>
      *p = 0;
 80016b6:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 80016ba:	429d      	cmp	r5, r3
 80016bc:	d8fb      	bhi.n	80016b6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
 80016be:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80016c0:	4577      	cmp	r7, lr
 80016c2:	d202      	bcs.n	80016ca <__init_ram_areas+0x4a>
 80016c4:	e897 003a 	ldmia.w	r7, {r1, r3, r4, r5}
 80016c8:	e7e3      	b.n	8001692 <__init_ram_areas+0x12>
 80016ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016cc:	080017f0 	.word	0x080017f0
 80016d0:	20000ec8 	.word	0x20000ec8
 80016d4:	20000ec8 	.word	0x20000ec8
 80016d8:	20000ec8 	.word	0x20000ec8
 80016dc:	080018c4 	.word	0x080018c4

080016e0 <__default_exit>:
void __default_exit(void) {
 80016e0:	e7fe      	b.n	80016e0 <__default_exit>
 80016e2:	bf00      	nop
	...

080016f0 <__late_init>:
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
	...

08001700 <__core_init>:
void __core_init(void) {
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
	...

08001710 <memset>:
 8001710:	b470      	push	{r4, r5, r6}
 8001712:	0786      	lsls	r6, r0, #30
 8001714:	d046      	beq.n	80017a4 <memset+0x94>
 8001716:	1e54      	subs	r4, r2, #1
 8001718:	2a00      	cmp	r2, #0
 800171a:	d041      	beq.n	80017a0 <memset+0x90>
 800171c:	b2ca      	uxtb	r2, r1
 800171e:	4603      	mov	r3, r0
 8001720:	e002      	b.n	8001728 <memset+0x18>
 8001722:	f114 34ff 	adds.w	r4, r4, #4294967295
 8001726:	d33b      	bcc.n	80017a0 <memset+0x90>
 8001728:	f803 2b01 	strb.w	r2, [r3], #1
 800172c:	079d      	lsls	r5, r3, #30
 800172e:	d1f8      	bne.n	8001722 <memset+0x12>
 8001730:	2c03      	cmp	r4, #3
 8001732:	d92e      	bls.n	8001792 <memset+0x82>
 8001734:	b2cd      	uxtb	r5, r1
 8001736:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800173a:	2c0f      	cmp	r4, #15
 800173c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8001740:	d919      	bls.n	8001776 <memset+0x66>
 8001742:	4626      	mov	r6, r4
 8001744:	f103 0210 	add.w	r2, r3, #16
 8001748:	3e10      	subs	r6, #16
 800174a:	2e0f      	cmp	r6, #15
 800174c:	f842 5c10 	str.w	r5, [r2, #-16]
 8001750:	f842 5c0c 	str.w	r5, [r2, #-12]
 8001754:	f842 5c08 	str.w	r5, [r2, #-8]
 8001758:	f842 5c04 	str.w	r5, [r2, #-4]
 800175c:	f102 0210 	add.w	r2, r2, #16
 8001760:	d8f2      	bhi.n	8001748 <memset+0x38>
 8001762:	f1a4 0210 	sub.w	r2, r4, #16
 8001766:	f022 020f 	bic.w	r2, r2, #15
 800176a:	f004 040f 	and.w	r4, r4, #15
 800176e:	3210      	adds	r2, #16
 8001770:	2c03      	cmp	r4, #3
 8001772:	4413      	add	r3, r2
 8001774:	d90d      	bls.n	8001792 <memset+0x82>
 8001776:	461e      	mov	r6, r3
 8001778:	4622      	mov	r2, r4
 800177a:	3a04      	subs	r2, #4
 800177c:	2a03      	cmp	r2, #3
 800177e:	f846 5b04 	str.w	r5, [r6], #4
 8001782:	d8fa      	bhi.n	800177a <memset+0x6a>
 8001784:	1f22      	subs	r2, r4, #4
 8001786:	f022 0203 	bic.w	r2, r2, #3
 800178a:	3204      	adds	r2, #4
 800178c:	4413      	add	r3, r2
 800178e:	f004 0403 	and.w	r4, r4, #3
 8001792:	b12c      	cbz	r4, 80017a0 <memset+0x90>
 8001794:	b2c9      	uxtb	r1, r1
 8001796:	441c      	add	r4, r3
 8001798:	f803 1b01 	strb.w	r1, [r3], #1
 800179c:	429c      	cmp	r4, r3
 800179e:	d1fb      	bne.n	8001798 <memset+0x88>
 80017a0:	bc70      	pop	{r4, r5, r6}
 80017a2:	4770      	bx	lr
 80017a4:	4614      	mov	r4, r2
 80017a6:	4603      	mov	r3, r0
 80017a8:	e7c2      	b.n	8001730 <memset+0x20>
 80017aa:	bf00      	nop
 80017ac:	0000      	movs	r0, r0
 80017ae:	0000      	movs	r0, r0
 80017b0:	6e696c62 	.word	0x6e696c62
 80017b4:	0072656b 	.word	0x0072656b
	...

080017c0 <ch_debug>:
 80017c0:	6e69616d 18801600 08440204 1814100c     main......D.....
 80017d0:	1e1d1c00 00000000 00000000 00000000     ................
 80017e0:	656c6469 00000000 00000000 00000000     idle............

080017f0 <ram_areas>:
 80017f0:	080018c4 20000ec8 20000ec8 20000ec8     ....... ... ... 
 8001800:	080018c4 00000000 00000000 00000000     ................
 8001810:	080018c4 00000000 00000000 00000000     ................
 8001820:	080018c4 00000000 00000000 00000000     ................
 8001830:	080018c4 00000000 00000000 00000000     ................
 8001840:	080018c4 00000000 00000000 00000000     ................
 8001850:	080018c4 00000000 00000000 00000000     ................
 8001860:	080018c4 00000000 00000000 00000000     ................

08001870 <vmt>:
 8001870:	08000c51 08000d71 08000cd1 08000de1     Q...q...........
 8001880:	08000cc1 08000dd1 08000c41 08000d61     ........A...a...
