
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

08000160 <Reset_Handler>:
 8000160:	b672      	cpsid	i
 8000162:	4823      	ldr	r0, [pc, #140]	; (80001f0 <endfiniloop+0x6>)
 8000164:	f380 8809 	msr	PSP, r0
 8000168:	2002      	movs	r0, #2
 800016a:	f380 8814 	msr	CONTROL, r0
 800016e:	f3bf 8f6f 	isb	sy
 8000172:	f001 febd 	bl	8001ef0 <__core_init>
 8000176:	f002 fb83 	bl	8002880 <__early_init>
 800017a:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 800017e:	491d      	ldr	r1, [pc, #116]	; (80001f4 <endfiniloop+0xa>)
 8000180:	4a1d      	ldr	r2, [pc, #116]	; (80001f8 <endfiniloop+0xe>)

08000182 <msloop>:
 8000182:	4291      	cmp	r1, r2
 8000184:	bf3c      	itt	cc
 8000186:	f841 0b04 	strcc.w	r0, [r1], #4
 800018a:	e7fa      	bcc.n	8000182 <msloop>
 800018c:	491b      	ldr	r1, [pc, #108]	; (80001fc <endfiniloop+0x12>)
 800018e:	4a18      	ldr	r2, [pc, #96]	; (80001f0 <endfiniloop+0x6>)

08000190 <psloop>:
 8000190:	4291      	cmp	r1, r2
 8000192:	bf3c      	itt	cc
 8000194:	f841 0b04 	strcc.w	r0, [r1], #4
 8000198:	e7fa      	bcc.n	8000190 <psloop>
 800019a:	4919      	ldr	r1, [pc, #100]	; (8000200 <endfiniloop+0x16>)
 800019c:	4a19      	ldr	r2, [pc, #100]	; (8000204 <endfiniloop+0x1a>)
 800019e:	4b1a      	ldr	r3, [pc, #104]	; (8000208 <endfiniloop+0x1e>)

080001a0 <dloop>:
 80001a0:	429a      	cmp	r2, r3
 80001a2:	bf3e      	ittt	cc
 80001a4:	f851 0b04 	ldrcc.w	r0, [r1], #4
 80001a8:	f842 0b04 	strcc.w	r0, [r2], #4
 80001ac:	e7f8      	bcc.n	80001a0 <dloop>
 80001ae:	2000      	movs	r0, #0
 80001b0:	4916      	ldr	r1, [pc, #88]	; (800020c <endfiniloop+0x22>)
 80001b2:	4a17      	ldr	r2, [pc, #92]	; (8000210 <endfiniloop+0x26>)

080001b4 <bloop>:
 80001b4:	4291      	cmp	r1, r2
 80001b6:	bf3c      	itt	cc
 80001b8:	f841 0b04 	strcc.w	r0, [r1], #4
 80001bc:	e7fa      	bcc.n	80001b4 <bloop>
 80001be:	f001 fe57 	bl	8001e70 <__init_ram_areas>
 80001c2:	f001 fe8d 	bl	8001ee0 <__late_init>
 80001c6:	4c13      	ldr	r4, [pc, #76]	; (8000214 <endfiniloop+0x2a>)
 80001c8:	4d13      	ldr	r5, [pc, #76]	; (8000218 <endfiniloop+0x2e>)

080001ca <initloop>:
 80001ca:	42ac      	cmp	r4, r5
 80001cc:	da03      	bge.n	80001d6 <endinitloop>
 80001ce:	f854 1b04 	ldr.w	r1, [r4], #4
 80001d2:	4788      	blx	r1
 80001d4:	e7f9      	b.n	80001ca <initloop>

080001d6 <endinitloop>:
 80001d6:	f001 ffd3 	bl	8002180 <main>
 80001da:	4c10      	ldr	r4, [pc, #64]	; (800021c <endfiniloop+0x32>)
 80001dc:	4d10      	ldr	r5, [pc, #64]	; (8000220 <endfiniloop+0x36>)

080001de <finiloop>:
 80001de:	42ac      	cmp	r4, r5
 80001e0:	da03      	bge.n	80001ea <endfiniloop>
 80001e2:	f854 1b04 	ldr.w	r1, [r4], #4
 80001e6:	4788      	blx	r1
 80001e8:	e7f9      	b.n	80001de <finiloop>

080001ea <endfiniloop>:
 80001ea:	f001 be71 	b.w	8001ed0 <__default_exit>
 80001ee:	0000      	.short	0x0000
 80001f0:	20000800 	.word	0x20000800
 80001f4:	20000000 	.word	0x20000000
 80001f8:	20000400 	.word	0x20000400
 80001fc:	20000400 	.word	0x20000400
 8000200:	08003e00 	.word	0x08003e00
 8000204:	20000800 	.word	0x20000800
 8000208:	20000834 	.word	0x20000834
 800020c:	20000838 	.word	0x20000838
 8000210:	200016c0 	.word	0x200016c0
 8000214:	08000160 	.word	0x08000160
 8000218:	08000160 	.word	0x08000160
 800021c:	08000160 	.word	0x08000160
 8000220:	08000160 	.word	0x08000160
	...

08000230 <_port_switch>:
 8000230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000234:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000238:	68c3      	ldr	r3, [r0, #12]
 800023a:	469d      	mov	sp, r3
 800023c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000240 <_port_thread_start>:
 8000240:	2300      	movs	r3, #0
 8000242:	f383 8811 	msr	BASEPRI, r3
 8000246:	4628      	mov	r0, r5
 8000248:	47a0      	blx	r4
 800024a:	2000      	movs	r0, #0
 800024c:	f001 fde0 	bl	8001e10 <chThdExit>

08000250 <_port_switch_from_isr>:
 8000250:	f001 fa66 	bl	8001720 <chSchDoReschedule>

08000254 <_port_exit_from_isr>:
 8000254:	df00      	svc	0
 8000256:	e7fe      	b.n	8000256 <_port_exit_from_isr+0x2>
	...

08000260 <__aeabi_drsub>:
 8000260:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000264:	e002      	b.n	800026c <__adddf3>
 8000266:	bf00      	nop

08000268 <__aeabi_dsub>:
 8000268:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800026c <__adddf3>:
 800026c:	b530      	push	{r4, r5, lr}
 800026e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000272:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000276:	ea94 0f05 	teq	r4, r5
 800027a:	bf08      	it	eq
 800027c:	ea90 0f02 	teqeq	r0, r2
 8000280:	bf1f      	itttt	ne
 8000282:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000286:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800028e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000292:	f000 80e2 	beq.w	800045a <__adddf3+0x1ee>
 8000296:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800029e:	bfb8      	it	lt
 80002a0:	426d      	neglt	r5, r5
 80002a2:	dd0c      	ble.n	80002be <__adddf3+0x52>
 80002a4:	442c      	add	r4, r5
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	ea82 0000 	eor.w	r0, r2, r0
 80002b2:	ea83 0101 	eor.w	r1, r3, r1
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	2d36      	cmp	r5, #54	; 0x36
 80002c0:	bf88      	it	hi
 80002c2:	bd30      	pophi	{r4, r5, pc}
 80002c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d4:	d002      	beq.n	80002dc <__adddf3+0x70>
 80002d6:	4240      	negs	r0, r0
 80002d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002e8:	d002      	beq.n	80002f0 <__adddf3+0x84>
 80002ea:	4252      	negs	r2, r2
 80002ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f0:	ea94 0f05 	teq	r4, r5
 80002f4:	f000 80a7 	beq.w	8000446 <__adddf3+0x1da>
 80002f8:	f1a4 0401 	sub.w	r4, r4, #1
 80002fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000300:	db0d      	blt.n	800031e <__adddf3+0xb2>
 8000302:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000306:	fa22 f205 	lsr.w	r2, r2, r5
 800030a:	1880      	adds	r0, r0, r2
 800030c:	f141 0100 	adc.w	r1, r1, #0
 8000310:	fa03 f20e 	lsl.w	r2, r3, lr
 8000314:	1880      	adds	r0, r0, r2
 8000316:	fa43 f305 	asr.w	r3, r3, r5
 800031a:	4159      	adcs	r1, r3
 800031c:	e00e      	b.n	800033c <__adddf3+0xd0>
 800031e:	f1a5 0520 	sub.w	r5, r5, #32
 8000322:	f10e 0e20 	add.w	lr, lr, #32
 8000326:	2a01      	cmp	r2, #1
 8000328:	fa03 fc0e 	lsl.w	ip, r3, lr
 800032c:	bf28      	it	cs
 800032e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000332:	fa43 f305 	asr.w	r3, r3, r5
 8000336:	18c0      	adds	r0, r0, r3
 8000338:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800033c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000340:	d507      	bpl.n	8000352 <__adddf3+0xe6>
 8000342:	f04f 0e00 	mov.w	lr, #0
 8000346:	f1dc 0c00 	rsbs	ip, ip, #0
 800034a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800034e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000352:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000356:	d31b      	bcc.n	8000390 <__adddf3+0x124>
 8000358:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800035c:	d30c      	bcc.n	8000378 <__adddf3+0x10c>
 800035e:	0849      	lsrs	r1, r1, #1
 8000360:	ea5f 0030 	movs.w	r0, r0, rrx
 8000364:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000368:	f104 0401 	add.w	r4, r4, #1
 800036c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000370:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000374:	f080 809a 	bcs.w	80004ac <__adddf3+0x240>
 8000378:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800037c:	bf08      	it	eq
 800037e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000382:	f150 0000 	adcs.w	r0, r0, #0
 8000386:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038a:	ea41 0105 	orr.w	r1, r1, r5
 800038e:	bd30      	pop	{r4, r5, pc}
 8000390:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000394:	4140      	adcs	r0, r0
 8000396:	eb41 0101 	adc.w	r1, r1, r1
 800039a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800039e:	f1a4 0401 	sub.w	r4, r4, #1
 80003a2:	d1e9      	bne.n	8000378 <__adddf3+0x10c>
 80003a4:	f091 0f00 	teq	r1, #0
 80003a8:	bf04      	itt	eq
 80003aa:	4601      	moveq	r1, r0
 80003ac:	2000      	moveq	r0, #0
 80003ae:	fab1 f381 	clz	r3, r1
 80003b2:	bf08      	it	eq
 80003b4:	3320      	addeq	r3, #32
 80003b6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ba:	f1b3 0220 	subs.w	r2, r3, #32
 80003be:	da0c      	bge.n	80003da <__adddf3+0x16e>
 80003c0:	320c      	adds	r2, #12
 80003c2:	dd08      	ble.n	80003d6 <__adddf3+0x16a>
 80003c4:	f102 0c14 	add.w	ip, r2, #20
 80003c8:	f1c2 020c 	rsb	r2, r2, #12
 80003cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d0:	fa21 f102 	lsr.w	r1, r1, r2
 80003d4:	e00c      	b.n	80003f0 <__adddf3+0x184>
 80003d6:	f102 0214 	add.w	r2, r2, #20
 80003da:	bfd8      	it	le
 80003dc:	f1c2 0c20 	rsble	ip, r2, #32
 80003e0:	fa01 f102 	lsl.w	r1, r1, r2
 80003e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003e8:	bfdc      	itt	le
 80003ea:	ea41 010c 	orrle.w	r1, r1, ip
 80003ee:	4090      	lslle	r0, r2
 80003f0:	1ae4      	subs	r4, r4, r3
 80003f2:	bfa2      	ittt	ge
 80003f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003f8:	4329      	orrge	r1, r5
 80003fa:	bd30      	popge	{r4, r5, pc}
 80003fc:	ea6f 0404 	mvn.w	r4, r4
 8000400:	3c1f      	subs	r4, #31
 8000402:	da1c      	bge.n	800043e <__adddf3+0x1d2>
 8000404:	340c      	adds	r4, #12
 8000406:	dc0e      	bgt.n	8000426 <__adddf3+0x1ba>
 8000408:	f104 0414 	add.w	r4, r4, #20
 800040c:	f1c4 0220 	rsb	r2, r4, #32
 8000410:	fa20 f004 	lsr.w	r0, r0, r4
 8000414:	fa01 f302 	lsl.w	r3, r1, r2
 8000418:	ea40 0003 	orr.w	r0, r0, r3
 800041c:	fa21 f304 	lsr.w	r3, r1, r4
 8000420:	ea45 0103 	orr.w	r1, r5, r3
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f1c4 040c 	rsb	r4, r4, #12
 800042a:	f1c4 0220 	rsb	r2, r4, #32
 800042e:	fa20 f002 	lsr.w	r0, r0, r2
 8000432:	fa01 f304 	lsl.w	r3, r1, r4
 8000436:	ea40 0003 	orr.w	r0, r0, r3
 800043a:	4629      	mov	r1, r5
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	fa21 f004 	lsr.w	r0, r1, r4
 8000442:	4629      	mov	r1, r5
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f094 0f00 	teq	r4, #0
 800044a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800044e:	bf06      	itte	eq
 8000450:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000454:	3401      	addeq	r4, #1
 8000456:	3d01      	subne	r5, #1
 8000458:	e74e      	b.n	80002f8 <__adddf3+0x8c>
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf18      	it	ne
 8000460:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000464:	d029      	beq.n	80004ba <__adddf3+0x24e>
 8000466:	ea94 0f05 	teq	r4, r5
 800046a:	bf08      	it	eq
 800046c:	ea90 0f02 	teqeq	r0, r2
 8000470:	d005      	beq.n	800047e <__adddf3+0x212>
 8000472:	ea54 0c00 	orrs.w	ip, r4, r0
 8000476:	bf04      	itt	eq
 8000478:	4619      	moveq	r1, r3
 800047a:	4610      	moveq	r0, r2
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	ea91 0f03 	teq	r1, r3
 8000482:	bf1e      	ittt	ne
 8000484:	2100      	movne	r1, #0
 8000486:	2000      	movne	r0, #0
 8000488:	bd30      	popne	{r4, r5, pc}
 800048a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800048e:	d105      	bne.n	800049c <__adddf3+0x230>
 8000490:	0040      	lsls	r0, r0, #1
 8000492:	4149      	adcs	r1, r1
 8000494:	bf28      	it	cs
 8000496:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049a:	bd30      	pop	{r4, r5, pc}
 800049c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a0:	bf3c      	itt	cc
 80004a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004a6:	bd30      	popcc	{r4, r5, pc}
 80004a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf1a      	itte	ne
 80004c0:	4619      	movne	r1, r3
 80004c2:	4610      	movne	r0, r2
 80004c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004c8:	bf1c      	itt	ne
 80004ca:	460b      	movne	r3, r1
 80004cc:	4602      	movne	r2, r0
 80004ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d2:	bf06      	itte	eq
 80004d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004d8:	ea91 0f03 	teqeq	r1, r3
 80004dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	bf00      	nop

080004e4 <__aeabi_ui2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f04f 0500 	mov.w	r5, #0
 80004fc:	f04f 0100 	mov.w	r1, #0
 8000500:	e750      	b.n	80003a4 <__adddf3+0x138>
 8000502:	bf00      	nop

08000504 <__aeabi_i2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800051c:	bf48      	it	mi
 800051e:	4240      	negmi	r0, r0
 8000520:	f04f 0100 	mov.w	r1, #0
 8000524:	e73e      	b.n	80003a4 <__adddf3+0x138>
 8000526:	bf00      	nop

08000528 <__aeabi_f2d>:
 8000528:	0042      	lsls	r2, r0, #1
 800052a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800052e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000532:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000536:	bf1f      	itttt	ne
 8000538:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800053c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000540:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000544:	4770      	bxne	lr
 8000546:	f092 0f00 	teq	r2, #0
 800054a:	bf14      	ite	ne
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000560:	e720      	b.n	80003a4 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_ul2d>:
 8000564:	ea50 0201 	orrs.w	r2, r0, r1
 8000568:	bf08      	it	eq
 800056a:	4770      	bxeq	lr
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	f04f 0500 	mov.w	r5, #0
 8000572:	e00a      	b.n	800058a <__aeabi_l2d+0x16>

08000574 <__aeabi_l2d>:
 8000574:	ea50 0201 	orrs.w	r2, r0, r1
 8000578:	bf08      	it	eq
 800057a:	4770      	bxeq	lr
 800057c:	b530      	push	{r4, r5, lr}
 800057e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000582:	d502      	bpl.n	800058a <__aeabi_l2d+0x16>
 8000584:	4240      	negs	r0, r0
 8000586:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800058a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000592:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000596:	f43f aedc 	beq.w	8000352 <__adddf3+0xe6>
 800059a:	f04f 0203 	mov.w	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005aa:	bf18      	it	ne
 80005ac:	3203      	addne	r2, #3
 80005ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005b2:	f1c2 0320 	rsb	r3, r2, #32
 80005b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ba:	fa20 f002 	lsr.w	r0, r0, r2
 80005be:	fa01 fe03 	lsl.w	lr, r1, r3
 80005c2:	ea40 000e 	orr.w	r0, r0, lr
 80005c6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ca:	4414      	add	r4, r2
 80005cc:	e6c1      	b.n	8000352 <__adddf3+0xe6>
 80005ce:	bf00      	nop

080005d0 <__aeabi_dmul>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005de:	bf1d      	ittte	ne
 80005e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e4:	ea94 0f0c 	teqne	r4, ip
 80005e8:	ea95 0f0c 	teqne	r5, ip
 80005ec:	f000 f8de 	bleq	80007ac <__aeabi_dmul+0x1dc>
 80005f0:	442c      	add	r4, r5
 80005f2:	ea81 0603 	eor.w	r6, r1, r3
 80005f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000602:	bf18      	it	ne
 8000604:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000608:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800060c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000610:	d038      	beq.n	8000684 <__aeabi_dmul+0xb4>
 8000612:	fba0 ce02 	umull	ip, lr, r0, r2
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800061e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000622:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000626:	f04f 0600 	mov.w	r6, #0
 800062a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800062e:	f09c 0f00 	teq	ip, #0
 8000632:	bf18      	it	ne
 8000634:	f04e 0e01 	orrne.w	lr, lr, #1
 8000638:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800063c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000640:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000644:	d204      	bcs.n	8000650 <__aeabi_dmul+0x80>
 8000646:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800064a:	416d      	adcs	r5, r5
 800064c:	eb46 0606 	adc.w	r6, r6, r6
 8000650:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000654:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000658:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800065c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000660:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000664:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000668:	bf88      	it	hi
 800066a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800066e:	d81e      	bhi.n	80006ae <__aeabi_dmul+0xde>
 8000670:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000674:	bf08      	it	eq
 8000676:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800067a:	f150 0000 	adcs.w	r0, r0, #0
 800067e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000688:	ea46 0101 	orr.w	r1, r6, r1
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	ea81 0103 	eor.w	r1, r1, r3
 8000694:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000698:	bfc2      	ittt	gt
 800069a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800069e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	popgt	{r4, r5, r6, pc}
 80006a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a8:	f04f 0e00 	mov.w	lr, #0
 80006ac:	3c01      	subs	r4, #1
 80006ae:	f300 80ab 	bgt.w	8000808 <__aeabi_dmul+0x238>
 80006b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006b6:	bfde      	ittt	le
 80006b8:	2000      	movle	r0, #0
 80006ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006be:	bd70      	pople	{r4, r5, r6, pc}
 80006c0:	f1c4 0400 	rsb	r4, r4, #0
 80006c4:	3c20      	subs	r4, #32
 80006c6:	da35      	bge.n	8000734 <__aeabi_dmul+0x164>
 80006c8:	340c      	adds	r4, #12
 80006ca:	dc1b      	bgt.n	8000704 <__aeabi_dmul+0x134>
 80006cc:	f104 0414 	add.w	r4, r4, #20
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f305 	lsl.w	r3, r0, r5
 80006d8:	fa20 f004 	lsr.w	r0, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f0:	fa21 f604 	lsr.w	r6, r1, r4
 80006f4:	eb42 0106 	adc.w	r1, r2, r6
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 040c 	rsb	r4, r4, #12
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f304 	lsl.w	r3, r0, r4
 8000710:	fa20 f005 	lsr.w	r0, r0, r5
 8000714:	fa01 f204 	lsl.w	r2, r1, r4
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000720:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000724:	f141 0100 	adc.w	r1, r1, #0
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 0520 	rsb	r5, r4, #32
 8000738:	fa00 f205 	lsl.w	r2, r0, r5
 800073c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000740:	fa20 f304 	lsr.w	r3, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea43 0302 	orr.w	r3, r3, r2
 800074c:	fa21 f004 	lsr.w	r0, r1, r4
 8000750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000754:	fa21 f204 	lsr.w	r2, r1, r4
 8000758:	ea20 0002 	bic.w	r0, r0, r2
 800075c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f094 0f00 	teq	r4, #0
 8000770:	d10f      	bne.n	8000792 <__aeabi_dmul+0x1c2>
 8000772:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000776:	0040      	lsls	r0, r0, #1
 8000778:	eb41 0101 	adc.w	r1, r1, r1
 800077c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3c01      	subeq	r4, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1a6>
 8000786:	ea41 0106 	orr.w	r1, r1, r6
 800078a:	f095 0f00 	teq	r5, #0
 800078e:	bf18      	it	ne
 8000790:	4770      	bxne	lr
 8000792:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000796:	0052      	lsls	r2, r2, #1
 8000798:	eb43 0303 	adc.w	r3, r3, r3
 800079c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3d01      	subeq	r5, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1c6>
 80007a6:	ea43 0306 	orr.w	r3, r3, r6
 80007aa:	4770      	bx	lr
 80007ac:	ea94 0f0c 	teq	r4, ip
 80007b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b4:	bf18      	it	ne
 80007b6:	ea95 0f0c 	teqne	r5, ip
 80007ba:	d00c      	beq.n	80007d6 <__aeabi_dmul+0x206>
 80007bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c0:	bf18      	it	ne
 80007c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c6:	d1d1      	bne.n	800076c <__aeabi_dmul+0x19c>
 80007c8:	ea81 0103 	eor.w	r1, r1, r3
 80007cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d0:	f04f 0000 	mov.w	r0, #0
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007da:	bf06      	itte	eq
 80007dc:	4610      	moveq	r0, r2
 80007de:	4619      	moveq	r1, r3
 80007e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e4:	d019      	beq.n	800081a <__aeabi_dmul+0x24a>
 80007e6:	ea94 0f0c 	teq	r4, ip
 80007ea:	d102      	bne.n	80007f2 <__aeabi_dmul+0x222>
 80007ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007f0:	d113      	bne.n	800081a <__aeabi_dmul+0x24a>
 80007f2:	ea95 0f0c 	teq	r5, ip
 80007f6:	d105      	bne.n	8000804 <__aeabi_dmul+0x234>
 80007f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007fc:	bf1c      	itt	ne
 80007fe:	4610      	movne	r0, r2
 8000800:	4619      	movne	r1, r3
 8000802:	d10a      	bne.n	800081a <__aeabi_dmul+0x24a>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000810:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	bd70      	pop	{r4, r5, r6, pc}
 800081a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000822:	bd70      	pop	{r4, r5, r6, pc}

08000824 <__aeabi_ddiv>:
 8000824:	b570      	push	{r4, r5, r6, lr}
 8000826:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800082a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800082e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000832:	bf1d      	ittte	ne
 8000834:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000838:	ea94 0f0c 	teqne	r4, ip
 800083c:	ea95 0f0c 	teqne	r5, ip
 8000840:	f000 f8a7 	bleq	8000992 <__aeabi_ddiv+0x16e>
 8000844:	eba4 0405 	sub.w	r4, r4, r5
 8000848:	ea81 0e03 	eor.w	lr, r1, r3
 800084c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000850:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000854:	f000 8088 	beq.w	8000968 <__aeabi_ddiv+0x144>
 8000858:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800085c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000860:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000864:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000868:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800086c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000870:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000874:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000878:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800087c:	429d      	cmp	r5, r3
 800087e:	bf08      	it	eq
 8000880:	4296      	cmpeq	r6, r2
 8000882:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000886:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800088a:	d202      	bcs.n	8000892 <__aeabi_ddiv+0x6e>
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	1ab6      	subs	r6, r6, r2
 8000894:	eb65 0503 	sbc.w	r5, r5, r3
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000900:	ea55 0e06 	orrs.w	lr, r5, r6
 8000904:	d018      	beq.n	8000938 <__aeabi_ddiv+0x114>
 8000906:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800090a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800090e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000912:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000916:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800091a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800091e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000922:	d1c0      	bne.n	80008a6 <__aeabi_ddiv+0x82>
 8000924:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000928:	d10b      	bne.n	8000942 <__aeabi_ddiv+0x11e>
 800092a:	ea41 0100 	orr.w	r1, r1, r0
 800092e:	f04f 0000 	mov.w	r0, #0
 8000932:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000936:	e7b6      	b.n	80008a6 <__aeabi_ddiv+0x82>
 8000938:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800093c:	bf04      	itt	eq
 800093e:	4301      	orreq	r1, r0
 8000940:	2000      	moveq	r0, #0
 8000942:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000946:	bf88      	it	hi
 8000948:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800094c:	f63f aeaf 	bhi.w	80006ae <__aeabi_dmul+0xde>
 8000950:	ebb5 0c03 	subs.w	ip, r5, r3
 8000954:	bf04      	itt	eq
 8000956:	ebb6 0c02 	subseq.w	ip, r6, r2
 800095a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800095e:	f150 0000 	adcs.w	r0, r0, #0
 8000962:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000966:	bd70      	pop	{r4, r5, r6, pc}
 8000968:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800096c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000970:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000974:	bfc2      	ittt	gt
 8000976:	ebd4 050c 	rsbsgt	r5, r4, ip
 800097a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800097e:	bd70      	popgt	{r4, r5, r6, pc}
 8000980:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000984:	f04f 0e00 	mov.w	lr, #0
 8000988:	3c01      	subs	r4, #1
 800098a:	e690      	b.n	80006ae <__aeabi_dmul+0xde>
 800098c:	ea45 0e06 	orr.w	lr, r5, r6
 8000990:	e68d      	b.n	80006ae <__aeabi_dmul+0xde>
 8000992:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000996:	ea94 0f0c 	teq	r4, ip
 800099a:	bf08      	it	eq
 800099c:	ea95 0f0c 	teqeq	r5, ip
 80009a0:	f43f af3b 	beq.w	800081a <__aeabi_dmul+0x24a>
 80009a4:	ea94 0f0c 	teq	r4, ip
 80009a8:	d10a      	bne.n	80009c0 <__aeabi_ddiv+0x19c>
 80009aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ae:	f47f af34 	bne.w	800081a <__aeabi_dmul+0x24a>
 80009b2:	ea95 0f0c 	teq	r5, ip
 80009b6:	f47f af25 	bne.w	8000804 <__aeabi_dmul+0x234>
 80009ba:	4610      	mov	r0, r2
 80009bc:	4619      	mov	r1, r3
 80009be:	e72c      	b.n	800081a <__aeabi_dmul+0x24a>
 80009c0:	ea95 0f0c 	teq	r5, ip
 80009c4:	d106      	bne.n	80009d4 <__aeabi_ddiv+0x1b0>
 80009c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ca:	f43f aefd 	beq.w	80007c8 <__aeabi_dmul+0x1f8>
 80009ce:	4610      	mov	r0, r2
 80009d0:	4619      	mov	r1, r3
 80009d2:	e722      	b.n	800081a <__aeabi_dmul+0x24a>
 80009d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009de:	f47f aec5 	bne.w	800076c <__aeabi_dmul+0x19c>
 80009e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009e6:	f47f af0d 	bne.w	8000804 <__aeabi_dmul+0x234>
 80009ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ee:	f47f aeeb 	bne.w	80007c8 <__aeabi_dmul+0x1f8>
 80009f2:	e712      	b.n	800081a <__aeabi_dmul+0x24a>
	...

08000a00 <__aeabi_d2f>:
 8000a00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a08:	bf24      	itt	cs
 8000a0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a12:	d90d      	bls.n	8000a30 <__aeabi_d2f+0x30>
 8000a14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a28:	bf08      	it	eq
 8000a2a:	f020 0001 	biceq.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a34:	d121      	bne.n	8000a7a <__aeabi_d2f+0x7a>
 8000a36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a3a:	bfbc      	itt	lt
 8000a3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	4770      	bxlt	lr
 8000a42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4a:	f1c2 0218 	rsb	r2, r2, #24
 8000a4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000a52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a56:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	f040 0001 	orrne.w	r0, r0, #1
 8000a60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a6c:	ea40 000c 	orr.w	r0, r0, ip
 8000a70:	fa23 f302 	lsr.w	r3, r3, r2
 8000a74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a78:	e7cc      	b.n	8000a14 <__aeabi_d2f+0x14>
 8000a7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7e:	d107      	bne.n	8000a90 <__aeabi_d2f+0x90>
 8000a80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a84:	bf1e      	ittt	ne
 8000a86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8e:	4770      	bxne	lr
 8000a90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_frsub>:
 8000aa0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aa4:	e002      	b.n	8000aac <__addsf3>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_fsub>:
 8000aa8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aac <__addsf3>:
 8000aac:	0042      	lsls	r2, r0, #1
 8000aae:	bf1f      	itttt	ne
 8000ab0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab4:	ea92 0f03 	teqne	r2, r3
 8000ab8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000abc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ac0:	d06a      	beq.n	8000b98 <__addsf3+0xec>
 8000ac2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aca:	bfc1      	itttt	gt
 8000acc:	18d2      	addgt	r2, r2, r3
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	4048      	eorgt	r0, r1
 8000ad2:	4041      	eorgt	r1, r0
 8000ad4:	bfb8      	it	lt
 8000ad6:	425b      	neglt	r3, r3
 8000ad8:	2b19      	cmp	r3, #25
 8000ada:	bf88      	it	hi
 8000adc:	4770      	bxhi	lr
 8000ade:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000aea:	bf18      	it	ne
 8000aec:	4240      	negne	r0, r0
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000af6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000afa:	bf18      	it	ne
 8000afc:	4249      	negne	r1, r1
 8000afe:	ea92 0f03 	teq	r2, r3
 8000b02:	d03f      	beq.n	8000b84 <__addsf3+0xd8>
 8000b04:	f1a2 0201 	sub.w	r2, r2, #1
 8000b08:	fa41 fc03 	asr.w	ip, r1, r3
 8000b0c:	eb10 000c 	adds.w	r0, r0, ip
 8000b10:	f1c3 0320 	rsb	r3, r3, #32
 8000b14:	fa01 f103 	lsl.w	r1, r1, r3
 8000b18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1c:	d502      	bpl.n	8000b24 <__addsf3+0x78>
 8000b1e:	4249      	negs	r1, r1
 8000b20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b28:	d313      	bcc.n	8000b52 <__addsf3+0xa6>
 8000b2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b2e:	d306      	bcc.n	8000b3e <__addsf3+0x92>
 8000b30:	0840      	lsrs	r0, r0, #1
 8000b32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b36:	f102 0201 	add.w	r2, r2, #1
 8000b3a:	2afe      	cmp	r2, #254	; 0xfe
 8000b3c:	d251      	bcs.n	8000be2 <__addsf3+0x136>
 8000b3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b46:	bf08      	it	eq
 8000b48:	f020 0001 	biceq.w	r0, r0, #1
 8000b4c:	ea40 0003 	orr.w	r0, r0, r3
 8000b50:	4770      	bx	lr
 8000b52:	0049      	lsls	r1, r1, #1
 8000b54:	eb40 0000 	adc.w	r0, r0, r0
 8000b58:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b60:	d1ed      	bne.n	8000b3e <__addsf3+0x92>
 8000b62:	fab0 fc80 	clz	ip, r0
 8000b66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b72:	bfaa      	itet	ge
 8000b74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b78:	4252      	neglt	r2, r2
 8000b7a:	4318      	orrge	r0, r3
 8000b7c:	bfbc      	itt	lt
 8000b7e:	40d0      	lsrlt	r0, r2
 8000b80:	4318      	orrlt	r0, r3
 8000b82:	4770      	bx	lr
 8000b84:	f092 0f00 	teq	r2, #0
 8000b88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b8c:	bf06      	itte	eq
 8000b8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b92:	3201      	addeq	r2, #1
 8000b94:	3b01      	subne	r3, #1
 8000b96:	e7b5      	b.n	8000b04 <__addsf3+0x58>
 8000b98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba0:	bf18      	it	ne
 8000ba2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba6:	d021      	beq.n	8000bec <__addsf3+0x140>
 8000ba8:	ea92 0f03 	teq	r2, r3
 8000bac:	d004      	beq.n	8000bb8 <__addsf3+0x10c>
 8000bae:	f092 0f00 	teq	r2, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	4608      	moveq	r0, r1
 8000bb6:	4770      	bx	lr
 8000bb8:	ea90 0f01 	teq	r0, r1
 8000bbc:	bf1c      	itt	ne
 8000bbe:	2000      	movne	r0, #0
 8000bc0:	4770      	bxne	lr
 8000bc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bc6:	d104      	bne.n	8000bd2 <__addsf3+0x126>
 8000bc8:	0040      	lsls	r0, r0, #1
 8000bca:	bf28      	it	cs
 8000bcc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bd0:	4770      	bx	lr
 8000bd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bd6:	bf3c      	itt	cc
 8000bd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bxcc	lr
 8000bde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000be6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bea:	4770      	bx	lr
 8000bec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bf0:	bf16      	itet	ne
 8000bf2:	4608      	movne	r0, r1
 8000bf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf8:	4601      	movne	r1, r0
 8000bfa:	0242      	lsls	r2, r0, #9
 8000bfc:	bf06      	itte	eq
 8000bfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c02:	ea90 0f01 	teqeq	r0, r1
 8000c06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_ui2f>:
 8000c0c:	f04f 0300 	mov.w	r3, #0
 8000c10:	e004      	b.n	8000c1c <__aeabi_i2f+0x8>
 8000c12:	bf00      	nop

08000c14 <__aeabi_i2f>:
 8000c14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c18:	bf48      	it	mi
 8000c1a:	4240      	negmi	r0, r0
 8000c1c:	ea5f 0c00 	movs.w	ip, r0
 8000c20:	bf08      	it	eq
 8000c22:	4770      	bxeq	lr
 8000c24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c28:	4601      	mov	r1, r0
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	e01c      	b.n	8000c6a <__aeabi_l2f+0x2a>

08000c30 <__aeabi_ul2f>:
 8000c30:	ea50 0201 	orrs.w	r2, r0, r1
 8000c34:	bf08      	it	eq
 8000c36:	4770      	bxeq	lr
 8000c38:	f04f 0300 	mov.w	r3, #0
 8000c3c:	e00a      	b.n	8000c54 <__aeabi_l2f+0x14>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_l2f>:
 8000c40:	ea50 0201 	orrs.w	r2, r0, r1
 8000c44:	bf08      	it	eq
 8000c46:	4770      	bxeq	lr
 8000c48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__aeabi_l2f+0x14>
 8000c4e:	4240      	negs	r0, r0
 8000c50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c54:	ea5f 0c01 	movs.w	ip, r1
 8000c58:	bf02      	ittt	eq
 8000c5a:	4684      	moveq	ip, r0
 8000c5c:	4601      	moveq	r1, r0
 8000c5e:	2000      	moveq	r0, #0
 8000c60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c64:	bf08      	it	eq
 8000c66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c6e:	fabc f28c 	clz	r2, ip
 8000c72:	3a08      	subs	r2, #8
 8000c74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c78:	db10      	blt.n	8000c9c <__aeabi_l2f+0x5c>
 8000c7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7e:	4463      	add	r3, ip
 8000c80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c84:	f1c2 0220 	rsb	r2, r2, #32
 8000c88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c90:	eb43 0002 	adc.w	r0, r3, r2
 8000c94:	bf08      	it	eq
 8000c96:	f020 0001 	biceq.w	r0, r0, #1
 8000c9a:	4770      	bx	lr
 8000c9c:	f102 0220 	add.w	r2, r2, #32
 8000ca0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca4:	f1c2 0220 	rsb	r2, r2, #32
 8000ca8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cac:	fa21 f202 	lsr.w	r2, r1, r2
 8000cb0:	eb43 0002 	adc.w	r0, r3, r2
 8000cb4:	bf08      	it	eq
 8000cb6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cba:	4770      	bx	lr
 8000cbc:	0000      	movs	r0, r0
	...

08000cc0 <__aeabi_fmul>:
 8000cc0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc8:	bf1e      	ittt	ne
 8000cca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cce:	ea92 0f0c 	teqne	r2, ip
 8000cd2:	ea93 0f0c 	teqne	r3, ip
 8000cd6:	d06f      	beq.n	8000db8 <__aeabi_fmul+0xf8>
 8000cd8:	441a      	add	r2, r3
 8000cda:	ea80 0c01 	eor.w	ip, r0, r1
 8000cde:	0240      	lsls	r0, r0, #9
 8000ce0:	bf18      	it	ne
 8000ce2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000ce6:	d01e      	beq.n	8000d26 <__aeabi_fmul+0x66>
 8000ce8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cec:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cf0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cf4:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cfc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d00:	bf3e      	ittt	cc
 8000d02:	0049      	lslcc	r1, r1, #1
 8000d04:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d08:	005b      	lslcc	r3, r3, #1
 8000d0a:	ea40 0001 	orr.w	r0, r0, r1
 8000d0e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d12:	2afd      	cmp	r2, #253	; 0xfd
 8000d14:	d81d      	bhi.n	8000d52 <__aeabi_fmul+0x92>
 8000d16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d1e:	bf08      	it	eq
 8000d20:	f020 0001 	biceq.w	r0, r0, #1
 8000d24:	4770      	bx	lr
 8000d26:	f090 0f00 	teq	r0, #0
 8000d2a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d2e:	bf08      	it	eq
 8000d30:	0249      	lsleq	r1, r1, #9
 8000d32:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d36:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d3a:	3a7f      	subs	r2, #127	; 0x7f
 8000d3c:	bfc2      	ittt	gt
 8000d3e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d42:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d46:	4770      	bxgt	lr
 8000d48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	3a01      	subs	r2, #1
 8000d52:	dc5d      	bgt.n	8000e10 <__aeabi_fmul+0x150>
 8000d54:	f112 0f19 	cmn.w	r2, #25
 8000d58:	bfdc      	itt	le
 8000d5a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d5e:	4770      	bxle	lr
 8000d60:	f1c2 0200 	rsb	r2, r2, #0
 8000d64:	0041      	lsls	r1, r0, #1
 8000d66:	fa21 f102 	lsr.w	r1, r1, r2
 8000d6a:	f1c2 0220 	rsb	r2, r2, #32
 8000d6e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d72:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d76:	f140 0000 	adc.w	r0, r0, #0
 8000d7a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d7e:	bf08      	it	eq
 8000d80:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d84:	4770      	bx	lr
 8000d86:	f092 0f00 	teq	r2, #0
 8000d8a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d8e:	bf02      	ittt	eq
 8000d90:	0040      	lsleq	r0, r0, #1
 8000d92:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d96:	3a01      	subeq	r2, #1
 8000d98:	d0f9      	beq.n	8000d8e <__aeabi_fmul+0xce>
 8000d9a:	ea40 000c 	orr.w	r0, r0, ip
 8000d9e:	f093 0f00 	teq	r3, #0
 8000da2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000da6:	bf02      	ittt	eq
 8000da8:	0049      	lsleq	r1, r1, #1
 8000daa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dae:	3b01      	subeq	r3, #1
 8000db0:	d0f9      	beq.n	8000da6 <__aeabi_fmul+0xe6>
 8000db2:	ea41 010c 	orr.w	r1, r1, ip
 8000db6:	e78f      	b.n	8000cd8 <__aeabi_fmul+0x18>
 8000db8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dbc:	ea92 0f0c 	teq	r2, ip
 8000dc0:	bf18      	it	ne
 8000dc2:	ea93 0f0c 	teqne	r3, ip
 8000dc6:	d00a      	beq.n	8000dde <__aeabi_fmul+0x11e>
 8000dc8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dcc:	bf18      	it	ne
 8000dce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dd2:	d1d8      	bne.n	8000d86 <__aeabi_fmul+0xc6>
 8000dd4:	ea80 0001 	eor.w	r0, r0, r1
 8000dd8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ddc:	4770      	bx	lr
 8000dde:	f090 0f00 	teq	r0, #0
 8000de2:	bf17      	itett	ne
 8000de4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000de8:	4608      	moveq	r0, r1
 8000dea:	f091 0f00 	teqne	r1, #0
 8000dee:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000df2:	d014      	beq.n	8000e1e <__aeabi_fmul+0x15e>
 8000df4:	ea92 0f0c 	teq	r2, ip
 8000df8:	d101      	bne.n	8000dfe <__aeabi_fmul+0x13e>
 8000dfa:	0242      	lsls	r2, r0, #9
 8000dfc:	d10f      	bne.n	8000e1e <__aeabi_fmul+0x15e>
 8000dfe:	ea93 0f0c 	teq	r3, ip
 8000e02:	d103      	bne.n	8000e0c <__aeabi_fmul+0x14c>
 8000e04:	024b      	lsls	r3, r1, #9
 8000e06:	bf18      	it	ne
 8000e08:	4608      	movne	r0, r1
 8000e0a:	d108      	bne.n	8000e1e <__aeabi_fmul+0x15e>
 8000e0c:	ea80 0001 	eor.w	r0, r0, r1
 8000e10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1c:	4770      	bx	lr
 8000e1e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e22:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e26:	4770      	bx	lr

08000e28 <__aeabi_fdiv>:
 8000e28:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e2c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e30:	bf1e      	ittt	ne
 8000e32:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e36:	ea92 0f0c 	teqne	r2, ip
 8000e3a:	ea93 0f0c 	teqne	r3, ip
 8000e3e:	d069      	beq.n	8000f14 <__aeabi_fdiv+0xec>
 8000e40:	eba2 0203 	sub.w	r2, r2, r3
 8000e44:	ea80 0c01 	eor.w	ip, r0, r1
 8000e48:	0249      	lsls	r1, r1, #9
 8000e4a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e4e:	d037      	beq.n	8000ec0 <__aeabi_fdiv+0x98>
 8000e50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e54:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e58:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e60:	428b      	cmp	r3, r1
 8000e62:	bf38      	it	cc
 8000e64:	005b      	lslcc	r3, r3, #1
 8000e66:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e6a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	bf24      	itt	cs
 8000e72:	1a5b      	subcs	r3, r3, r1
 8000e74:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e78:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e82:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e86:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e8a:	bf24      	itt	cs
 8000e8c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e90:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e94:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e98:	bf24      	itt	cs
 8000e9a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e9e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ea2:	011b      	lsls	r3, r3, #4
 8000ea4:	bf18      	it	ne
 8000ea6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eaa:	d1e0      	bne.n	8000e6e <__aeabi_fdiv+0x46>
 8000eac:	2afd      	cmp	r2, #253	; 0xfd
 8000eae:	f63f af50 	bhi.w	8000d52 <__aeabi_fmul+0x92>
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb8:	bf08      	it	eq
 8000eba:	f020 0001 	biceq.w	r0, r0, #1
 8000ebe:	4770      	bx	lr
 8000ec0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ec4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec8:	327f      	adds	r2, #127	; 0x7f
 8000eca:	bfc2      	ittt	gt
 8000ecc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ed0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ed4:	4770      	bxgt	lr
 8000ed6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eda:	f04f 0300 	mov.w	r3, #0
 8000ede:	3a01      	subs	r2, #1
 8000ee0:	e737      	b.n	8000d52 <__aeabi_fmul+0x92>
 8000ee2:	f092 0f00 	teq	r2, #0
 8000ee6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eea:	bf02      	ittt	eq
 8000eec:	0040      	lsleq	r0, r0, #1
 8000eee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ef2:	3a01      	subeq	r2, #1
 8000ef4:	d0f9      	beq.n	8000eea <__aeabi_fdiv+0xc2>
 8000ef6:	ea40 000c 	orr.w	r0, r0, ip
 8000efa:	f093 0f00 	teq	r3, #0
 8000efe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f02:	bf02      	ittt	eq
 8000f04:	0049      	lsleq	r1, r1, #1
 8000f06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f0a:	3b01      	subeq	r3, #1
 8000f0c:	d0f9      	beq.n	8000f02 <__aeabi_fdiv+0xda>
 8000f0e:	ea41 010c 	orr.w	r1, r1, ip
 8000f12:	e795      	b.n	8000e40 <__aeabi_fdiv+0x18>
 8000f14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f18:	ea92 0f0c 	teq	r2, ip
 8000f1c:	d108      	bne.n	8000f30 <__aeabi_fdiv+0x108>
 8000f1e:	0242      	lsls	r2, r0, #9
 8000f20:	f47f af7d 	bne.w	8000e1e <__aeabi_fmul+0x15e>
 8000f24:	ea93 0f0c 	teq	r3, ip
 8000f28:	f47f af70 	bne.w	8000e0c <__aeabi_fmul+0x14c>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	e776      	b.n	8000e1e <__aeabi_fmul+0x15e>
 8000f30:	ea93 0f0c 	teq	r3, ip
 8000f34:	d104      	bne.n	8000f40 <__aeabi_fdiv+0x118>
 8000f36:	024b      	lsls	r3, r1, #9
 8000f38:	f43f af4c 	beq.w	8000dd4 <__aeabi_fmul+0x114>
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e76e      	b.n	8000e1e <__aeabi_fmul+0x15e>
 8000f40:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f44:	bf18      	it	ne
 8000f46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	d1ca      	bne.n	8000ee2 <__aeabi_fdiv+0xba>
 8000f4c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f50:	f47f af5c 	bne.w	8000e0c <__aeabi_fmul+0x14c>
 8000f54:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f58:	f47f af3c 	bne.w	8000dd4 <__aeabi_fmul+0x114>
 8000f5c:	e75f      	b.n	8000e1e <__aeabi_fmul+0x15e>
 8000f5e:	bf00      	nop

08000f60 <__gesf2>:
 8000f60:	f04f 3cff 	mov.w	ip, #4294967295
 8000f64:	e006      	b.n	8000f74 <__cmpsf2+0x4>
 8000f66:	bf00      	nop

08000f68 <__lesf2>:
 8000f68:	f04f 0c01 	mov.w	ip, #1
 8000f6c:	e002      	b.n	8000f74 <__cmpsf2+0x4>
 8000f6e:	bf00      	nop

08000f70 <__cmpsf2>:
 8000f70:	f04f 0c01 	mov.w	ip, #1
 8000f74:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f78:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f84:	bf18      	it	ne
 8000f86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f8a:	d011      	beq.n	8000fb0 <__cmpsf2+0x40>
 8000f8c:	b001      	add	sp, #4
 8000f8e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f92:	bf18      	it	ne
 8000f94:	ea90 0f01 	teqne	r0, r1
 8000f98:	bf58      	it	pl
 8000f9a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f9e:	bf88      	it	hi
 8000fa0:	17c8      	asrhi	r0, r1, #31
 8000fa2:	bf38      	it	cc
 8000fa4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fa8:	bf18      	it	ne
 8000faa:	f040 0001 	orrne.w	r0, r0, #1
 8000fae:	4770      	bx	lr
 8000fb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb4:	d102      	bne.n	8000fbc <__cmpsf2+0x4c>
 8000fb6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fba:	d105      	bne.n	8000fc8 <__cmpsf2+0x58>
 8000fbc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fc0:	d1e4      	bne.n	8000f8c <__cmpsf2+0x1c>
 8000fc2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fc6:	d0e1      	beq.n	8000f8c <__cmpsf2+0x1c>
 8000fc8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <__aeabi_cfrcmple>:
 8000fd0:	4684      	mov	ip, r0
 8000fd2:	4608      	mov	r0, r1
 8000fd4:	4661      	mov	r1, ip
 8000fd6:	e7ff      	b.n	8000fd8 <__aeabi_cfcmpeq>

08000fd8 <__aeabi_cfcmpeq>:
 8000fd8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fda:	f7ff ffc9 	bl	8000f70 <__cmpsf2>
 8000fde:	2800      	cmp	r0, #0
 8000fe0:	bf48      	it	mi
 8000fe2:	f110 0f00 	cmnmi.w	r0, #0
 8000fe6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fe8 <__aeabi_fcmpeq>:
 8000fe8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fec:	f7ff fff4 	bl	8000fd8 <__aeabi_cfcmpeq>
 8000ff0:	bf0c      	ite	eq
 8000ff2:	2001      	moveq	r0, #1
 8000ff4:	2000      	movne	r0, #0
 8000ff6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffa:	bf00      	nop

08000ffc <__aeabi_fcmplt>:
 8000ffc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001000:	f7ff ffea 	bl	8000fd8 <__aeabi_cfcmpeq>
 8001004:	bf34      	ite	cc
 8001006:	2001      	movcc	r0, #1
 8001008:	2000      	movcs	r0, #0
 800100a:	f85d fb08 	ldr.w	pc, [sp], #8
 800100e:	bf00      	nop

08001010 <__aeabi_fcmple>:
 8001010:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001014:	f7ff ffe0 	bl	8000fd8 <__aeabi_cfcmpeq>
 8001018:	bf94      	ite	ls
 800101a:	2001      	movls	r0, #1
 800101c:	2000      	movhi	r0, #0
 800101e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001022:	bf00      	nop

08001024 <__aeabi_fcmpge>:
 8001024:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001028:	f7ff ffd2 	bl	8000fd0 <__aeabi_cfrcmple>
 800102c:	bf94      	ite	ls
 800102e:	2001      	movls	r0, #1
 8001030:	2000      	movhi	r0, #0
 8001032:	f85d fb08 	ldr.w	pc, [sp], #8
 8001036:	bf00      	nop

08001038 <__aeabi_fcmpgt>:
 8001038:	f84d ed08 	str.w	lr, [sp, #-8]!
 800103c:	f7ff ffc8 	bl	8000fd0 <__aeabi_cfrcmple>
 8001040:	bf34      	ite	cc
 8001042:	2001      	movcc	r0, #1
 8001044:	2000      	movcs	r0, #0
 8001046:	f85d fb08 	ldr.w	pc, [sp], #8
 800104a:	bf00      	nop
 800104c:	0000      	movs	r0, r0
	...

08001050 <__aeabi_f2iz>:
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001058:	d30f      	bcc.n	800107a <__aeabi_f2iz+0x2a>
 800105a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800105e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001062:	d90d      	bls.n	8001080 <__aeabi_f2iz+0x30>
 8001064:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001068:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800106c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001070:	fa23 f002 	lsr.w	r0, r3, r2
 8001074:	bf18      	it	ne
 8001076:	4240      	negne	r0, r0
 8001078:	4770      	bx	lr
 800107a:	f04f 0000 	mov.w	r0, #0
 800107e:	4770      	bx	lr
 8001080:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001084:	d101      	bne.n	800108a <__aeabi_f2iz+0x3a>
 8001086:	0242      	lsls	r2, r0, #9
 8001088:	d105      	bne.n	8001096 <__aeabi_f2iz+0x46>
 800108a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800108e:	bf08      	it	eq
 8001090:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001094:	4770      	bx	lr
 8001096:	f04f 0000 	mov.w	r0, #0
 800109a:	4770      	bx	lr
 800109c:	0000      	movs	r0, r0
	...

080010a0 <__aeabi_f2uiz>:
 80010a0:	0042      	lsls	r2, r0, #1
 80010a2:	d20e      	bcs.n	80010c2 <__aeabi_f2uiz+0x22>
 80010a4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010a8:	d30b      	bcc.n	80010c2 <__aeabi_f2uiz+0x22>
 80010aa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010b2:	d409      	bmi.n	80010c8 <__aeabi_f2uiz+0x28>
 80010b4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010bc:	fa23 f002 	lsr.w	r0, r3, r2
 80010c0:	4770      	bx	lr
 80010c2:	f04f 0000 	mov.w	r0, #0
 80010c6:	4770      	bx	lr
 80010c8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010cc:	d101      	bne.n	80010d2 <__aeabi_f2uiz+0x32>
 80010ce:	0242      	lsls	r2, r0, #9
 80010d0:	d102      	bne.n	80010d8 <__aeabi_f2uiz+0x38>
 80010d2:	f04f 30ff 	mov.w	r0, #4294967295
 80010d6:	4770      	bx	lr
 80010d8:	f04f 0000 	mov.w	r0, #0
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <pwm_lld_serve_interrupt>:
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 80010e0:	6983      	ldr	r3, [r0, #24]
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 80010e2:	b570      	push	{r4, r5, r6, lr}
  sr  = pwmp->tim->SR;
 80010e4:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80010e6:	68da      	ldr	r2, [r3, #12]
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 80010e8:	4605      	mov	r5, r0
 80010ea:	4014      	ands	r4, r2
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80010ec:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 80010ee:	43d2      	mvns	r2, r2
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80010f0:	07a6      	lsls	r6, r4, #30
  pwmp->tim->SR = ~sr;
 80010f2:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80010f4:	d503      	bpl.n	80010fe <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
 80010f6:	6843      	ldr	r3, [r0, #4]
 80010f8:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80010fa:	b103      	cbz	r3, 80010fe <pwm_lld_serve_interrupt+0x1e>
    pwmp->config->channels[0].callback(pwmp);
 80010fc:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80010fe:	0760      	lsls	r0, r4, #29
 8001100:	d504      	bpl.n	800110c <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
 8001102:	686b      	ldr	r3, [r5, #4]
 8001104:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8001106:	b10b      	cbz	r3, 800110c <pwm_lld_serve_interrupt+0x2c>
    pwmp->config->channels[1].callback(pwmp);
 8001108:	4628      	mov	r0, r5
 800110a:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 800110c:	0721      	lsls	r1, r4, #28
 800110e:	d504      	bpl.n	800111a <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
 8001110:	686b      	ldr	r3, [r5, #4]
 8001112:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8001114:	b10b      	cbz	r3, 800111a <pwm_lld_serve_interrupt+0x3a>
    pwmp->config->channels[2].callback(pwmp);
 8001116:	4628      	mov	r0, r5
 8001118:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 800111a:	06e2      	lsls	r2, r4, #27
 800111c:	d504      	bpl.n	8001128 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
 800111e:	686b      	ldr	r3, [r5, #4]
 8001120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8001122:	b10b      	cbz	r3, 8001128 <pwm_lld_serve_interrupt+0x48>
    pwmp->config->channels[3].callback(pwmp);
 8001124:	4628      	mov	r0, r5
 8001126:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 8001128:	07e3      	lsls	r3, r4, #31
 800112a:	d506      	bpl.n	800113a <pwm_lld_serve_interrupt+0x5a>
 800112c:	686b      	ldr	r3, [r5, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	b11b      	cbz	r3, 800113a <pwm_lld_serve_interrupt+0x5a>
    pwmp->config->callback(pwmp);
 8001132:	4628      	mov	r0, r5
}
 8001134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pwmp->config->callback(pwmp);
 8001138:	4718      	bx	r3
 800113a:	bd70      	pop	{r4, r5, r6, pc}
 800113c:	0000      	movs	r0, r0
	...

08001140 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001144:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8001148:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800114a:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800114e:	2300      	movs	r3, #0
 8001150:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	0000      	movs	r0, r0
	...

08001160 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8001160:	b410      	push	{r4}
 8001162:	2320      	movs	r3, #32
 8001164:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8001168:	4c09      	ldr	r4, [pc, #36]	; (8001190 <chCoreAlloc+0x30>)
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <chCoreAlloc+0x34>)
 800116c:	6822      	ldr	r2, [r4, #0]
 800116e:	6819      	ldr	r1, [r3, #0]
  size = MEM_ALIGN_NEXT(size);
 8001170:	1dc3      	adds	r3, r0, #7
 8001172:	f023 0307 	bic.w	r3, r3, #7
  if ((size_t)(endmem - nextmem) < size) {
 8001176:	1a89      	subs	r1, r1, r2
 8001178:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800117a:	bf9d      	ittte	ls
 800117c:	189b      	addls	r3, r3, r2
 800117e:	6023      	strls	r3, [r4, #0]

  return p;
 8001180:	4610      	movls	r0, r2
    return NULL;
 8001182:	2000      	movhi	r0, #0
 8001184:	2300      	movs	r3, #0
 8001186:	f383 8811 	msr	BASEPRI, r3
}
 800118a:	bc10      	pop	{r4}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	200010fc 	.word	0x200010fc
 8001194:	20000e28 	.word	0x20000e28
	...

080011a0 <wakeup>:
 80011a0:	2320      	movs	r3, #32
 80011a2:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 80011a6:	7f03      	ldrb	r3, [r0, #28]
 80011a8:	2b07      	cmp	r3, #7
 80011aa:	d80e      	bhi.n	80011ca <wakeup+0x2a>
 80011ac:	e8df f003 	tbb	[pc, r3]
 80011b0:	230d0d27 	.word	0x230d0d27
 80011b4:	080d0408 	.word	0x080d0408
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 80011b8:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 80011ba:	6893      	ldr	r3, [r2, #8]
 80011bc:	3301      	adds	r3, #1
 80011be:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80011c0:	e890 000c 	ldmia.w	r0, {r2, r3}
 80011c4:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80011c6:	6802      	ldr	r2, [r0, #0]
 80011c8:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 80011ca:	b410      	push	{r4}
  tp->p_state = CH_STATE_READY;
 80011cc:	2200      	movs	r2, #0
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80011ce:	f04f 34ff 	mov.w	r4, #4294967295
 80011d2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <wakeup+0x68>)
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80011d6:	6204      	str	r4, [r0, #32]
  tp->p_state = CH_STATE_READY;
 80011d8:	7702      	strb	r2, [r0, #28]
    cp = cp->p_next;
 80011da:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	428a      	cmp	r2, r1
 80011e0:	d2fb      	bcs.n	80011da <wakeup+0x3a>
  tp->p_prev = cp->p_prev;
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	2100      	movs	r1, #0
  tp->p_next = cp;
 80011e6:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 80011e8:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = tp;
 80011ea:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 80011ec:	6058      	str	r0, [r3, #4]
 80011ee:	f381 8811 	msr	BASEPRI, r1
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80011f2:	bc10      	pop	{r4}
 80011f4:	4770      	bx	lr
    *tp->p_u.wttrp = NULL;
 80011f6:	2200      	movs	r2, #0
 80011f8:	6a03      	ldr	r3, [r0, #32]
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	e7e5      	b.n	80011ca <wakeup+0x2a>
 80011fe:	2300      	movs	r3, #0
 8001200:	f383 8811 	msr	BASEPRI, r3
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20001410 	.word	0x20001410
 800120c:	00000000 	.word	0x00000000

08001210 <_idle_thread.lto_priv.49>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8001210:	e7fe      	b.n	8001210 <_idle_thread.lto_priv.49>
 8001212:	bf00      	nop
	...

08001220 <usart_init.lto_priv.50>:
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 8001220:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 8001224:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <usart_init.lto_priv.50+0x40>)
 8001226:	6808      	ldr	r0, [r1, #0]
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
 8001228:	b410      	push	{r4}
    u->BRR = STM32_PCLK2 / config->speed;
 800122a:	fbb2 f2f0 	udiv	r2, r2, r0
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 800122e:	2400      	movs	r4, #0
    u->BRR = STM32_PCLK2 / config->speed;
 8001230:	609a      	str	r2, [r3, #8]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8001232:	888a      	ldrh	r2, [r1, #4]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001234:	88c8      	ldrh	r0, [r1, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001236:	8909      	ldrh	r1, [r1, #8]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8001238:	f442 5204 	orr.w	r2, r2, #8448	; 0x2100
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800123c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8001240:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001244:	f041 0101 	orr.w	r1, r1, #1
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8001248:	b292      	uxth	r2, r2
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800124a:	b280      	uxth	r0, r0
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800124c:	b289      	uxth	r1, r1
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800124e:	6118      	str	r0, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001250:	6159      	str	r1, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8001252:	60da      	str	r2, [r3, #12]
  u->SR = 0;
 8001254:	601c      	str	r4, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8001256:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
}
 8001258:	bc10      	pop	{r4}
  (void)u->DR;  /* SR reset step 2.*/
 800125a:	685b      	ldr	r3, [r3, #4]
}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	02255100 	.word	0x02255100
	...

08001270 <pwm_lld_start>:
void pwm_lld_start(PWMDriver *pwmp) {
 8001270:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (pwmp->state == PWM_STOP) {
 8001272:	7803      	ldrb	r3, [r0, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d052      	beq.n	800131e <pwm_lld_start+0xae>
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 8001278:	2200      	movs	r2, #0
 800127a:	6983      	ldr	r3, [r0, #24]
 800127c:	601a      	str	r2, [r3, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 800127e:	635a      	str	r2, [r3, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8001280:	639a      	str	r2, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 8001282:	63da      	str	r2, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 8001284:	641a      	str	r2, [r3, #64]	; 0x40
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 8001286:	625a      	str	r2, [r3, #36]	; 0x24
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8001288:	6841      	ldr	r1, [r0, #4]
 800128a:	6942      	ldr	r2, [r0, #20]
 800128c:	680d      	ldr	r5, [r1, #0]
  pwmp->tim->ARR  = pwmp->period - 1;
 800128e:	6884      	ldr	r4, [r0, #8]
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8001290:	fbb2 f0f5 	udiv	r0, r2, r5
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001294:	68ca      	ldr	r2, [r1, #12]
  pwmp->tim->CR2  = pwmp->config->cr2;
 8001296:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001298:	f002 020f 	and.w	r2, r2, #15
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 800129c:	3801      	subs	r0, #1
  pwmp->tim->ARR  = pwmp->period - 1;
 800129e:	3c01      	subs	r4, #1
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 80012a0:	2a01      	cmp	r2, #1
  pwmp->tim->PSC  = psc;
 80012a2:	6298      	str	r0, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 80012a4:	62dc      	str	r4, [r3, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 80012a6:	605d      	str	r5, [r3, #4]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 80012a8:	d037      	beq.n	800131a <pwm_lld_start+0xaa>
 80012aa:	2a02      	cmp	r2, #2
 80012ac:	d133      	bne.n	8001316 <pwm_lld_start+0xa6>
    ccer |= STM32_TIM_CCER_CC1E;
 80012ae:	f042 0201 	orr.w	r2, r2, #1
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 80012b2:	6948      	ldr	r0, [r1, #20]
 80012b4:	f000 000f 	and.w	r0, r0, #15
 80012b8:	2801      	cmp	r0, #1
 80012ba:	d029      	beq.n	8001310 <pwm_lld_start+0xa0>
 80012bc:	2802      	cmp	r0, #2
 80012be:	d025      	beq.n	800130c <pwm_lld_start+0x9c>
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 80012c0:	69c8      	ldr	r0, [r1, #28]
 80012c2:	f000 000f 	and.w	r0, r0, #15
 80012c6:	2801      	cmp	r0, #1
 80012c8:	d01d      	beq.n	8001306 <pwm_lld_start+0x96>
 80012ca:	2802      	cmp	r0, #2
 80012cc:	d019      	beq.n	8001302 <pwm_lld_start+0x92>
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 80012ce:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80012d0:	f000 000f 	and.w	r0, r0, #15
 80012d4:	2801      	cmp	r0, #1
 80012d6:	d003      	beq.n	80012e0 <pwm_lld_start+0x70>
 80012d8:	2802      	cmp	r0, #2
 80012da:	d103      	bne.n	80012e4 <pwm_lld_start+0x74>
    ccer |= STM32_TIM_CCER_CC4P;
 80012dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    ccer |= STM32_TIM_CCER_CC4E;
 80012e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 80012e4:	2601      	movs	r6, #1
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 80012e6:	2500      	movs	r5, #0
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 80012e8:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 80012ec:	2085      	movs	r0, #133	; 0x85
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 80012ee:	6b09      	ldr	r1, [r1, #48]	; 0x30
  pwmp->tim->CCER  = ccer;
 80012f0:	621a      	str	r2, [r3, #32]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 80012f2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 80012f6:	615e      	str	r6, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 80012f8:	611d      	str	r5, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 80012fa:	60d9      	str	r1, [r3, #12]
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 80012fc:	645c      	str	r4, [r3, #68]	; 0x44
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 80012fe:	6018      	str	r0, [r3, #0]
 8001300:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccer |= STM32_TIM_CCER_CC3P;
 8001302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    ccer |= STM32_TIM_CCER_CC3E;
 8001306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800130a:	e7e0      	b.n	80012ce <pwm_lld_start+0x5e>
    ccer |= STM32_TIM_CCER_CC2P;
 800130c:	f042 0220 	orr.w	r2, r2, #32
    ccer |= STM32_TIM_CCER_CC2E;
 8001310:	f042 0210 	orr.w	r2, r2, #16
 8001314:	e7d4      	b.n	80012c0 <pwm_lld_start+0x50>
  ccer = 0;
 8001316:	2200      	movs	r2, #0
 8001318:	e7cb      	b.n	80012b2 <pwm_lld_start+0x42>
 800131a:	2200      	movs	r2, #0
 800131c:	e7c7      	b.n	80012ae <pwm_lld_start+0x3e>
    if (&PWMD1 == pwmp) {
 800131e:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <pwm_lld_start+0x134>)
 8001320:	4298      	cmp	r0, r3
 8001322:	d008      	beq.n	8001336 <pwm_lld_start+0xc6>
    if (&PWMD3 == pwmp) {
 8001324:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <pwm_lld_start+0x138>)
 8001326:	4298      	cmp	r0, r3
 8001328:	d025      	beq.n	8001376 <pwm_lld_start+0x106>
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 800132a:	f646 0268 	movw	r2, #26728	; 0x6868
 800132e:	6983      	ldr	r3, [r0, #24]
 8001330:	619a      	str	r2, [r3, #24]
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 8001332:	61da      	str	r2, [r3, #28]
 8001334:	e7a8      	b.n	8001288 <pwm_lld_start+0x18>

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001336:	2570      	movs	r5, #112	; 0x70
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001338:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800133c:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
      rccResetTIM1();
 8001340:	f04f 0e00 	mov.w	lr, #0
      rccEnableTIM1(FALSE);
 8001344:	4a19      	ldr	r2, [pc, #100]	; (80013ac <pwm_lld_start+0x13c>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <pwm_lld_start+0x140>)
 8001348:	6991      	ldr	r1, [r2, #24]
      pwmp->clock = STM32_TIMCLK2;
 800134a:	4f1a      	ldr	r7, [pc, #104]	; (80013b4 <pwm_lld_start+0x144>)
      rccEnableTIM1(FALSE);
 800134c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001350:	6191      	str	r1, [r2, #24]
      rccResetTIM1();
 8001352:	68d1      	ldr	r1, [r2, #12]
 8001354:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001358:	60d1      	str	r1, [r2, #12]
 800135a:	f8c2 e00c 	str.w	lr, [r2, #12]
 800135e:	f883 5319 	strb.w	r5, [r3, #793]	; 0x319
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001362:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001366:	601e      	str	r6, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001368:	f883 531b 	strb.w	r5, [r3, #795]	; 0x31b
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800136c:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001370:	601c      	str	r4, [r3, #0]
      pwmp->clock = STM32_TIMCLK2;
 8001372:	6147      	str	r7, [r0, #20]
 8001374:	e7d6      	b.n	8001324 <pwm_lld_start+0xb4>
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001376:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
      rccResetTIM3();
 800137a:	2700      	movs	r7, #0
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800137c:	2670      	movs	r6, #112	; 0x70
      rccEnableTIM3(FALSE);
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <pwm_lld_start+0x13c>)
 8001380:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <pwm_lld_start+0x140>)
 8001382:	69d9      	ldr	r1, [r3, #28]
      pwmp->clock = STM32_TIMCLK1;
 8001384:	4d0b      	ldr	r5, [pc, #44]	; (80013b4 <pwm_lld_start+0x144>)
      rccEnableTIM3(FALSE);
 8001386:	f041 0102 	orr.w	r1, r1, #2
 800138a:	61d9      	str	r1, [r3, #28]
      rccResetTIM3();
 800138c:	6919      	ldr	r1, [r3, #16]
 800138e:	f041 0102 	orr.w	r1, r1, #2
 8001392:	6119      	str	r1, [r3, #16]
 8001394:	611f      	str	r7, [r3, #16]
 8001396:	f882 631d 	strb.w	r6, [r2, #797]	; 0x31d
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800139a:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800139e:	6014      	str	r4, [r2, #0]
      pwmp->clock = STM32_TIMCLK1;
 80013a0:	6145      	str	r5, [r0, #20]
 80013a2:	e7c2      	b.n	800132a <pwm_lld_start+0xba>
 80013a4:	20000c48 	.word	0x20000c48
 80013a8:	20000c64 	.word	0x20000c64
 80013ac:	40021000 	.word	0x40021000
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	044aa200 	.word	0x044aa200
	...

080013c0 <_port_irq_epilogue>:
 80013c0:	2320      	movs	r3, #32
 80013c2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <_port_irq_epilogue+0x4c>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80013ce:	d102      	bne.n	80013d6 <_port_irq_epilogue+0x16>
 80013d0:	f383 8811 	msr	BASEPRI, r3
 80013d4:	4770      	bx	lr
void _port_irq_epilogue(void) {
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80013da:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 80013de:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
 80013e2:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
 80013e6:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80013ea:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 80013ee:	4a08      	ldr	r2, [pc, #32]	; (8001410 <_port_irq_epilogue+0x50>)
 80013f0:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 80013f2:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 80013f4:	6889      	ldr	r1, [r1, #8]
 80013f6:	6892      	ldr	r2, [r2, #8]
 80013f8:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80013fa:	bf8c      	ite	hi
 80013fc:	4a05      	ldrhi	r2, [pc, #20]	; (8001414 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80013fe:	4a06      	ldrls	r2, [pc, #24]	; (8001418 <_port_irq_epilogue+0x58>)
 8001400:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00
 8001410:	20001410 	.word	0x20001410
 8001414:	08000251 	.word	0x08000251
 8001418:	08000254 	.word	0x08000254
 800141c:	00000000 	.word	0x00000000

08001420 <VectorB4>:
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 8001420:	b508      	push	{r3, lr}
  pwm_lld_serve_interrupt(&PWMD3);
 8001422:	4803      	ldr	r0, [pc, #12]	; (8001430 <VectorB4+0x10>)
 8001424:	f7ff fe5c 	bl	80010e0 <pwm_lld_serve_interrupt>
}
 8001428:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800142c:	f7ff bfc8 	b.w	80013c0 <_port_irq_epilogue>
 8001430:	20000c64 	.word	0x20000c64
	...

08001440 <VectorA4>:
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8001440:	b508      	push	{r3, lr}
  pwm_lld_serve_interrupt(&PWMD1);
 8001442:	4803      	ldr	r0, [pc, #12]	; (8001450 <VectorA4+0x10>)
 8001444:	f7ff fe4c 	bl	80010e0 <pwm_lld_serve_interrupt>
}
 8001448:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800144c:	f7ff bfb8 	b.w	80013c0 <_port_irq_epilogue>
 8001450:	20000c48 	.word	0x20000c48
	...

08001460 <VectorAC>:
 8001460:	f7ff bfee 	b.w	8001440 <VectorA4>
	...

08001470 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8001474:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001478:	6923      	ldr	r3, [r4, #16]
 800147a:	079b      	lsls	r3, r3, #30
 800147c:	d403      	bmi.n	8001486 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 800147e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 8001482:	f7ff bf9d 	b.w	80013c0 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
 8001486:	2700      	movs	r7, #0
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001488:	2520      	movs	r5, #32
 800148a:	6127      	str	r7, [r4, #16]
 800148c:	f385 8811 	msr	BASEPRI, r5
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8001490:	4e1e      	ldr	r6, [pc, #120]	; (800150c <VectorB0+0x9c>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001492:	6a60      	ldr	r0, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8001494:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
  vtp = ch.vtlist.vt_next;
 8001498:	69f3      	ldr	r3, [r6, #28]
 800149a:	b280      	uxth	r0, r0
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 800149c:	eba0 010e 	sub.w	r1, r0, lr
 80014a0:	891a      	ldrh	r2, [r3, #8]
 80014a2:	b289      	uxth	r1, r1
 80014a4:	4291      	cmp	r1, r2
 80014a6:	f106 081c 	add.w	r8, r6, #28
 80014aa:	d31b      	bcc.n	80014e4 <VectorB0+0x74>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80014ac:	6819      	ldr	r1, [r3, #0]
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80014ae:	4472      	add	r2, lr
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 80014b0:	4541      	cmp	r1, r8
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80014b2:	84f2      	strh	r2, [r6, #38]	; 0x26
    fn = vtp->vt_func;
 80014b4:	68da      	ldr	r2, [r3, #12]
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80014b6:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 80014ba:	61f1      	str	r1, [r6, #28]
    vtp->vt_func = NULL;
 80014bc:	60df      	str	r7, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80014be:	bf08      	it	eq
 80014c0:	60e7      	streq	r7, [r4, #12]
 80014c2:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 80014c6:	6918      	ldr	r0, [r3, #16]
 80014c8:	4790      	blx	r2
 80014ca:	f385 8811 	msr	BASEPRI, r5
  return (systime_t)STM32_ST_TIM->CNT;
 80014ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80014d0:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 80014d4:	69f3      	ldr	r3, [r6, #28]
 80014d6:	b280      	uxth	r0, r0
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80014d8:	eba0 010e 	sub.w	r1, r0, lr
 80014dc:	891a      	ldrh	r2, [r3, #8]
 80014de:	b289      	uxth	r1, r1
 80014e0:	428a      	cmp	r2, r1
 80014e2:	d9e3      	bls.n	80014ac <VectorB0+0x3c>
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 80014e4:	4543      	cmp	r3, r8
 80014e6:	d00a      	beq.n	80014fe <VectorB0+0x8e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 80014e8:	4472      	add	r2, lr
 80014ea:	1a12      	subs	r2, r2, r0
 80014ec:	b292      	uxth	r2, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }
  port_timer_set_alarm(now + delta);
 80014ee:	2a02      	cmp	r2, #2
 80014f0:	bf2c      	ite	cs
 80014f2:	1882      	addcs	r2, r0, r2
 80014f4:	1c82      	addcc	r2, r0, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80014f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014fa:	b292      	uxth	r2, r2
 80014fc:	635a      	str	r2, [r3, #52]	; 0x34
 80014fe:	2300      	movs	r3, #0
 8001500:	f383 8811 	msr	BASEPRI, r3
}
 8001504:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 8001508:	f7ff bf5a 	b.w	80013c0 <_port_irq_epilogue>
 800150c:	20001410 	.word	0x20001410

08001510 <Vector84>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <Vector84+0x30>)
 8001512:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <Vector84+0x34>)
 8001514:	6819      	ldr	r1, [r3, #0]
 8001516:	6812      	ldr	r2, [r2, #0]
 8001518:	0e09      	lsrs	r1, r1, #24
 800151a:	f001 010e 	and.w	r1, r1, #14
 800151e:	4211      	tst	r1, r2
 8001520:	d00b      	beq.n	800153a <Vector84+0x2a>
 8001522:	4809      	ldr	r0, [pc, #36]	; (8001548 <Vector84+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8001524:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8001526:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001528:	060a      	lsls	r2, r1, #24
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	b10c      	cbz	r4, 8001532 <Vector84+0x22>
 800152e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001530:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8001532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001536:	f7ff bf43 	b.w	80013c0 <_port_irq_epilogue>
 800153a:	f7ff bf41 	b.w	80013c0 <_port_irq_epilogue>
 800153e:	bf00      	nop
 8001540:	40020000 	.word	0x40020000
 8001544:	40020080 	.word	0x40020080
 8001548:	20000dc8 	.word	0x20000dc8
 800154c:	00000000 	.word	0x00000000

08001550 <Vector80>:
  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <Vector80+0x30>)
 8001552:	4a0c      	ldr	r2, [pc, #48]	; (8001584 <Vector80+0x34>)
 8001554:	6819      	ldr	r1, [r3, #0]
 8001556:	6812      	ldr	r2, [r2, #0]
 8001558:	0d09      	lsrs	r1, r1, #20
 800155a:	f001 010e 	and.w	r1, r1, #14
 800155e:	4211      	tst	r1, r2
 8001560:	d00b      	beq.n	800157a <Vector80+0x2a>
 8001562:	4809      	ldr	r0, [pc, #36]	; (8001588 <Vector80+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8001564:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8001566:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001568:	050a      	lsls	r2, r1, #20
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	b10c      	cbz	r4, 8001572 <Vector80+0x22>
 800156e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001570:	47a0      	blx	r4
}
 8001572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001576:	f7ff bf23 	b.w	80013c0 <_port_irq_epilogue>
 800157a:	f7ff bf21 	b.w	80013c0 <_port_irq_epilogue>
 800157e:	bf00      	nop
 8001580:	40020000 	.word	0x40020000
 8001584:	4002006c 	.word	0x4002006c
 8001588:	20000dc8 	.word	0x20000dc8
 800158c:	00000000 	.word	0x00000000

08001590 <Vector7C>:
  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <Vector7C+0x30>)
 8001592:	4a0c      	ldr	r2, [pc, #48]	; (80015c4 <Vector7C+0x34>)
 8001594:	6819      	ldr	r1, [r3, #0]
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	0c09      	lsrs	r1, r1, #16
 800159a:	f001 010e 	and.w	r1, r1, #14
 800159e:	4211      	tst	r1, r2
 80015a0:	d00b      	beq.n	80015ba <Vector7C+0x2a>
 80015a2:	4809      	ldr	r0, [pc, #36]	; (80015c8 <Vector7C+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 80015a4:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM5);
 80015a6:	6a04      	ldr	r4, [r0, #32]
 80015a8:	040a      	lsls	r2, r1, #16
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	b10c      	cbz	r4, 80015b2 <Vector7C+0x22>
 80015ae:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80015b0:	47a0      	blx	r4
}
 80015b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80015b6:	f7ff bf03 	b.w	80013c0 <_port_irq_epilogue>
 80015ba:	f7ff bf01 	b.w	80013c0 <_port_irq_epilogue>
 80015be:	bf00      	nop
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020058 	.word	0x40020058
 80015c8:	20000dc8 	.word	0x20000dc8
 80015cc:	00000000 	.word	0x00000000

080015d0 <Vector78>:
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <Vector78+0x30>)
 80015d2:	4a0c      	ldr	r2, [pc, #48]	; (8001604 <Vector78+0x34>)
 80015d4:	6819      	ldr	r1, [r3, #0]
 80015d6:	6812      	ldr	r2, [r2, #0]
 80015d8:	0b09      	lsrs	r1, r1, #12
 80015da:	f001 010e 	and.w	r1, r1, #14
 80015de:	4211      	tst	r1, r2
 80015e0:	d00b      	beq.n	80015fa <Vector78+0x2a>
 80015e2:	4809      	ldr	r0, [pc, #36]	; (8001608 <Vector78+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 80015e4:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 80015e6:	6984      	ldr	r4, [r0, #24]
 80015e8:	030a      	lsls	r2, r1, #12
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	b10c      	cbz	r4, 80015f2 <Vector78+0x22>
 80015ee:	69c0      	ldr	r0, [r0, #28]
 80015f0:	47a0      	blx	r4
}
 80015f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80015f6:	f7ff bee3 	b.w	80013c0 <_port_irq_epilogue>
 80015fa:	f7ff bee1 	b.w	80013c0 <_port_irq_epilogue>
 80015fe:	bf00      	nop
 8001600:	40020000 	.word	0x40020000
 8001604:	40020044 	.word	0x40020044
 8001608:	20000dc8 	.word	0x20000dc8
 800160c:	00000000 	.word	0x00000000

08001610 <Vector74>:
  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <Vector74+0x30>)
 8001612:	4a0c      	ldr	r2, [pc, #48]	; (8001644 <Vector74+0x34>)
 8001614:	6819      	ldr	r1, [r3, #0]
 8001616:	6812      	ldr	r2, [r2, #0]
 8001618:	0a09      	lsrs	r1, r1, #8
 800161a:	f001 010e 	and.w	r1, r1, #14
 800161e:	4211      	tst	r1, r2
 8001620:	d00b      	beq.n	800163a <Vector74+0x2a>
 8001622:	4809      	ldr	r0, [pc, #36]	; (8001648 <Vector74+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8001624:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8001626:	6904      	ldr	r4, [r0, #16]
 8001628:	020a      	lsls	r2, r1, #8
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	b10c      	cbz	r4, 8001632 <Vector74+0x22>
 800162e:	6940      	ldr	r0, [r0, #20]
 8001630:	47a0      	blx	r4
}
 8001632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001636:	f7ff bec3 	b.w	80013c0 <_port_irq_epilogue>
 800163a:	f7ff bec1 	b.w	80013c0 <_port_irq_epilogue>
 800163e:	bf00      	nop
 8001640:	40020000 	.word	0x40020000
 8001644:	40020030 	.word	0x40020030
 8001648:	20000dc8 	.word	0x20000dc8
 800164c:	00000000 	.word	0x00000000

08001650 <Vector70>:
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <Vector70+0x30>)
 8001652:	4a0c      	ldr	r2, [pc, #48]	; (8001684 <Vector70+0x34>)
 8001654:	6819      	ldr	r1, [r3, #0]
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	0909      	lsrs	r1, r1, #4
 800165a:	f001 010e 	and.w	r1, r1, #14
 800165e:	4211      	tst	r1, r2
 8001660:	d00b      	beq.n	800167a <Vector70+0x2a>
 8001662:	4809      	ldr	r0, [pc, #36]	; (8001688 <Vector70+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8001664:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8001666:	6884      	ldr	r4, [r0, #8]
 8001668:	010a      	lsls	r2, r1, #4
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	b10c      	cbz	r4, 8001672 <Vector70+0x22>
 800166e:	68c0      	ldr	r0, [r0, #12]
 8001670:	47a0      	blx	r4
}
 8001672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001676:	f7ff bea3 	b.w	80013c0 <_port_irq_epilogue>
 800167a:	f7ff bea1 	b.w	80013c0 <_port_irq_epilogue>
 800167e:	bf00      	nop
 8001680:	40020000 	.word	0x40020000
 8001684:	4002001c 	.word	0x4002001c
 8001688:	20000dc8 	.word	0x20000dc8
 800168c:	00000000 	.word	0x00000000

08001690 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8001690:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <Vector6C+0x28>)
 8001694:	4a09      	ldr	r2, [pc, #36]	; (80016bc <Vector6C+0x2c>)
 8001696:	6819      	ldr	r1, [r3, #0]
 8001698:	6812      	ldr	r2, [r2, #0]
 800169a:	f001 010e 	and.w	r1, r1, #14
 800169e:	4211      	tst	r1, r2
 80016a0:	d005      	beq.n	80016ae <Vector6C+0x1e>
 80016a2:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <Vector6C+0x30>)
 80016a4:	6059      	str	r1, [r3, #4]
 80016a6:	6813      	ldr	r3, [r2, #0]
 80016a8:	b10b      	cbz	r3, 80016ae <Vector6C+0x1e>
 80016aa:	6850      	ldr	r0, [r2, #4]
 80016ac:	4798      	blx	r3
}
 80016ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80016b2:	f7ff be85 	b.w	80013c0 <_port_irq_epilogue>
 80016b6:	bf00      	nop
 80016b8:	40020000 	.word	0x40020000
 80016bc:	40020008 	.word	0x40020008
 80016c0:	20000dc8 	.word	0x20000dc8
	...

080016d0 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80016d0:	4b0e      	ldr	r3, [pc, #56]	; (800170c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80016d2:	4a0f      	ldr	r2, [pc, #60]	; (8001710 <chTMStopMeasurementX+0x40>)
 80016d4:	685b      	ldr	r3, [r3, #4]
  tmp->last = (now - tmp->last) - offset;
 80016d6:	6881      	ldr	r1, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80016d8:	6f12      	ldr	r2, [r2, #112]	; 0x70
  tmp->last = (now - tmp->last) - offset;
 80016da:	1a5b      	subs	r3, r3, r1
 80016dc:	1a9b      	subs	r3, r3, r2
  tmp->n++;
 80016de:	68c2      	ldr	r2, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80016e0:	b430      	push	{r4, r5}
  tmp->cumulative += (rttime_t)tmp->last;
 80016e2:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
 80016e6:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 80016e8:	3201      	adds	r2, #1
  tmp->cumulative += (rttime_t)tmp->last;
 80016ea:	18e4      	adds	r4, r4, r3
  tmp->n++;
 80016ec:	60c2      	str	r2, [r0, #12]
  if (tmp->last < tmp->best) {
 80016ee:	6802      	ldr	r2, [r0, #0]
  tmp->cumulative += (rttime_t)tmp->last;
 80016f0:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 80016f4:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 80016f6:	bf88      	it	hi
 80016f8:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 80016fa:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 80016fc:	e9c0 4504 	strd	r4, r5, [r0, #16]
}
 8001700:	bc30      	pop	{r4, r5}
  tmp->last = (now - tmp->last) - offset;
 8001702:	6083      	str	r3, [r0, #8]
    tmp->best = tmp->last;
 8001704:	bf38      	it	cc
 8001706:	6003      	strcc	r3, [r0, #0]
}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e0001000 	.word	0xe0001000
 8001710:	20001410 	.word	0x20001410
	...

08001720 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8001720:	b470      	push	{r4, r5, r6}
  currp->p_state = CH_STATE_CURRENT;
 8001722:	2601      	movs	r6, #1
  otp->p_state = CH_STATE_READY;
 8001724:	2500      	movs	r5, #0
  otp = currp;
 8001726:	4a0c      	ldr	r2, [pc, #48]	; (8001758 <chSchDoReschedule+0x38>)
  thread_t *tp = tqp->p_next;
 8001728:	6810      	ldr	r0, [r2, #0]
 800172a:	6994      	ldr	r4, [r2, #24]
  tqp->p_next = tp->p_next;
 800172c:	6803      	ldr	r3, [r0, #0]
  if (otp->p_prio == IDLEPRIO) {
 800172e:	68a1      	ldr	r1, [r4, #8]
 8001730:	6013      	str	r3, [r2, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001732:	605a      	str	r2, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
 8001734:	7706      	strb	r6, [r0, #28]
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001736:	6190      	str	r0, [r2, #24]
  otp->p_state = CH_STATE_READY;
 8001738:	7725      	strb	r5, [r4, #28]
 800173a:	e000      	b.n	800173e <chSchDoReschedule+0x1e>
 800173c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio > otp->p_prio);
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	4291      	cmp	r1, r2
 8001742:	d3fb      	bcc.n	800173c <chSchDoReschedule+0x1c>
  otp->p_prev = cp->p_prev;
 8001744:	685a      	ldr	r2, [r3, #4]
  chSysSwitch(currp, otp);
 8001746:	4621      	mov	r1, r4
  otp->p_next = cp;
 8001748:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
 800174a:	6062      	str	r2, [r4, #4]
  otp->p_prev->p_next = otp;
 800174c:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 800174e:	605c      	str	r4, [r3, #4]
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */
}
 8001750:	bc70      	pop	{r4, r5, r6}
  chSysSwitch(currp, otp);
 8001752:	f7fe bd6d 	b.w	8000230 <_port_switch>
 8001756:	bf00      	nop
 8001758:	20001410 	.word	0x20001410
 800175c:	00000000 	.word	0x00000000

08001760 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 8001760:	b430      	push	{r4, r5}
  currp->p_state = CH_STATE_CURRENT;
 8001762:	2501      	movs	r5, #1
  otp = currp;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <chSchGoSleepS+0x20>)
 8001766:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->p_next;
 8001768:	681a      	ldr	r2, [r3, #0]
  otp->p_state = newstate;
 800176a:	7708      	strb	r0, [r1, #28]
  tqp->p_next = tp->p_next;
 800176c:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
 800176e:	4610      	mov	r0, r2
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001770:	6063      	str	r3, [r4, #4]
  currp->p_state = CH_STATE_CURRENT;
 8001772:	7715      	strb	r5, [r2, #28]
  tqp->p_next = tp->p_next;
 8001774:	601c      	str	r4, [r3, #0]
}
 8001776:	bc30      	pop	{r4, r5}
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001778:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 800177a:	f7fe bd59 	b.w	8000230 <_port_switch>
 800177e:	bf00      	nop
 8001780:	20001410 	.word	0x20001410
	...

08001790 <chSchGoSleepTimeoutS>:
  if (TIME_INFINITE != time) {
 8001790:	f64f 73ff 	movw	r3, #65535	; 0xffff
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001794:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (TIME_INFINITE != time) {
 8001796:	4299      	cmp	r1, r3
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001798:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
 800179a:	d055      	beq.n	8001848 <chSchGoSleepTimeoutS+0xb8>
    chVTDoSetI(&vt, time, wakeup, currp);
 800179c:	4c4c      	ldr	r4, [pc, #304]	; (80018d0 <chSchGoSleepTimeoutS+0x140>)
  return (systime_t)STM32_ST_TIM->CNT;
 800179e:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80017a2:	4625      	mov	r5, r4
 80017a4:	4607      	mov	r7, r0
 80017a6:	f855 0f1c 	ldr.w	r0, [r5, #28]!
 80017aa:	f8de 2024 	ldr.w	r2, [lr, #36]	; 0x24
  vtp->vt_par = par;
 80017ae:	69a6      	ldr	r6, [r4, #24]
 80017b0:	2902      	cmp	r1, #2
  vtp->vt_func = vtfunc;
 80017b2:	4b48      	ldr	r3, [pc, #288]	; (80018d4 <chSchGoSleepTimeoutS+0x144>)
 80017b4:	bf38      	it	cc
 80017b6:	2102      	movcc	r1, #2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80017b8:	42a8      	cmp	r0, r5
  vtp->vt_par = par;
 80017ba:	9605      	str	r6, [sp, #20]
  vtp->vt_func = vtfunc;
 80017bc:	9304      	str	r3, [sp, #16]
 80017be:	b296      	uxth	r6, r2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80017c0:	d06e      	beq.n	80018a0 <chSchGoSleepTimeoutS+0x110>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.vt_next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.vt_lasttime + delay;
 80017c2:	f8b4 c026 	ldrh.w	ip, [r4, #38]	; 0x26

    if (delta < now - ch.vtlist.vt_lasttime) {
 80017c6:	b292      	uxth	r2, r2
    delta = now - ch.vtlist.vt_lasttime + delay;
 80017c8:	eba6 060c 	sub.w	r6, r6, ip
 80017cc:	198b      	adds	r3, r1, r6
    if (delta < now - ch.vtlist.vt_lasttime) {
 80017ce:	eba2 020c 	sub.w	r2, r2, ip
    delta = now - ch.vtlist.vt_lasttime + delay;
 80017d2:	b29b      	uxth	r3, r3
    if (delta < now - ch.vtlist.vt_lasttime) {
 80017d4:	4293      	cmp	r3, r2
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
 80017d6:	8902      	ldrh	r2, [r0, #8]
    if (delta < now - ch.vtlist.vt_lasttime) {
 80017d8:	db31      	blt.n	800183e <chSchGoSleepTimeoutS+0xae>
      p = p->vt_next;
    }
    else if (delta < p->vt_delta) {
 80017da:	4293      	cmp	r3, r2
 80017dc:	d33b      	bcc.n	8001856 <chSchGoSleepTimeoutS+0xc6>
  p = ch.vtlist.vt_next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
 80017de:	4293      	cmp	r3, r2
 80017e0:	d905      	bls.n	80017ee <chSchGoSleepTimeoutS+0x5e>
    delta -= p->vt_delta;
    p = p->vt_next;
 80017e2:	6800      	ldr	r0, [r0, #0]
    delta -= p->vt_delta;
 80017e4:	1a9b      	subs	r3, r3, r2
  while (p->vt_delta < delta) {
 80017e6:	8902      	ldrh	r2, [r0, #8]
    delta -= p->vt_delta;
 80017e8:	b29b      	uxth	r3, r3
  while (p->vt_delta < delta) {
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d3f9      	bcc.n	80017e2 <chSchGoSleepTimeoutS+0x52>
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
  ch.vtlist.vt_delta = (systime_t)-1;
 80017ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
  vtp->vt_prev = vtp->vt_next->vt_prev;
 80017f2:	6842      	ldr	r2, [r0, #4]
  vtp->vt_prev->vt_next = vtp;
 80017f4:	ae01      	add	r6, sp, #4
  vtp->vt_prev = vtp->vt_next->vt_prev;
 80017f6:	9202      	str	r2, [sp, #8]
  vtp->vt_next = p;
 80017f8:	9001      	str	r0, [sp, #4]
  vtp->vt_prev->vt_next = vtp;
 80017fa:	6016      	str	r6, [r2, #0]
  p->vt_prev = vtp;
 80017fc:	6046      	str	r6, [r0, #4]
  vtp->vt_delta = delta
 80017fe:	f8ad 300c 	strh.w	r3, [sp, #12]
  p->vt_delta -= delta;
 8001802:	8902      	ldrh	r2, [r0, #8]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	8103      	strh	r3, [r0, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001808:	84a1      	strh	r1, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 800180a:	4638      	mov	r0, r7
 800180c:	f7ff ffa8 	bl	8001760 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8001810:	9b04      	ldr	r3, [sp, #16]
 8001812:	b183      	cbz	r3, 8001836 <chSchGoSleepTimeoutS+0xa6>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8001814:	69e3      	ldr	r3, [r4, #28]
 8001816:	42b3      	cmp	r3, r6
 8001818:	d023      	beq.n	8001862 <chSchGoSleepTimeoutS+0xd2>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
    vtp->vt_func = NULL;
 800181a:	2100      	movs	r1, #0
    vtp->vt_prev->vt_next = vtp->vt_next;
 800181c:	9a02      	ldr	r2, [sp, #8]
 800181e:	9b01      	ldr	r3, [sp, #4]
 8001820:	6013      	str	r3, [r2, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001822:	9b01      	ldr	r3, [sp, #4]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8001824:	42ab      	cmp	r3, r5
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001826:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 8001828:	9104      	str	r1, [sp, #16]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 800182a:	d004      	beq.n	8001836 <chSchGoSleepTimeoutS+0xa6>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 800182c:	891a      	ldrh	r2, [r3, #8]
 800182e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8001832:	440a      	add	r2, r1
 8001834:	811a      	strh	r2, [r3, #8]
  return currp->p_u.rdymsg;
 8001836:	69a3      	ldr	r3, [r4, #24]
}
 8001838:	6a18      	ldr	r0, [r3, #32]
 800183a:	b007      	add	sp, #28
 800183c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      p = p->vt_next;
 800183e:	6800      	ldr	r0, [r0, #0]
      delta -= p->vt_delta;
 8001840:	1a9b      	subs	r3, r3, r2
 8001842:	b29b      	uxth	r3, r3
 8001844:	8902      	ldrh	r2, [r0, #8]
 8001846:	e7ca      	b.n	80017de <chSchGoSleepTimeoutS+0x4e>
    chSchGoSleepS(newstate);
 8001848:	f7ff ff8a 	bl	8001760 <chSchGoSleepS>
 800184c:	4c20      	ldr	r4, [pc, #128]	; (80018d0 <chSchGoSleepTimeoutS+0x140>)
  return currp->p_u.rdymsg;
 800184e:	69a3      	ldr	r3, [r4, #24]
}
 8001850:	6a18      	ldr	r0, [r3, #32]
 8001852:	b007      	add	sp, #28
 8001854:	bdf0      	pop	{r4, r5, r6, r7, pc}
      port_timer_set_alarm(ch.vtlist.vt_lasttime + delta);
 8001856:	eb0c 0103 	add.w	r1, ip, r3
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800185a:	b289      	uxth	r1, r1
 800185c:	f8ce 1034 	str.w	r1, [lr, #52]	; 0x34
 8001860:	e7bd      	b.n	80017de <chSchGoSleepTimeoutS+0x4e>
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8001862:	2300      	movs	r3, #0
  ch.vtlist.vt_next = vtp->vt_next;
 8001864:	9e01      	ldr	r6, [sp, #4]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001866:	42ae      	cmp	r6, r5
  ch.vtlist.vt_next = vtp->vt_next;
 8001868:	61e6      	str	r6, [r4, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800186a:	6075      	str	r5, [r6, #4]
  vtp->vt_func = NULL;
 800186c:	9304      	str	r3, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800186e:	d02a      	beq.n	80018c6 <chSchGoSleepTimeoutS+0x136>
  return (systime_t)STM32_ST_TIM->CNT;
 8001870:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001874:	6a42      	ldr	r2, [r0, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001876:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001878:	8933      	ldrh	r3, [r6, #8]
 800187a:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 800187e:	b292      	uxth	r2, r2
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001880:	1a51      	subs	r1, r2, r1
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001882:	442b      	add	r3, r5
 8001884:	b29b      	uxth	r3, r3
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001886:	b289      	uxth	r1, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8001888:	428b      	cmp	r3, r1
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 800188a:	8133      	strh	r3, [r6, #8]
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 800188c:	d9d3      	bls.n	8001836 <chSchGoSleepTimeoutS+0xa6>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 800188e:	1a5b      	subs	r3, r3, r1
 8001890:	b29b      	uxth	r3, r3
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 8001892:	2b02      	cmp	r3, #2
 8001894:	bf2c      	ite	cs
 8001896:	18d3      	addcs	r3, r2, r3
 8001898:	1c93      	addcc	r3, r2, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800189a:	b29b      	uxth	r3, r3
 800189c:	6343      	str	r3, [r0, #52]	; 0x34
 800189e:	e7ca      	b.n	8001836 <chSchGoSleepTimeoutS+0xa6>
  STM32_ST_TIM->SR     = 0;
 80018a0:	2000      	movs	r0, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80018a2:	2202      	movs	r2, #2
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 80018a4:	198b      	adds	r3, r1, r6
      ch.vtlist.vt_lasttime = now;
 80018a6:	84e6      	strh	r6, [r4, #38]	; 0x26
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80018a8:	b29b      	uxth	r3, r3
      ch.vtlist.vt_next = vtp;
 80018aa:	ae01      	add	r6, sp, #4
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 80018ac:	9501      	str	r5, [sp, #4]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80018ae:	9502      	str	r5, [sp, #8]
      vtp->vt_delta = delay;
 80018b0:	f8ad 100c 	strh.w	r1, [sp, #12]
      ch.vtlist.vt_next = vtp;
 80018b4:	61e6      	str	r6, [r4, #28]
      ch.vtlist.vt_prev = vtp;
 80018b6:	6226      	str	r6, [r4, #32]
 80018b8:	f8ce 3034 	str.w	r3, [lr, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80018bc:	f8ce 0010 	str.w	r0, [lr, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80018c0:	f8ce 200c 	str.w	r2, [lr, #12]
 80018c4:	e7a1      	b.n	800180a <chSchGoSleepTimeoutS+0x7a>
  STM32_ST_TIM->DIER = 0;
 80018c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ca:	60d3      	str	r3, [r2, #12]
 80018cc:	e7b3      	b.n	8001836 <chSchGoSleepTimeoutS+0xa6>
 80018ce:	bf00      	nop
 80018d0:	20001410 	.word	0x20001410
 80018d4:	080011a1 	.word	0x080011a1
	...

080018e0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 80018e0:	b161      	cbz	r1, 80018fc <chThdEnqueueTimeoutS+0x1c>
 80018e2:	4602      	mov	r2, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 80018e6:	b410      	push	{r4}
  queue_insert(currp, tqp);
 80018e8:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80018ea:	2004      	movs	r0, #4
  tp->p_next = (thread_t *)tqp;
 80018ec:	601a      	str	r2, [r3, #0]
  tp->p_prev = tqp->p_prev;
 80018ee:	6854      	ldr	r4, [r2, #4]
 80018f0:	605c      	str	r4, [r3, #4]
  tp->p_prev->p_next = tp;
 80018f2:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 80018f4:	6053      	str	r3, [r2, #4]
}
 80018f6:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80018f8:	f7ff bf4a 	b.w	8001790 <chSchGoSleepTimeoutS>
}
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20001410 	.word	0x20001410
	...

08001910 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8001910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001914:	b083      	sub	sp, #12
 8001916:	4604      	mov	r4, r0
 8001918:	460d      	mov	r5, r1
 800191a:	4616      	mov	r6, r2
 800191c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800191e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001922:	f04f 0920 	mov.w	r9, #32
 8001926:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 800192a:	2700      	movs	r7, #0
 800192c:	46ba      	mov	sl, r7
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800192e:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001930:	f105 0b01 	add.w	fp, r5, #1
    while (chOQIsFullI(oqp)) {
 8001934:	b303      	cbz	r3, 8001978 <chOQWriteTimeout+0x68>
    *oqp->q_wrptr++ = *bp++;
 8001936:	6961      	ldr	r1, [r4, #20]
    oqp->q_counter--;
 8001938:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800193a:	1c48      	adds	r0, r1, #1
    oqp->q_counter--;
 800193c:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 800193e:	6160      	str	r0, [r4, #20]
    oqp->q_counter--;
 8001940:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001942:	782b      	ldrb	r3, [r5, #0]
 8001944:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8001946:	6923      	ldr	r3, [r4, #16]
 8001948:	6961      	ldr	r1, [r4, #20]
 800194a:	4299      	cmp	r1, r3
      oqp->q_wrptr = oqp->q_buffer;
 800194c:	bf24      	itt	cs
 800194e:	68e3      	ldrcs	r3, [r4, #12]
 8001950:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 8001952:	f1b8 0f00 	cmp.w	r8, #0
 8001956:	d001      	beq.n	800195c <chOQWriteTimeout+0x4c>
      nfy(oqp);
 8001958:	4620      	mov	r0, r4
 800195a:	47c0      	blx	r8
 800195c:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 8001960:	3e01      	subs	r6, #1
    w++;
 8001962:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 8001966:	d011      	beq.n	800198c <chOQWriteTimeout+0x7c>
 8001968:	f389 8811 	msr	BASEPRI, r9
    *oqp->q_wrptr++ = *bp++;
 800196c:	465d      	mov	r5, fp
 800196e:	68a3      	ldr	r3, [r4, #8]
 8001970:	f105 0b01 	add.w	fp, r5, #1
    while (chOQIsFullI(oqp)) {
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1de      	bne.n	8001936 <chOQWriteTimeout+0x26>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8001978:	9901      	ldr	r1, [sp, #4]
 800197a:	4620      	mov	r0, r4
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	f7ff ffaf 	bl	80018e0 <chThdEnqueueTimeoutS>
 8001982:	9b00      	ldr	r3, [sp, #0]
 8001984:	2800      	cmp	r0, #0
 8001986:	d0d2      	beq.n	800192e <chOQWriteTimeout+0x1e>
 8001988:	f383 8811 	msr	BASEPRI, r3
      return w;
    }
    chSysLock();
  }
}
 800198c:	4638      	mov	r0, r7
 800198e:	b003      	add	sp, #12
 8001990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080019a0 <writet.lto_priv.32>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80019a0:	3030      	adds	r0, #48	; 0x30
 80019a2:	f7ff bfb5 	b.w	8001910 <chOQWriteTimeout>
 80019a6:	bf00      	nop
	...

080019b0 <write.lto_priv.26>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80019b0:	3030      	adds	r0, #48	; 0x30
 80019b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019b6:	f7ff bfab 	b.w	8001910 <chOQWriteTimeout>
 80019ba:	bf00      	nop
 80019bc:	0000      	movs	r0, r0
	...

080019c0 <chOQPutTimeout>:
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 80019c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c2:	4604      	mov	r4, r0
 80019c4:	460f      	mov	r7, r1
 80019c6:	4616      	mov	r6, r2
 80019c8:	2320      	movs	r3, #32
 80019ca:	f383 8811 	msr	BASEPRI, r3
 80019ce:	e005      	b.n	80019dc <chOQPutTimeout+0x1c>
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 80019d0:	4631      	mov	r1, r6
 80019d2:	4620      	mov	r0, r4
 80019d4:	f7ff ff84 	bl	80018e0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 80019d8:	2800      	cmp	r0, #0
 80019da:	db17      	blt.n	8001a0c <chOQPutTimeout+0x4c>
 80019dc:	68a5      	ldr	r5, [r4, #8]
  while (chOQIsFullI(oqp)) {
 80019de:	2d00      	cmp	r5, #0
 80019e0:	d0f6      	beq.n	80019d0 <chOQPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 80019e2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 80019e4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80019e6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 80019e8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 80019ea:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 80019ec:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80019ee:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80019f0:	6923      	ldr	r3, [r4, #16]
 80019f2:	6962      	ldr	r2, [r4, #20]
 80019f4:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 80019f6:	bf24      	itt	cs
 80019f8:	68e3      	ldrcs	r3, [r4, #12]
 80019fa:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 80019fc:	69e3      	ldr	r3, [r4, #28]
 80019fe:	b10b      	cbz	r3, 8001a04 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 8001a00:	4620      	mov	r0, r4
 8001a02:	4798      	blx	r3
 8001a04:	2000      	movs	r0, #0
 8001a06:	f380 8811 	msr	BASEPRI, r0
}
 8001a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a0c:	f385 8811 	msr	BASEPRI, r5
 8001a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a12:	bf00      	nop
	...

08001a20 <putt.lto_priv.30>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001a20:	3030      	adds	r0, #48	; 0x30
 8001a22:	f7ff bfcd 	b.w	80019c0 <chOQPutTimeout>
 8001a26:	bf00      	nop
	...

08001a30 <put.lto_priv.28>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001a30:	3030      	adds	r0, #48	; 0x30
 8001a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a36:	f7ff bfc3 	b.w	80019c0 <chOQPutTimeout>
 8001a3a:	bf00      	nop
 8001a3c:	0000      	movs	r0, r0
	...

08001a40 <chIQReadTimeout>:
                       size_t n, systime_t timeout) {
 8001a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a44:	4604      	mov	r4, r0
 8001a46:	b083      	sub	sp, #12
 8001a48:	4689      	mov	r9, r1
 8001a4a:	4693      	mov	fp, r2
 8001a4c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 8001a4e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001a52:	2720      	movs	r7, #32
 8001a54:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8001a58:	2600      	movs	r6, #0
 8001a5a:	46b2      	mov	sl, r6
 8001a5c:	9701      	str	r7, [sp, #4]
    if (nfy != NULL) {
 8001a5e:	f1b8 0f00 	cmp.w	r8, #0
 8001a62:	d007      	beq.n	8001a74 <chIQReadTimeout+0x34>
      nfy(iqp);
 8001a64:	4620      	mov	r0, r4
 8001a66:	47c0      	blx	r8
 8001a68:	e004      	b.n	8001a74 <chIQReadTimeout+0x34>
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	f7ff ff37 	bl	80018e0 <chThdEnqueueTimeoutS>
 8001a72:	b9d0      	cbnz	r0, 8001aaa <chIQReadTimeout+0x6a>
  return (bool)(chQSpaceI(iqp) == 0U);
 8001a74:	68a7      	ldr	r7, [r4, #8]
    while (chIQIsEmptyI(iqp)) {
 8001a76:	2f00      	cmp	r7, #0
 8001a78:	d0f7      	beq.n	8001a6a <chIQReadTimeout+0x2a>
    *bp++ = *iqp->q_rdptr++;
 8001a7a:	69a2      	ldr	r2, [r4, #24]
    iqp->q_counter--;
 8001a7c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001a7e:	1c51      	adds	r1, r2, #1
    iqp->q_counter--;
 8001a80:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 8001a82:	61a1      	str	r1, [r4, #24]
    iqp->q_counter--;
 8001a84:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001a86:	7813      	ldrb	r3, [r2, #0]
 8001a88:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 8001a8c:	6923      	ldr	r3, [r4, #16]
 8001a8e:	69a2      	ldr	r2, [r4, #24]
 8001a90:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8001a92:	bf24      	itt	cs
 8001a94:	68e3      	ldrcs	r3, [r4, #12]
 8001a96:	61a3      	strcs	r3, [r4, #24]
 8001a98:	f38a 8811 	msr	BASEPRI, sl
    r++;
 8001a9c:	3601      	adds	r6, #1
    if (--n == 0U) {
 8001a9e:	45b3      	cmp	fp, r6
 8001aa0:	d005      	beq.n	8001aae <chIQReadTimeout+0x6e>
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	f383 8811 	msr	BASEPRI, r3
 8001aa8:	e7d9      	b.n	8001a5e <chIQReadTimeout+0x1e>
 8001aaa:	f387 8811 	msr	BASEPRI, r7
}
 8001aae:	4630      	mov	r0, r6
 8001ab0:	b003      	add	sp, #12
 8001ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ab6:	bf00      	nop
	...

08001ac0 <readt.lto_priv.33>:
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8001ac0:	300c      	adds	r0, #12
 8001ac2:	f7ff bfbd 	b.w	8001a40 <chIQReadTimeout>
 8001ac6:	bf00      	nop
	...

08001ad0 <read.lto_priv.27>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8001ad0:	300c      	adds	r0, #12
 8001ad2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ad6:	f7ff bfb3 	b.w	8001a40 <chIQReadTimeout>
 8001ada:	bf00      	nop
 8001adc:	0000      	movs	r0, r0
	...

08001ae0 <chIQGetTimeout>:
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8001ae0:	b570      	push	{r4, r5, r6, lr}
 8001ae2:	2320      	movs	r3, #32
 8001ae4:	460e      	mov	r6, r1
 8001ae6:	4604      	mov	r4, r0
 8001ae8:	f383 8811 	msr	BASEPRI, r3
  if (iqp->q_notify != NULL) {
 8001aec:	69c3      	ldr	r3, [r0, #28]
 8001aee:	b13b      	cbz	r3, 8001b00 <chIQGetTimeout+0x20>
    iqp->q_notify(iqp);
 8001af0:	4798      	blx	r3
 8001af2:	e005      	b.n	8001b00 <chIQGetTimeout+0x20>
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8001af4:	4631      	mov	r1, r6
 8001af6:	4620      	mov	r0, r4
 8001af8:	f7ff fef2 	bl	80018e0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8001afc:	2800      	cmp	r0, #0
 8001afe:	db13      	blt.n	8001b28 <chIQGetTimeout+0x48>
 8001b00:	68a5      	ldr	r5, [r4, #8]
  while (chIQIsEmptyI(iqp)) {
 8001b02:	2d00      	cmp	r5, #0
 8001b04:	d0f6      	beq.n	8001af4 <chIQGetTimeout+0x14>
  b = *iqp->q_rdptr++;
 8001b06:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8001b08:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001b0a:	6925      	ldr	r5, [r4, #16]
  b = *iqp->q_rdptr++;
 8001b0c:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8001b0e:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8001b10:	42aa      	cmp	r2, r5
  iqp->q_counter--;
 8001b12:	60a3      	str	r3, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer;
 8001b14:	bf28      	it	cs
 8001b16:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 8001b18:	61a2      	str	r2, [r4, #24]
 8001b1a:	7808      	ldrb	r0, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8001b1c:	bf28      	it	cs
 8001b1e:	61a3      	strcs	r3, [r4, #24]
 8001b20:	2300      	movs	r3, #0
 8001b22:	f383 8811 	msr	BASEPRI, r3
}
 8001b26:	bd70      	pop	{r4, r5, r6, pc}
 8001b28:	f385 8811 	msr	BASEPRI, r5
 8001b2c:	bd70      	pop	{r4, r5, r6, pc}
 8001b2e:	bf00      	nop

08001b30 <gett.lto_priv.31>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001b30:	300c      	adds	r0, #12
 8001b32:	f7ff bfd5 	b.w	8001ae0 <chIQGetTimeout>
 8001b36:	bf00      	nop
	...

08001b40 <get.lto_priv.29>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001b40:	300c      	adds	r0, #12
 8001b42:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b46:	f7ff bfcb 	b.w	8001ae0 <chIQGetTimeout>
 8001b4a:	bf00      	nop
 8001b4c:	0000      	movs	r0, r0
	...

08001b50 <chThdSleep>:
void chThdSleep(systime_t time) {
 8001b50:	b508      	push	{r3, lr}
 8001b52:	4601      	mov	r1, r0
 8001b54:	2320      	movs	r3, #32
 8001b56:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8001b5a:	2008      	movs	r0, #8
 8001b5c:	f7ff fe18 	bl	8001790 <chSchGoSleepTimeoutS>
 8001b60:	2300      	movs	r3, #0
 8001b62:	f383 8811 	msr	BASEPRI, r3
 8001b66:	bd08      	pop	{r3, pc}
	...

08001b70 <chSchReadyI>:
  tp->p_state = CH_STATE_READY;
 8001b70:	2200      	movs	r2, #0
thread_t *chSchReadyI(thread_t *tp) {
 8001b72:	b410      	push	{r4}
 8001b74:	4604      	mov	r4, r0
 8001b76:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <chSchReadyI+0x24>)
  tp->p_state = CH_STATE_READY;
 8001b7a:	7702      	strb	r2, [r0, #28]
    cp = cp->p_next;
 8001b7c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	428a      	cmp	r2, r1
 8001b82:	d2fb      	bcs.n	8001b7c <chSchReadyI+0xc>
  tp->p_prev = cp->p_prev;
 8001b84:	685a      	ldr	r2, [r3, #4]
}
 8001b86:	4620      	mov	r0, r4
  tp->p_next = cp;
 8001b88:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8001b8a:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8001b8c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8001b8e:	605c      	str	r4, [r3, #4]
}
 8001b90:	bc10      	pop	{r4}
 8001b92:	4770      	bx	lr
 8001b94:	20001410 	.word	0x20001410
	...

08001ba0 <VectorBC>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8001ba0:	4a3b      	ldr	r2, [pc, #236]	; (8001c90 <VectorBC+0xf0>)
/**
 * @brief   I2C1 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8001ba2:	b538      	push	{r3, r4, r5, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 8001ba4:	6b54      	ldr	r4, [r2, #52]	; 0x34
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8001ba6:	493b      	ldr	r1, [pc, #236]	; (8001c94 <VectorBC+0xf4>)
  uint32_t regSR2 = dp->SR2;
 8001ba8:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 8001baa:	6965      	ldr	r5, [r4, #20]
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8001bac:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8001bb0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001bb4:	428b      	cmp	r3, r1
 8001bb6:	d04c      	beq.n	8001c52 <VectorBC+0xb2>
 8001bb8:	d81e      	bhi.n	8001bf8 <VectorBC+0x58>
 8001bba:	3907      	subs	r1, #7
 8001bbc:	428b      	cmp	r3, r1
 8001bbe:	d03c      	beq.n	8001c3a <VectorBC+0x9a>
 8001bc0:	3101      	adds	r1, #1
 8001bc2:	428b      	cmp	r3, r1
 8001bc4:	d110      	bne.n	8001be8 <VectorBC+0x48>
    dmaStreamEnable(i2cp->dmarx);
 8001bc6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8001bc8:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8001bca:	685b      	ldr	r3, [r3, #4]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8001bcc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bd0:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	f042 0201 	orr.w	r2, r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 8001bda:	6862      	ldr	r2, [r4, #4]
 8001bdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001be0:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d94e      	bls.n	8001c86 <VectorBC+0xe6>
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8001be8:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 8001bec:	bf18      	it	ne
 8001bee:	69a3      	ldrne	r3, [r4, #24]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
}
 8001bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 8001bf4:	f7ff bbe4 	b.w	80013c0 <_port_irq_epilogue>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8001bf8:	4927      	ldr	r1, [pc, #156]	; (8001c98 <VectorBC+0xf8>)
 8001bfa:	428b      	cmp	r3, r1
 8001bfc:	d012      	beq.n	8001c24 <VectorBC+0x84>
 8001bfe:	3102      	adds	r1, #2
 8001c00:	428b      	cmp	r3, r1
 8001c02:	d1f1      	bne.n	8001be8 <VectorBC+0x48>
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8001c04:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	b33b      	cbz	r3, 8001c5c <VectorBC+0xbc>
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8001c0c:	6823      	ldr	r3, [r4, #0]
      i2cp->addr |= 0x01;
 8001c0e:	8c11      	ldrh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8001c10:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
      i2cp->addr |= 0x01;
 8001c14:	f041 0101 	orr.w	r1, r1, #1
 8001c18:	8411      	strh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8001c1a:	6023      	str	r3, [r4, #0]
}
 8001c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 8001c20:	f7ff bbce 	b.w	80013c0 <_port_irq_epilogue>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8001c24:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8001c26:	6b12      	ldr	r2, [r2, #48]	; 0x30
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8001c28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 8001c2c:	6852      	ldr	r2, [r2, #4]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8001c2e:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8001c30:	6813      	ldr	r3, [r2, #0]
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	e7d6      	b.n	8001be8 <VectorBC+0x48>
    if ((i2cp->addr >> 8) > 0) { 
 8001c3a:	8c13      	ldrh	r3, [r2, #32]
 8001c3c:	0a1a      	lsrs	r2, r3, #8
 8001c3e:	d00b      	beq.n	8001c58 <VectorBC+0xb8>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001c48:	f002 0206 	and.w	r2, r2, #6
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	6123      	str	r3, [r4, #16]
 8001c50:	e7ca      	b.n	8001be8 <VectorBC+0x48>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8001c52:	8c13      	ldrh	r3, [r2, #32]
 8001c54:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8001c58:	6123      	str	r3, [r4, #16]
 8001c5a:	e7c5      	b.n	8001be8 <VectorBC+0x48>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8001c5c:	6861      	ldr	r1, [r4, #4]
 8001c5e:	2020      	movs	r0, #32
 8001c60:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8001c64:	6061      	str	r1, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8001c66:	6821      	ldr	r1, [r4, #0]
 8001c68:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8001c6c:	6021      	str	r1, [r4, #0]
 8001c6e:	f380 8811 	msr	BASEPRI, r0
  if (*trp != NULL) {
 8001c72:	69d0      	ldr	r0, [r2, #28]
 8001c74:	b118      	cbz	r0, 8001c7e <VectorBC+0xde>
    tp->p_u.rdymsg = msg;
 8001c76:	6203      	str	r3, [r0, #32]
    *trp = NULL;
 8001c78:	61d3      	str	r3, [r2, #28]
    (void) chSchReadyI(tp);
 8001c7a:	f7ff ff79 	bl	8001b70 <chSchReadyI>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f383 8811 	msr	BASEPRI, r3
 8001c84:	e7b0      	b.n	8001be8 <VectorBC+0x48>
      dp->CR1 &= ~I2C_CR1_ACK;
 8001c86:	6823      	ldr	r3, [r4, #0]
 8001c88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c8c:	6023      	str	r3, [r4, #0]
 8001c8e:	e7ab      	b.n	8001be8 <VectorBC+0x48>
 8001c90:	20000980 	.word	0x20000980
 8001c94:	00030008 	.word	0x00030008
 8001c98:	00070082 	.word	0x00070082
 8001c9c:	00000000 	.word	0x00000000

08001ca0 <VectorC0>:

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 8001ca0:	4a33      	ldr	r2, [pc, #204]	; (8001d70 <VectorC0+0xd0>)
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 8001ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD1.i2c->SR1;
 8001ca4:	6b50      	ldr	r0, [r2, #52]	; 0x34
  dmaStreamDisable(i2cp->dmatx);
 8001ca6:	230e      	movs	r3, #14
  uint16_t sr = I2CD1.i2c->SR1;
 8001ca8:	6944      	ldr	r4, [r0, #20]
  dmaStreamDisable(i2cp->dmatx);
 8001caa:	6b16      	ldr	r6, [r2, #48]	; 0x30

  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8001cac:	f404 415f 	and.w	r1, r4, #57088	; 0xdf00
 8001cb0:	43c9      	mvns	r1, r1
  dmaStreamDisable(i2cp->dmatx);
 8001cb2:	6877      	ldr	r7, [r6, #4]
  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8001cb4:	6141      	str	r1, [r0, #20]
  dmaStreamDisable(i2cp->dmatx);
 8001cb6:	683d      	ldr	r5, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 8001cb8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 8001cba:	f025 050f 	bic.w	r5, r5, #15
 8001cbe:	603d      	str	r5, [r7, #0]
 8001cc0:	7c35      	ldrb	r5, [r6, #16]
 8001cc2:	6837      	ldr	r7, [r6, #0]
 8001cc4:	fa03 f505 	lsl.w	r5, r3, r5
  dmaStreamDisable(i2cp->dmarx);
 8001cc8:	684e      	ldr	r6, [r1, #4]
  dmaStreamDisable(i2cp->dmatx);
 8001cca:	607d      	str	r5, [r7, #4]
  dmaStreamDisable(i2cp->dmarx);
 8001ccc:	6835      	ldr	r5, [r6, #0]
 8001cce:	680f      	ldr	r7, [r1, #0]
 8001cd0:	f025 050f 	bic.w	r5, r5, #15
 8001cd4:	6035      	str	r5, [r6, #0]
 8001cd6:	7c0d      	ldrb	r5, [r1, #16]
  uint16_t sr = I2CD1.i2c->SR1;
 8001cd8:	b2a1      	uxth	r1, r4
  dmaStreamDisable(i2cp->dmarx);
 8001cda:	40ab      	lsls	r3, r5
 8001cdc:	607b      	str	r3, [r7, #4]
  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 8001cde:	f411 7380 	ands.w	r3, r1, #256	; 0x100
    i2cp->errors |= I2C_BUS_ERROR;
 8001ce2:	bf1b      	ittet	ne
 8001ce4:	2501      	movne	r5, #1
 8001ce6:	462b      	movne	r3, r5
  i2cp->errors = I2C_NO_ERROR;
 8001ce8:	6093      	streq	r3, [r2, #8]
    i2cp->errors |= I2C_BUS_ERROR;
 8001cea:	6095      	strne	r5, [r2, #8]
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 8001cec:	058e      	lsls	r6, r1, #22
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8001cee:	bf44      	itt	mi
 8001cf0:	f043 0302 	orrmi.w	r3, r3, #2
 8001cf4:	6093      	strmi	r3, [r2, #8]
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8001cf6:	054d      	lsls	r5, r1, #21
 8001cf8:	d50a      	bpl.n	8001d10 <VectorC0+0x70>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8001cfa:	6845      	ldr	r5, [r0, #4]
    i2cp->errors |= I2C_ACK_FAILURE;
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8001d00:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 8001d04:	6045      	str	r5, [r0, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8001d06:	6805      	ldr	r5, [r0, #0]
 8001d08:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8001d0c:	6005      	str	r5, [r0, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8001d0e:	6093      	str	r3, [r2, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 8001d10:	050f      	lsls	r7, r1, #20
    i2cp->errors |= I2C_OVERRUN;
 8001d12:	bf44      	itt	mi
 8001d14:	f043 0308 	orrmi.w	r3, r3, #8
 8001d18:	6093      	strmi	r3, [r2, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8001d1a:	044e      	lsls	r6, r1, #17
    i2cp->errors |= I2C_TIMEOUT;
 8001d1c:	bf44      	itt	mi
 8001d1e:	f043 0320 	orrmi.w	r3, r3, #32
 8001d22:	6093      	strmi	r3, [r2, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 8001d24:	04cd      	lsls	r5, r1, #19
 8001d26:	d517      	bpl.n	8001d58 <VectorC0+0xb8>
    i2cp->errors |= I2C_PEC_ERROR;
 8001d28:	f043 0310 	orr.w	r3, r3, #16
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8001d2c:	0420      	lsls	r0, r4, #16
    i2cp->errors |= I2C_PEC_ERROR;
 8001d2e:	6093      	str	r3, [r2, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8001d30:	d41a      	bmi.n	8001d68 <VectorC0+0xc8>
 8001d32:	2320      	movs	r3, #32
 8001d34:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8001d38:	69d0      	ldr	r0, [r2, #28]
 8001d3a:	b130      	cbz	r0, 8001d4a <VectorC0+0xaa>
    tp->p_u.rdymsg = msg;
 8001d3c:	f06f 0101 	mvn.w	r1, #1
    *trp = NULL;
 8001d40:	2300      	movs	r3, #0
    tp->p_u.rdymsg = msg;
 8001d42:	6201      	str	r1, [r0, #32]
    *trp = NULL;
 8001d44:	61d3      	str	r3, [r2, #28]
    (void) chSchReadyI(tp);
 8001d46:	f7ff ff13 	bl	8001b70 <chSchReadyI>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f383 8811 	msr	BASEPRI, r3
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
}
 8001d50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8001d54:	f7ff bb34 	b.w	80013c0 <_port_irq_epilogue>
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8001d58:	0421      	lsls	r1, r4, #16
 8001d5a:	d405      	bmi.n	8001d68 <VectorC0+0xc8>
  if (i2cp->errors != I2C_NO_ERROR)
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1e8      	bne.n	8001d32 <VectorC0+0x92>
}
 8001d60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8001d64:	f7ff bb2c 	b.w	80013c0 <_port_irq_epilogue>
    i2cp->errors |= I2C_SMB_ALERT;
 8001d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d6c:	6093      	str	r3, [r2, #8]
 8001d6e:	e7e0      	b.n	8001d32 <VectorC0+0x92>
 8001d70:	20000980 	.word	0x20000980
	...

08001d80 <chIQResetI>:
  iqp->q_counter = 0;
 8001d80:	2100      	movs	r1, #0
void chIQResetI(input_queue_t *iqp) {
 8001d82:	b538      	push	{r3, r4, r5, lr}
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001d84:	6803      	ldr	r3, [r0, #0]
  iqp->q_rdptr = iqp->q_buffer;
 8001d86:	68c2      	ldr	r2, [r0, #12]
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  while (queue_notempty(tqp)) {
 8001d88:	4298      	cmp	r0, r3
  iqp->q_counter = 0;
 8001d8a:	6081      	str	r1, [r0, #8]
  iqp->q_rdptr = iqp->q_buffer;
 8001d8c:	6182      	str	r2, [r0, #24]
  iqp->q_wrptr = iqp->q_buffer;
 8001d8e:	6142      	str	r2, [r0, #20]
 8001d90:	d00c      	beq.n	8001dac <chIQResetI+0x2c>
 8001d92:	4604      	mov	r4, r0

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8001d94:	f06f 0501 	mvn.w	r5, #1
  tqp->p_next = tp->p_next;
 8001d98:	681a      	ldr	r2, [r3, #0]
  (void) chSchReadyI(tp);
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	6022      	str	r2, [r4, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001d9e:	6054      	str	r4, [r2, #4]
  tp->p_u.rdymsg = msg;
 8001da0:	621d      	str	r5, [r3, #32]
  (void) chSchReadyI(tp);
 8001da2:	f7ff fee5 	bl	8001b70 <chSchReadyI>
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001da6:	6823      	ldr	r3, [r4, #0]
 8001da8:	429c      	cmp	r4, r3
 8001daa:	d1f5      	bne.n	8001d98 <chIQResetI+0x18>
 8001dac:	bd38      	pop	{r3, r4, r5, pc}
 8001dae:	bf00      	nop

08001db0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8001db2:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001db4:	42a0      	cmp	r0, r4
 8001db6:	d021      	beq.n	8001dfc <chEvtBroadcastFlagsI+0x4c>
 8001db8:	460d      	mov	r5, r1
 8001dba:	4607      	mov	r7, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8001dbc:	2600      	movs	r6, #0
 8001dbe:	e002      	b.n	8001dc6 <chEvtBroadcastFlagsI+0x16>
    elp = elp->el_next;
 8001dc0:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001dc2:	42a7      	cmp	r7, r4
 8001dc4:	d01a      	beq.n	8001dfc <chEvtBroadcastFlagsI+0x4c>
    elp->el_flags |= flags;
 8001dc6:	68e3      	ldr	r3, [r4, #12]
 8001dc8:	432b      	orrs	r3, r5
 8001dca:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8001dcc:	b115      	cbz	r5, 8001dd4 <chEvtBroadcastFlagsI+0x24>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 8001dce:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8001dd0:	4213      	tst	r3, r2
 8001dd2:	d0f5      	beq.n	8001dc0 <chEvtBroadcastFlagsI+0x10>
      chEvtSignalI(elp->el_listener, elp->el_events);
 8001dd4:	6860      	ldr	r0, [r4, #4]
  tp->p_epending |= events;
 8001dd6:	68a3      	ldr	r3, [r4, #8]
 8001dd8:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001dda:	7f02      	ldrb	r2, [r0, #28]
  tp->p_epending |= events;
 8001ddc:	430b      	orrs	r3, r1
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001dde:	2a0a      	cmp	r2, #10
  tp->p_epending |= events;
 8001de0:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001de2:	d00c      	beq.n	8001dfe <chEvtBroadcastFlagsI+0x4e>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8001de4:	2a0b      	cmp	r2, #11
 8001de6:	d1eb      	bne.n	8001dc0 <chEvtBroadcastFlagsI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8001de8:	6a02      	ldr	r2, [r0, #32]
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8001dea:	ea32 0303 	bics.w	r3, r2, r3
 8001dee:	d1e7      	bne.n	8001dc0 <chEvtBroadcastFlagsI+0x10>
    tp->p_u.rdymsg = MSG_OK;
 8001df0:	6206      	str	r6, [r0, #32]
    (void) chSchReadyI(tp);
 8001df2:	f7ff febd 	bl	8001b70 <chSchReadyI>
    elp = elp->el_next;
 8001df6:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001df8:	42a7      	cmp	r7, r4
 8001dfa:	d1e4      	bne.n	8001dc6 <chEvtBroadcastFlagsI+0x16>
 8001dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8001dfe:	6a02      	ldr	r2, [r0, #32]
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001e00:	4213      	tst	r3, r2
 8001e02:	d0dd      	beq.n	8001dc0 <chEvtBroadcastFlagsI+0x10>
    tp->p_u.rdymsg = MSG_OK;
 8001e04:	6206      	str	r6, [r0, #32]
    (void) chSchReadyI(tp);
 8001e06:	f7ff feb3 	bl	8001b70 <chSchReadyI>
 8001e0a:	e7f4      	b.n	8001df6 <chEvtBroadcastFlagsI+0x46>
 8001e0c:	0000      	movs	r0, r0
	...

08001e10 <chThdExit>:
void chThdExit(msg_t msg) {
 8001e10:	b538      	push	{r3, r4, r5, lr}
 8001e12:	2220      	movs	r2, #32
 8001e14:	4603      	mov	r3, r0
 8001e16:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
 8001e1a:	4a0e      	ldr	r2, [pc, #56]	; (8001e54 <chThdExit+0x44>)
 8001e1c:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001e1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->p_waiting)) {
 8001e20:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8001e24:	4285      	cmp	r5, r0
  tp->p_u.exitcode = msg;
 8001e26:	6223      	str	r3, [r4, #32]
  while (list_notempty(&tp->p_waiting)) {
 8001e28:	d006      	beq.n	8001e38 <chThdExit+0x28>
  tlp->p_next = tp->p_next;
 8001e2a:	6803      	ldr	r3, [r0, #0]
 8001e2c:	6263      	str	r3, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8001e2e:	f7ff fe9f 	bl	8001b70 <chSchReadyI>
  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001e32:	6a60      	ldr	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->p_waiting)) {
 8001e34:	42a8      	cmp	r0, r5
 8001e36:	d1f8      	bne.n	8001e2a <chThdExit+0x1a>
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8001e38:	7f63      	ldrb	r3, [r4, #29]
 8001e3a:	079b      	lsls	r3, r3, #30
 8001e3c:	d104      	bne.n	8001e48 <chThdExit+0x38>
    REG_REMOVE(tp);
 8001e3e:	6922      	ldr	r2, [r4, #16]
 8001e40:	6963      	ldr	r3, [r4, #20]
 8001e42:	611a      	str	r2, [r3, #16]
 8001e44:	6922      	ldr	r2, [r4, #16]
 8001e46:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8001e48:	200f      	movs	r0, #15
}
 8001e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8001e4e:	f7ff bc87 	b.w	8001760 <chSchGoSleepS>
 8001e52:	bf00      	nop
 8001e54:	20001410 	.word	0x20001410
	...

08001e60 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8001e60:	e7fe      	b.n	8001e60 <BusFault_Handler>
 8001e62:	bf00      	nop
	...

08001e70 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001e70:	b5f0      	push	{r4, r5, r6, r7, lr}
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001e72:	2600      	movs	r6, #0
  const ram_init_area_t *rap = ram_areas;
 8001e74:	4f11      	ldr	r7, [pc, #68]	; (8001ebc <__init_ram_areas+0x4c>)
void __init_ram_areas(void) {
 8001e76:	4d12      	ldr	r5, [pc, #72]	; (8001ec0 <__init_ram_areas+0x50>)
 8001e78:	4c12      	ldr	r4, [pc, #72]	; (8001ec4 <__init_ram_areas+0x54>)
 8001e7a:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <__init_ram_areas+0x58>)
 8001e7c:	4913      	ldr	r1, [pc, #76]	; (8001ecc <__init_ram_areas+0x5c>)
 8001e7e:	f107 0e80 	add.w	lr, r7, #128	; 0x80
    while (p < rap->clear_area) {
 8001e82:	429c      	cmp	r4, r3
 8001e84:	d911      	bls.n	8001eaa <__init_ram_areas+0x3a>
 8001e86:	461a      	mov	r2, r3
 8001e88:	3904      	subs	r1, #4
      *p = *tp;
 8001e8a:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8001e8e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 8001e92:	4294      	cmp	r4, r2
 8001e94:	d8f9      	bhi.n	8001e8a <__init_ram_areas+0x1a>
 8001e96:	43da      	mvns	r2, r3
 8001e98:	4414      	add	r4, r2
 8001e9a:	f024 0403 	bic.w	r4, r4, #3
 8001e9e:	3404      	adds	r4, #4
 8001ea0:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 8001ea2:	429d      	cmp	r5, r3
 8001ea4:	d903      	bls.n	8001eae <__init_ram_areas+0x3e>
      *p = 0;
 8001ea6:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 8001eaa:	429d      	cmp	r5, r3
 8001eac:	d8fb      	bhi.n	8001ea6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
 8001eae:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8001eb0:	4577      	cmp	r7, lr
 8001eb2:	d202      	bcs.n	8001eba <__init_ram_areas+0x4a>
 8001eb4:	e897 003a 	ldmia.w	r7, {r1, r3, r4, r5}
 8001eb8:	e7e3      	b.n	8001e82 <__init_ram_areas+0x12>
 8001eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ebc:	08003450 	.word	0x08003450
 8001ec0:	200016c0 	.word	0x200016c0
 8001ec4:	200016c0 	.word	0x200016c0
 8001ec8:	200016c0 	.word	0x200016c0
 8001ecc:	08003e34 	.word	0x08003e34

08001ed0 <__default_exit>:
void __default_exit(void) {
 8001ed0:	e7fe      	b.n	8001ed0 <__default_exit>
 8001ed2:	bf00      	nop
	...

08001ee0 <__late_init>:
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
	...

08001ef0 <__core_init>:
void __core_init(void) {
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
	...

08001f00 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 8001f00:	4a02      	ldr	r2, [pc, #8]	; (8001f0c <notify1+0xc>)
 8001f02:	68d3      	ldr	r3, [r2, #12]
 8001f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f08:	60d3      	str	r3, [r2, #12]
 8001f0a:	4770      	bx	lr
 8001f0c:	40013800 	.word	0x40013800

08001f10 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 8001f10:	4a02      	ldr	r2, [pc, #8]	; (8001f1c <notify2+0xc>)
 8001f12:	68d3      	ldr	r3, [r2, #12]
 8001f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f18:	60d3      	str	r3, [r2, #12]
 8001f1a:	4770      	bx	lr
 8001f1c:	40004400 	.word	0x40004400

08001f20 <notify3>:

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE;
 8001f20:	4a02      	ldr	r2, [pc, #8]	; (8001f2c <notify3+0xc>)
 8001f22:	68d3      	ldr	r3, [r2, #12]
 8001f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f28:	60d3      	str	r3, [r2, #12]
 8001f2a:	4770      	bx	lr
 8001f2c:	40004800 	.word	0x40004800

08001f30 <Thread1>:
static THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palClearPad(GPIOC, GPIOC_LED);
 8001f30:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8001f34:	462e      	mov	r6, r5
static THD_FUNCTION(Thread1, arg) {
 8001f36:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <Thread1+0x24>)
 8001f3a:	4a07      	ldr	r2, [pc, #28]	; (8001f58 <Thread1+0x28>)
 8001f3c:	699b      	ldr	r3, [r3, #24]
    palClearPad(GPIOC, GPIOC_LED);
 8001f3e:	4c07      	ldr	r4, [pc, #28]	; (8001f5c <Thread1+0x2c>)
 8001f40:	619a      	str	r2, [r3, #24]
 8001f42:	6166      	str	r6, [r4, #20]
    chThdSleepMilliseconds(10);
 8001f44:	2064      	movs	r0, #100	; 0x64
 8001f46:	f7ff fe03 	bl	8001b50 <chThdSleep>
    palSetPad(GPIOC, GPIOC_LED);
 8001f4a:	6125      	str	r5, [r4, #16]
    chThdSleepMilliseconds(10);
 8001f4c:	2064      	movs	r0, #100	; 0x64
 8001f4e:	f7ff fdff 	bl	8001b50 <chThdSleep>
 8001f52:	e7f6      	b.n	8001f42 <Thread1+0x12>
 8001f54:	20001410 	.word	0x20001410
 8001f58:	08003500 	.word	0x08003500
 8001f5c:	40011000 	.word	0x40011000

08001f60 <serve_interrupt>:
static void serve_interrupt(SerialDriver *sdp) {
 8001f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 8001f64:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
static void serve_interrupt(SerialDriver *sdp) {
 8001f68:	b082      	sub	sp, #8
  uint16_t cr1 = u->CR1;
 8001f6a:	f8d6 a00c 	ldr.w	sl, [r6, #12]
  uint16_t sr = u->SR;
 8001f6e:	6833      	ldr	r3, [r6, #0]
static void serve_interrupt(SerialDriver *sdp) {
 8001f70:	4605      	mov	r5, r0
  if (sr & USART_SR_LBD) {
 8001f72:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 8001f74:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 8001f76:	f100 8082 	bmi.w	800207e <serve_interrupt+0x11e>
 8001f7a:	2320      	movs	r3, #32
 8001f7c:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001f80:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8001f84:	d04a      	beq.n	800201c <serve_interrupt+0xbc>
  tp->p_u.rdymsg = msg;
 8001f86:	f04f 0900 	mov.w	r9, #0
  chnAddFlagsI(sdp, sts);
 8001f8a:	f105 0804 	add.w	r8, r5, #4
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
 8001f8e:	f105 070c 	add.w	r7, r5, #12
 8001f92:	e007      	b.n	8001fa4 <serve_interrupt+0x44>
    if (sr & USART_SR_RXNE)
 8001f94:	06a0      	lsls	r0, r4, #26
    b = u->DR;
 8001f96:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 8001f98:	d41d      	bmi.n	8001fd6 <serve_interrupt+0x76>
    sr = u->SR;
 8001f9a:	6834      	ldr	r4, [r6, #0]
 8001f9c:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001f9e:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8001fa2:	d03b      	beq.n	800201c <serve_interrupt+0xbc>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8001fa4:	0723      	lsls	r3, r4, #28
 8001fa6:	d0f5      	beq.n	8001f94 <serve_interrupt+0x34>
    sts |= SD_OVERRUN_ERROR;
 8001fa8:	f014 0f08 	tst.w	r4, #8
 8001fac:	bf0c      	ite	eq
 8001fae:	2100      	moveq	r1, #0
 8001fb0:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8001fb2:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 8001fb4:	bf48      	it	mi
 8001fb6:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8001fba:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8001fbc:	bf48      	it	mi
 8001fbe:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8001fc2:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 8001fc4:	bf48      	it	mi
 8001fc6:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001fca:	4640      	mov	r0, r8
 8001fcc:	f7ff fef0 	bl	8001db0 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8001fd0:	06a0      	lsls	r0, r4, #26
    b = u->DR;
 8001fd2:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 8001fd4:	d5e1      	bpl.n	8001f9a <serve_interrupt+0x3a>
 8001fd6:	696a      	ldr	r2, [r5, #20]
  if (iqIsEmptyI(&sdp->iqueue))
 8001fd8:	2a00      	cmp	r2, #0
 8001fda:	d03e      	beq.n	800205a <serve_interrupt+0xfa>
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8001fdc:	6a2a      	ldr	r2, [r5, #32]
 8001fde:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001fe0:	428a      	cmp	r2, r1
 8001fe2:	d044      	beq.n	800206e <serve_interrupt+0x10e>
  iqp->q_counter++;
 8001fe4:	6969      	ldr	r1, [r5, #20]
  *iqp->q_wrptr++ = b;
 8001fe6:	1c50      	adds	r0, r2, #1
  iqp->q_counter++;
 8001fe8:	3101      	adds	r1, #1
  *iqp->q_wrptr++ = b;
 8001fea:	6228      	str	r0, [r5, #32]
  iqp->q_counter++;
 8001fec:	6169      	str	r1, [r5, #20]
    b = u->DR;
 8001fee:	7013      	strb	r3, [r2, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8001ff0:	6a2a      	ldr	r2, [r5, #32]
 8001ff2:	69eb      	ldr	r3, [r5, #28]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d301      	bcc.n	8001ffc <serve_interrupt+0x9c>
    iqp->q_wrptr = iqp->q_buffer;
 8001ff8:	69ab      	ldr	r3, [r5, #24]
 8001ffa:	622b      	str	r3, [r5, #32]
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001ffc:	68eb      	ldr	r3, [r5, #12]
  if (queue_notempty(tqp)) {
 8001ffe:	429f      	cmp	r7, r3
 8002000:	d0cb      	beq.n	8001f9a <serve_interrupt+0x3a>
  tqp->p_next = tp->p_next;
 8002002:	681a      	ldr	r2, [r3, #0]
  (void) chSchReadyI(tp);
 8002004:	4618      	mov	r0, r3
 8002006:	60ea      	str	r2, [r5, #12]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8002008:	6057      	str	r7, [r2, #4]
  tp->p_u.rdymsg = msg;
 800200a:	f8c3 9020 	str.w	r9, [r3, #32]
  (void) chSchReadyI(tp);
 800200e:	f7ff fdaf 	bl	8001b70 <chSchReadyI>
    sr = u->SR;
 8002012:	6834      	ldr	r4, [r6, #0]
 8002014:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002016:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800201a:	d1c3      	bne.n	8001fa4 <serve_interrupt+0x44>
 800201c:	2300      	movs	r3, #0
 800201e:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8002022:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8002026:	d001      	beq.n	800202c <serve_interrupt+0xcc>
 8002028:	0622      	lsls	r2, r4, #24
 800202a:	d437      	bmi.n	800209c <serve_interrupt+0x13c>
  if (sr & USART_SR_TC) {
 800202c:	0663      	lsls	r3, r4, #25
 800202e:	d511      	bpl.n	8002054 <serve_interrupt+0xf4>
 8002030:	2320      	movs	r3, #32
 8002032:	f383 8811 	msr	BASEPRI, r3
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8002036:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8002038:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800203a:	429a      	cmp	r2, r3
 800203c:	d054      	beq.n	80020e8 <serve_interrupt+0x188>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800203e:	f64f 73bf 	movw	r3, #65471	; 0xffbf
    u->SR = ~USART_SR_TC;
 8002042:	f06f 0240 	mvn.w	r2, #64	; 0x40
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8002046:	ea0a 0303 	and.w	r3, sl, r3
 800204a:	60f3      	str	r3, [r6, #12]
 800204c:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 800204e:	6032      	str	r2, [r6, #0]
 8002050:	f383 8811 	msr	BASEPRI, r3
}
 8002054:	b002      	add	sp, #8
 8002056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800205a:	2104      	movs	r1, #4
 800205c:	4640      	mov	r0, r8
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	f7ff fea6 	bl	8001db0 <chEvtBroadcastFlagsI>
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8002064:	6a2a      	ldr	r2, [r5, #32]
 8002066:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002068:	9b01      	ldr	r3, [sp, #4]
 800206a:	428a      	cmp	r2, r1
 800206c:	d1ba      	bne.n	8001fe4 <serve_interrupt+0x84>
 800206e:	6969      	ldr	r1, [r5, #20]
 8002070:	2900      	cmp	r1, #0
 8002072:	d0b7      	beq.n	8001fe4 <serve_interrupt+0x84>
 8002074:	2180      	movs	r1, #128	; 0x80
 8002076:	4640      	mov	r0, r8
 8002078:	f7ff fe9a 	bl	8001db0 <chEvtBroadcastFlagsI>
 800207c:	e78d      	b.n	8001f9a <serve_interrupt+0x3a>
 800207e:	2320      	movs	r3, #32
 8002080:	f383 8811 	msr	BASEPRI, r3
 8002084:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002088:	3004      	adds	r0, #4
 800208a:	f7ff fe91 	bl	8001db0 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 800208e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002092:	2300      	movs	r3, #0
 8002094:	6032      	str	r2, [r6, #0]
 8002096:	f383 8811 	msr	BASEPRI, r3
 800209a:	e76e      	b.n	8001f7a <serve_interrupt+0x1a>
 800209c:	2320      	movs	r3, #32
 800209e:	f383 8811 	msr	BASEPRI, r3
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 80020a2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80020a4:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    b = oqGetI(&sdp->oqueue);
 80020a6:	f105 0730 	add.w	r7, r5, #48	; 0x30
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d024      	beq.n	80020f8 <serve_interrupt+0x198>
  oqp->q_counter++;
 80020ae:	6baa      	ldr	r2, [r5, #56]	; 0x38
  if (oqp->q_rdptr >= oqp->q_top) {
 80020b0:	6c28      	ldr	r0, [r5, #64]	; 0x40
  b = *oqp->q_rdptr++;
 80020b2:	1c59      	adds	r1, r3, #1
  oqp->q_counter++;
 80020b4:	3201      	adds	r2, #1
 80020b6:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 80020b8:	64a9      	str	r1, [r5, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
 80020ba:	4281      	cmp	r1, r0
  b = *oqp->q_rdptr++;
 80020bc:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
 80020c0:	d301      	bcc.n	80020c6 <serve_interrupt+0x166>
    oqp->q_rdptr = oqp->q_buffer;
 80020c2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80020c4:	64ab      	str	r3, [r5, #72]	; 0x48
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80020c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80020c8:	429f      	cmp	r7, r3
 80020ca:	d007      	beq.n	80020dc <serve_interrupt+0x17c>
  tp->p_u.rdymsg = msg;
 80020cc:	2100      	movs	r1, #0
  tqp->p_next = tp->p_next;
 80020ce:	681a      	ldr	r2, [r3, #0]
  (void) chSchReadyI(tp);
 80020d0:	4618      	mov	r0, r3
 80020d2:	632a      	str	r2, [r5, #48]	; 0x30
  tqp->p_next->p_prev = (thread_t *)tqp;
 80020d4:	6057      	str	r7, [r2, #4]
  tp->p_u.rdymsg = msg;
 80020d6:	6219      	str	r1, [r3, #32]
  (void) chSchReadyI(tp);
 80020d8:	f7ff fd4a 	bl	8001b70 <chSchReadyI>
      u->DR = b;
 80020dc:	f8c6 8004 	str.w	r8, [r6, #4]
 80020e0:	2300      	movs	r3, #0
 80020e2:	f383 8811 	msr	BASEPRI, r3
 80020e6:	e7a1      	b.n	800202c <serve_interrupt+0xcc>
 80020e8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0a7      	beq.n	800203e <serve_interrupt+0xde>
 80020ee:	1d28      	adds	r0, r5, #4
 80020f0:	2110      	movs	r1, #16
 80020f2:	f7ff fe5d 	bl	8001db0 <chEvtBroadcastFlagsI>
 80020f6:	e7a2      	b.n	800203e <serve_interrupt+0xde>
 80020f8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80020fa:	2a00      	cmp	r2, #0
 80020fc:	d0d7      	beq.n	80020ae <serve_interrupt+0x14e>
 80020fe:	2108      	movs	r1, #8
 8002100:	1d28      	adds	r0, r5, #4
 8002102:	f7ff fe55 	bl	8001db0 <chEvtBroadcastFlagsI>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8002106:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800210a:	ea0a 0303 	and.w	r3, sl, r3
 800210e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002112:	60f3      	str	r3, [r6, #12]
 8002114:	e7e4      	b.n	80020e0 <serve_interrupt+0x180>
 8002116:	bf00      	nop
	...

08002120 <VectorDC>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 8002120:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);
 8002122:	4803      	ldr	r0, [pc, #12]	; (8002130 <VectorDC+0x10>)
 8002124:	f7ff ff1c 	bl	8001f60 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 8002128:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800212c:	f7ff b948 	b.w	80013c0 <_port_irq_epilogue>
 8002130:	20001378 	.word	0x20001378
	...

08002140 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8002140:	b508      	push	{r3, lr}
  serve_interrupt(&SD2);
 8002142:	4803      	ldr	r0, [pc, #12]	; (8002150 <VectorD8+0x10>)
 8002144:	f7ff ff0c 	bl	8001f60 <serve_interrupt>
}
 8002148:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800214c:	f7ff b938 	b.w	80013c0 <_port_irq_epilogue>
 8002150:	200012e0 	.word	0x200012e0
	...

08002160 <VectorD4>:
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8002160:	b508      	push	{r3, lr}
  serve_interrupt(&SD1);
 8002162:	4803      	ldr	r0, [pc, #12]	; (8002170 <VectorD4+0x10>)
 8002164:	f7ff fefc 	bl	8001f60 <serve_interrupt>
}
 8002168:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800216c:	f7ff b928 	b.w	80013c0 <_port_irq_epilogue>
 8002170:	20001248 	.word	0x20001248
	...

08002180 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8002180:	2100      	movs	r1, #0
 8002182:	f04f 30ff 	mov.w	r0, #4294967295
 8002186:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <main+0x54>)
}

Motor_t* motor;
int16_t* bthCommand;

int main(void) {
 8002188:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800218c:	691e      	ldr	r6, [r3, #16]
 800218e:	6118      	str	r0, [r3, #16]
 8002190:	6119      	str	r1, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8002192:	68de      	ldr	r6, [r3, #12]
 8002194:	60d8      	str	r0, [r3, #12]
 8002196:	60d9      	str	r1, [r3, #12]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8002198:	460a      	mov	r2, r1
    _stm32_dma_streams[i].channel->CCR = 0U;
 800219a:	460c      	mov	r4, r1

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 800219c:	69d9      	ldr	r1, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 800219e:	4d0e      	ldr	r5, [pc, #56]	; (80021d8 <main+0x58>)
  rccEnablePWRInterface(FALSE);
 80021a0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80021a4:	61d9      	str	r1, [r3, #28]
  rccEnableBKPInterface(FALSE);
 80021a6:	69d9      	ldr	r1, [r3, #28]
 80021a8:	480c      	ldr	r0, [pc, #48]	; (80021dc <main+0x5c>)
 80021aa:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 80021ae:	61d9      	str	r1, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 80021b0:	682b      	ldr	r3, [r5, #0]
 80021b2:	4e0b      	ldr	r6, [pc, #44]	; (80021e0 <main+0x60>)
 80021b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b8:	490a      	ldr	r1, [pc, #40]	; (80021e4 <main+0x64>)
 80021ba:	b089      	sub	sp, #36	; 0x24
 80021bc:	602b      	str	r3, [r5, #0]
 80021be:	6034      	str	r4, [r6, #0]
    _stm32_dma_isr_redir[i].dma_func = NULL;
 80021c0:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 80021c4:	3201      	adds	r2, #1
 80021c6:	2a07      	cmp	r2, #7
 80021c8:	f100 0014 	add.w	r0, r0, #20
 80021cc:	d00c      	beq.n	80021e8 <main+0x68>
 80021ce:	f850 6c14 	ldr.w	r6, [r0, #-20]
 80021d2:	e7f4      	b.n	80021be <main+0x3e>
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40007000 	.word	0x40007000
 80021dc:	08003528 	.word	0x08003528
 80021e0:	40020008 	.word	0x40020008
 80021e4:	20000dc8 	.word	0x20000dc8
  }
  DMA1->IFCR = 0xFFFFFFFFU;
 80021e8:	f04f 3aff 	mov.w	sl, #4294967295
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
 80021ec:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 80021f0:	f04f 0901 	mov.w	r9, #1
  PWMD1.channels = STM32_TIM1_CHANNELS;
 80021f4:	f04f 0b04 	mov.w	fp, #4
 80021f8:	4bb8      	ldr	r3, [pc, #736]	; (80024dc <main+0x35c>)
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80021fa:	f8df 8390 	ldr.w	r8, [pc, #912]	; 800258c <main+0x40c>
 80021fe:	f8c3 a004 	str.w	sl, [r3, #4]
 8002202:	f8d8 5018 	ldr.w	r5, [r8, #24]
  GPIOA->ODR = config->PAData.odr;
 8002206:	48b6      	ldr	r0, [pc, #728]	; (80024e0 <main+0x360>)
 8002208:	4eb6      	ldr	r6, [pc, #728]	; (80024e4 <main+0x364>)
  GPIOA->CRH = config->PAData.crh;
 800220a:	f8df c384 	ldr.w	ip, [pc, #900]	; 8002590 <main+0x410>
  GPIOA->CRL = config->PAData.crl;
 800220e:	f8df e384 	ldr.w	lr, [pc, #900]	; 8002594 <main+0x414>
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8002212:	f045 057d 	orr.w	r5, r5, #125	; 0x7d
 8002216:	f8c8 5018 	str.w	r5, [r8, #24]
 800221a:	4bb3      	ldr	r3, [pc, #716]	; (80024e8 <main+0x368>)
  GPIOA->ODR = config->PAData.odr;
 800221c:	60c6      	str	r6, [r0, #12]
  GPIOB->ODR = config->PBData.odr;
 800221e:	4fb3      	ldr	r7, [pc, #716]	; (80024ec <main+0x36c>)
  GPIOA->CRH = config->PAData.crh;
 8002220:	f8c0 c004 	str.w	ip, [r0, #4]
  GPIOA->CRL = config->PAData.crl;
 8002224:	f8c0 e000 	str.w	lr, [r0]
  GPIOB->CRH = config->PBData.crh;
 8002228:	48b1      	ldr	r0, [pc, #708]	; (80024f0 <main+0x370>)
  GPIOB->ODR = config->PBData.odr;
 800222a:	f8c7 a00c 	str.w	sl, [r7, #12]
  i2cp->config = NULL;
 800222e:	605c      	str	r4, [r3, #4]
  GPIOB->CRH = config->PBData.crh;
 8002230:	6078      	str	r0, [r7, #4]
  GPIOB->CRL = config->PBData.crl;
 8002232:	f100 50bf 	add.w	r0, r0, #400556032	; 0x17e00000
 8002236:	f500 10ff 	add.w	r0, r0, #2088960	; 0x1fe000
 800223a:	f600 5088 	addw	r0, r0, #3464	; 0xd88
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 800223e:	615c      	str	r4, [r3, #20]
  GPIOC->ODR = config->PCData.odr;
 8002240:	4eac      	ldr	r6, [pc, #688]	; (80024f4 <main+0x374>)
  GPIOB->CRL = config->PBData.crl;
 8002242:	6038      	str	r0, [r7, #0]

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8002244:	49ac      	ldr	r1, [pc, #688]	; (80024f8 <main+0x378>)
  GPIOD->ODR = config->PDData.odr;
 8002246:	48ad      	ldr	r0, [pc, #692]	; (80024fc <main+0x37c>)
  GPIOC->CRH = config->PCData.crh;
 8002248:	f8df c34c 	ldr.w	ip, [pc, #844]	; 8002598 <main+0x418>
  I2CD1.i2c    = I2C1;
 800224c:	f8df e34c 	ldr.w	lr, [pc, #844]	; 800259c <main+0x41c>
  GPIOC->ODR = config->PCData.odr;
 8002250:	f8c6 a00c 	str.w	sl, [r6, #12]
  I2CD1.thread = NULL;
 8002254:	61dc      	str	r4, [r3, #28]
  GPIOC->CRH = config->PCData.crh;
 8002256:	f8c6 c004 	str.w	ip, [r6, #4]
  GPIOC->CRL = config->PCData.crl;
 800225a:	6032      	str	r2, [r6, #0]
  GPIOD->ODR = config->PDData.odr;
 800225c:	f8c0 a00c 	str.w	sl, [r0, #12]
  I2CD1.i2c    = I2C1;
 8002260:	f8c3 e034 	str.w	lr, [r3, #52]	; 0x34
  GPIOD->CRH = config->PDData.crh;
 8002264:	6042      	str	r2, [r0, #4]
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8002266:	62d9      	str	r1, [r3, #44]	; 0x2c
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 8002268:	3914      	subs	r1, #20
 800226a:	9101      	str	r1, [sp, #4]
  GPIOD->CRL = config->PDData.crl;
 800226c:	48a4      	ldr	r0, [pc, #656]	; (8002500 <main+0x380>)
 800226e:	49a3      	ldr	r1, [pc, #652]	; (80024fc <main+0x37c>)
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8002270:	4da4      	ldr	r5, [pc, #656]	; (8002504 <main+0x384>)
  GPIOD->CRL = config->PDData.crl;
 8002272:	6008      	str	r0, [r1, #0]
 8002274:	9901      	ldr	r1, [sp, #4]
  tqp->p_next = (thread_t *)tqp;
 8002276:	f103 0e0c 	add.w	lr, r3, #12
  GPIOE->ODR = config->PEData.odr;
 800227a:	f8c5 a00c 	str.w	sl, [r5, #12]
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 800227e:	4fa2      	ldr	r7, [pc, #648]	; (8002508 <main+0x388>)
 8002280:	4ea2      	ldr	r6, [pc, #648]	; (800250c <main+0x38c>)
  PWMD1.tim = STM32_TIM1;
 8002282:	f8df c31c 	ldr.w	ip, [pc, #796]	; 80025a0 <main+0x420>
 8002286:	6319      	str	r1, [r3, #48]	; 0x30
  GPIOE->CRH = config->PEData.crh;
 8002288:	606a      	str	r2, [r5, #4]
 800228a:	f8c3 e00c 	str.w	lr, [r3, #12]
  GPIOE->CRL = config->PEData.crl;
 800228e:	602a      	str	r2, [r5, #0]
  tqp->p_prev = (thread_t *)tqp;
 8002290:	f8c3 e010 	str.w	lr, [r3, #16]
  i2cp->state  = I2C_STOP;
 8002294:	f883 9000 	strb.w	r9, [r3]
  PWMD3.tim = STM32_TIM3;
 8002298:	4b9d      	ldr	r3, [pc, #628]	; (8002510 <main+0x390>)
 * @notapi
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 800229a:	489e      	ldr	r0, [pc, #632]	; (8002514 <main+0x394>)
 800229c:	499e      	ldr	r1, [pc, #632]	; (8002518 <main+0x398>)
 800229e:	f887 9000 	strb.w	r9, [r7]
  pwmp->config   = NULL;
 80022a2:	607c      	str	r4, [r7, #4]
  pwmp->enabled  = 0;
 80022a4:	60fc      	str	r4, [r7, #12]
  PWMD1.tim = STM32_TIM1;
 80022a6:	f8c7 c018 	str.w	ip, [r7, #24]
  PWMD1.channels = STM32_TIM1_CHANNELS;
 80022aa:	f887 b010 	strb.w	fp, [r7, #16]
  PWMD3.channels = STM32_TIM3_CHANNELS;
 80022ae:	f886 b010 	strb.w	fp, [r6, #16]
  PWMD3.tim = STM32_TIM3;
 80022b2:	61b3      	str	r3, [r6, #24]
  pwmp->state    = PWM_STOP;
 80022b4:	f886 9000 	strb.w	r9, [r6]
  pwmp->config   = NULL;
 80022b8:	6074      	str	r4, [r6, #4]
  pwmp->enabled  = 0;
 80022ba:	60f4      	str	r4, [r6, #12]
 80022bc:	f001 f848 	bl	8003350 <sdObjectInit.constprop.5>
  SD1.usart = USART1;
 80022c0:	4b96      	ldr	r3, [pc, #600]	; (800251c <main+0x39c>)
 80022c2:	4a94      	ldr	r2, [pc, #592]	; (8002514 <main+0x394>)
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 80022c4:	4896      	ldr	r0, [pc, #600]	; (8002520 <main+0x3a0>)
 80022c6:	4997      	ldr	r1, [pc, #604]	; (8002524 <main+0x3a4>)
  SD1.usart = USART1;
 80022c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  sdObjectInit(&SD2, NULL, notify2);
 80022cc:	f001 f840 	bl	8003350 <sdObjectInit.constprop.5>
  SD2.usart = USART2;
 80022d0:	4b95      	ldr	r3, [pc, #596]	; (8002528 <main+0x3a8>)
 80022d2:	4a93      	ldr	r2, [pc, #588]	; (8002520 <main+0x3a0>)
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
 80022d4:	4895      	ldr	r0, [pc, #596]	; (800252c <main+0x3ac>)
 80022d6:	4996      	ldr	r1, [pc, #600]	; (8002530 <main+0x3b0>)
  SD2.usart = USART2;
 80022d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  sdObjectInit(&SD3, NULL, notify3);
 80022dc:	f001 f838 	bl	8003350 <sdObjectInit.constprop.5>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80022e0:	f8d8 201c 	ldr.w	r2, [r8, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80022e4:	4893      	ldr	r0, [pc, #588]	; (8002534 <main+0x3b4>)
  ST_ENABLE_CLOCK();
 80022e6:	ea42 0209 	orr.w	r2, r2, r9
 80022ea:	f8c8 201c 	str.w	r2, [r8, #28]
  ST_ENABLE_STOP();
 80022ee:	6842      	ldr	r2, [r0, #4]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80022f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  ST_ENABLE_STOP();
 80022f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022f8:	6042      	str	r2, [r0, #4]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80022fa:	f641 451f 	movw	r5, #7199	; 0x1c1f
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80022fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8002302:	629d      	str	r5, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8002304:	62da      	str	r2, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8002306:	619c      	str	r4, [r3, #24]
  SD3.usart = USART3;
 8002308:	4a8b      	ldr	r2, [pc, #556]	; (8002538 <main+0x3b8>)
  STM32_ST_TIM->CCR[0] = 0;
 800230a:	635c      	str	r4, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 800230c:	60dc      	str	r4, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 800230e:	605c      	str	r4, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8002310:	f8c3 9014 	str.w	r9, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8002314:	f8c3 9000 	str.w	r9, [r3]
 8002318:	4b84      	ldr	r3, [pc, #528]	; (800252c <main+0x3ac>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800231a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 800231e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002322:	f06f 037f 	mvn.w	r3, #127	; 0x7f
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8002326:	f64f 0eff 	movw	lr, #63743	; 0xf8ff
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232a:	f04f 0c10 	mov.w	ip, #16
 800232e:	f04f 0b20 	mov.w	fp, #32
  SCB->VTOR = CORTEX_VTOR_INIT;
 8002332:	4a82      	ldr	r2, [pc, #520]	; (800253c <main+0x3bc>)
 8002334:	4d82      	ldr	r5, [pc, #520]	; (8002540 <main+0x3c0>)
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002336:	f5a0 2082 	sub.w	r0, r0, #266240	; 0x41000
 800233a:	f885 331c 	strb.w	r3, [r5, #796]	; 0x31c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800233e:	f8c5 1180 	str.w	r1, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002342:	6029      	str	r1, [r5, #0]
  SCB->VTOR = CORTEX_VTOR_INIT;
 8002344:	6094      	str	r4, [r2, #8]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002346:	68d1      	ldr	r1, [r2, #12]
  reg_value  =  (reg_value                                   |
 8002348:	4b7e      	ldr	r3, [pc, #504]	; (8002544 <main+0x3c4>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 800234a:	ea01 010e 	and.w	r1, r1, lr
  reg_value  =  (reg_value                                   |
 800234e:	430b      	orrs	r3, r1
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002350:	497d      	ldr	r1, [pc, #500]	; (8002548 <main+0x3c8>)
  SCB->AIRCR =  reg_value;
 8002352:	60d3      	str	r3, [r2, #12]
 8002354:	68cb      	ldr	r3, [r1, #12]
 8002356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800235a:	60cb      	str	r3, [r1, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800235c:	6801      	ldr	r1, [r0, #0]
  tqp->p_next = (thread_t *)tqp;
 800235e:	4b7b      	ldr	r3, [pc, #492]	; (800254c <main+0x3cc>)
 8002360:	ea41 0109 	orr.w	r1, r1, r9
 8002364:	6001      	str	r1, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8002366:	605b      	str	r3, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002368:	f882 c01f 	strb.w	ip, [r2, #31]
 800236c:	f882 b022 	strb.w	fp, [r2, #34]	; 0x22
  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8002370:	f103 021c 	add.w	r2, r3, #28
  ch.rlist.r_prio = NOPRIO;
 8002374:	609c      	str	r4, [r3, #8]
 8002376:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8002378:	621a      	str	r2, [r3, #32]
  tqp->p_next = (thread_t *)tqp;
 800237a:	601b      	str	r3, [r3, #0]
  tmp->cumulative = (rttime_t)0;
 800237c:	2200      	movs	r2, #0
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 800237e:	611b      	str	r3, [r3, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 8002380:	615b      	str	r3, [r3, #20]
  ch.vtlist.vt_delta = (systime_t)-1;
 8002382:	f8a3 a024 	strh.w	sl, [r3, #36]	; 0x24
  ch.vtlist.vt_lasttime = (systime_t)0;
 8002386:	84dc      	strh	r4, [r3, #38]	; 0x26
  ch.tm.offset = (rtcnt_t)0;
 8002388:	671c      	str	r4, [r3, #112]	; 0x70
 800238a:	9301      	str	r3, [sp, #4]
  tmp->cumulative = (rttime_t)0;
 800238c:	2300      	movs	r3, #0
  chTMStartMeasurementX(&tm);
 800238e:	a802      	add	r0, sp, #8
  tmp->cumulative = (rttime_t)0;
 8002390:	e9cd 2306 	strd	r2, r3, [sp, #24]
  tmp->best       = (rtcnt_t)-1;
 8002394:	f8cd a008 	str.w	sl, [sp, #8]
  tmp->worst      = (rtcnt_t)0;
 8002398:	9403      	str	r4, [sp, #12]
  tmp->last       = (rtcnt_t)0;
 800239a:	9404      	str	r4, [sp, #16]
  tmp->n          = (ucnt_t)0;
 800239c:	9405      	str	r4, [sp, #20]
  chTMStartMeasurementX(&tm);
 800239e:	f000 ffcf 	bl	8003340 <chTMStartMeasurementX.constprop.14>
  chTMStopMeasurementX(&tm);
 80023a2:	a802      	add	r0, sp, #8
 80023a4:	f7ff f994 	bl	80016d0 <chTMStopMeasurementX>
  tp->p_prio = prio;
 80023a8:	f04f 0e40 	mov.w	lr, #64	; 0x40
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80023ac:	4968      	ldr	r1, [pc, #416]	; (8002550 <main+0x3d0>)
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80023ae:	9b01      	ldr	r3, [sp, #4]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 80023b0:	4a68      	ldr	r2, [pc, #416]	; (8002554 <main+0x3d4>)
 80023b2:	f021 0a07 	bic.w	sl, r1, #7
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80023b6:	4868      	ldr	r0, [pc, #416]	; (8002558 <main+0x3d8>)
  ch.tm.offset = tm.last;
 80023b8:	9904      	ldr	r1, [sp, #16]
 80023ba:	f020 0c07 	bic.w	ip, r0, #7
 80023be:	6719      	str	r1, [r3, #112]	; 0x70
  REG_INSERT(tp);
 80023c0:	6958      	ldr	r0, [r3, #20]
 80023c2:	f102 0110 	add.w	r1, r2, #16
 80023c6:	6111      	str	r1, [r2, #16]
  tqp->p_prev = (thread_t *)tqp;
 80023c8:	6151      	str	r1, [r2, #20]
 80023ca:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80023ce:	6418      	str	r0, [r3, #64]	; 0x40
 80023d0:	6194      	str	r4, [r2, #24]
  tp->p_prio = prio;
 80023d2:	f8c3 e034 	str.w	lr, [r3, #52]	; 0x34
  tp->p_realprio = prio;
 80023d6:	f8c3 e068 	str.w	lr, [r3, #104]	; 0x68
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80023da:	f883 4049 	strb.w	r4, [r3, #73]	; 0x49
  tp->p_mtxlist = NULL;
 80023de:	665c      	str	r4, [r3, #100]	; 0x64
  tp->p_epending = (eventmask_t)0;
 80023e0:	661c      	str	r4, [r3, #96]	; 0x60
  tp->p_refs = (trefs_t)1;
 80023e2:	f883 904a 	strb.w	r9, [r3, #74]	; 0x4a
  tp->p_name = NULL;
 80023e6:	645c      	str	r4, [r3, #68]	; 0x44
  REG_INSERT(tp);
 80023e8:	63db      	str	r3, [r3, #60]	; 0x3c
 80023ea:	6101      	str	r1, [r0, #16]
 80023ec:	485b      	ldr	r0, [pc, #364]	; (800255c <main+0x3dc>)
 80023ee:	6159      	str	r1, [r3, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 80023f0:	6199      	str	r1, [r3, #24]
  tlp->p_next = (thread_t *)tlp;
 80023f2:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80023f6:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 80025a4 <main+0x424>
 80023fa:	6519      	str	r1, [r3, #80]	; 0x50
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80023fc:	4958      	ldr	r1, [pc, #352]	; (8002560 <main+0x3e0>)
  default_heap.h_free.h.u.next = NULL;
 80023fe:	6094      	str	r4, [r2, #8]
  default_heap.h_free.h.size = 0;
 8002400:	60d4      	str	r4, [r2, #12]
  default_heap.h_provider = chCoreAlloc;
 8002402:	6010      	str	r0, [r2, #0]
  tqp->p_next = (thread_t *)tqp;
 8002404:	f103 0254 	add.w	r2, r3, #84	; 0x54
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8002408:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 800240c:	655a      	str	r2, [r3, #84]	; 0x54
  tqp->p_prev = (thread_t *)tqp;
 800240e:	659a      	str	r2, [r3, #88]	; 0x58
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8002410:	f8ce c000 	str.w	ip, [lr]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8002414:	f8c1 a000 	str.w	sl, [r1]
 8002418:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 800241c:	b662      	cpsie	i
 800241e:	4c51      	ldr	r4, [pc, #324]	; (8002564 <main+0x3e4>)
 8002420:	6999      	ldr	r1, [r3, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 8002422:	464a      	mov	r2, r9
 8002424:	618c      	str	r4, [r1, #24]
 8002426:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800242a:	21d8      	movs	r1, #216	; 0xd8
 800242c:	4b4e      	ldr	r3, [pc, #312]	; (8002568 <main+0x3e8>)
 800242e:	f000 ff2f 	bl	8003290 <chThdCreateStatic.constprop.16>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 8002432:	4b4e      	ldr	r3, [pc, #312]	; (800256c <main+0x3ec>)
 8002434:	6183      	str	r3, [r0, #24]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002436:	f38b 8811 	msr	BASEPRI, fp
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 800243a:	4b39      	ldr	r3, [pc, #228]	; (8002520 <main+0x3a0>)
 800243c:	7a1b      	ldrb	r3, [r3, #8]
 800243e:	454b      	cmp	r3, r9
 8002440:	f000 81bc 	beq.w	80027bc <main+0x63c>
  sdp->state = SD_READY;
 8002444:	f04f 0b02 	mov.w	fp, #2
      rccEnableUART8(FALSE);
      nvicEnableVector(STM32_UART8_NUMBER, STM32_SERIAL_UART8_PRIORITY);
    }
#endif
  }
  usart_init(sdp, config);
 8002448:	4949      	ldr	r1, [pc, #292]	; (8002570 <main+0x3f0>)
 800244a:	4835      	ldr	r0, [pc, #212]	; (8002520 <main+0x3a0>)
 800244c:	f7fe fee8 	bl	8001220 <usart_init.lto_priv.50>
 8002450:	4b33      	ldr	r3, [pc, #204]	; (8002520 <main+0x3a0>)
 8002452:	f04f 0800 	mov.w	r8, #0
 8002456:	f883 b008 	strb.w	fp, [r3, #8]
 800245a:	f388 8811 	msr	BASEPRI, r8

void bluetoothInit(void) {

  sdStart(BLUETOOTHDRIVER, &SerialCfg);

  memset((void*) motorPwrCommand, 0, sizeof(motorPwrCommand));
 800245e:	f8df a148 	ldr.w	sl, [pc, #328]	; 80025a8 <main+0x428>

  chThdCreateStatic(BluetoothThd_wa, sizeof(BluetoothThd_wa),
 8002462:	4b44      	ldr	r3, [pc, #272]	; (8002574 <main+0x3f4>)
 8002464:	2245      	movs	r2, #69	; 0x45
 8002466:	f44f 71a4 	mov.w	r1, #328	; 0x148
  memset((void*) motorPwrCommand, 0, sizeof(motorPwrCommand));
 800246a:	f8ca 8000 	str.w	r8, [sl]
 800246e:	f8ca 8004 	str.w	r8, [sl, #4]
 8002472:	f8aa 8008 	strh.w	r8, [sl, #8]
  chThdCreateStatic(BluetoothThd_wa, sizeof(BluetoothThd_wa),
 8002476:	4840      	ldr	r0, [pc, #256]	; (8002578 <main+0x3f8>)
 8002478:	f000 ff0a 	bl	8003290 <chThdCreateStatic.constprop.16>
 800247c:	f04f 0920 	mov.w	r9, #32
 8002480:	f389 8811 	msr	BASEPRI, r9
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
 8002484:	4c3d      	ldr	r4, [pc, #244]	; (800257c <main+0x3fc>)
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
 8002486:	4820      	ldr	r0, [pc, #128]	; (8002508 <main+0x388>)
  pwmp->period = config->period;
 8002488:	6863      	ldr	r3, [r4, #4]
  pwmp->config = config;
 800248a:	607c      	str	r4, [r7, #4]
  pwmp->period = config->period;
 800248c:	60bb      	str	r3, [r7, #8]
  pwm_lld_start(pwmp);
 800248e:	f7fe feef 	bl	8001270 <pwm_lld_start>
  pwmp->enabled = 0;
 8002492:	f8c7 800c 	str.w	r8, [r7, #12]
  pwmp->state = PWM_READY;
 8002496:	f887 b000 	strb.w	fp, [r7]
 800249a:	f388 8811 	msr	BASEPRI, r8
 800249e:	f389 8811 	msr	BASEPRI, r9
  pwmp->period = config->period;
 80024a2:	6863      	ldr	r3, [r4, #4]
  pwm_lld_start(pwmp);
 80024a4:	4819      	ldr	r0, [pc, #100]	; (800250c <main+0x38c>)
  pwmp->config = config;
 80024a6:	6074      	str	r4, [r6, #4]
  pwmp->period = config->period;
 80024a8:	60b3      	str	r3, [r6, #8]
  pwm_lld_start(pwmp);
 80024aa:	f7fe fee1 	bl	8001270 <pwm_lld_start>
  pwmp->enabled = 0;
 80024ae:	f8c6 800c 	str.w	r8, [r6, #12]
  pwmp->state = PWM_READY;
 80024b2:	f886 b000 	strb.w	fp, [r6]
 80024b6:	f388 8811 	msr	BASEPRI, r8
void motorpwmInit(void) {

  pwmStart(&PWMD1, &pwmcfg);
  pwmStart(&PWMD3, &pwmcfg);

  memset((void*) motorPins, 0, sizeof(PWMpin_t) * MOTORNUM);
 80024ba:	4d31      	ldr	r5, [pc, #196]	; (8002580 <main+0x400>)
 80024bc:	4641      	mov	r1, r8
 80024be:	4628      	mov	r0, r5
 80024c0:	2228      	movs	r2, #40	; 0x28
 80024c2:	f000 ff75 	bl	80033b0 <memset>
  pin->channel = PWMchannel;
 80024c6:	f04f 0e03 	mov.w	lr, #3

void motorsInit(void) {

  PWMPins = getPins();

  memset((void*) motors, 0, sizeof(Motor_t) * MOTORNUM);
 80024ca:	4c2e      	ldr	r4, [pc, #184]	; (8002584 <main+0x404>)
 80024cc:	f885 e014 	strb.w	lr, [r5, #20]
 80024d0:	f885 e01c 	strb.w	lr, [r5, #28]
  pinInit(&motorPins[2], &PWMD3, 3);
  pinInit(&motorPins[3], &PWMD1, 3);
  pinInit(&motorPins[4], &PWMD3, 0);
  //pinInit(&motorPins[5], &PWMD3, 1);

  chThdCreateStatic(MotorPWMTHDwa, sizeof(MotorPWMTHDwa), NORMALPRIO + 10, MotorPWMTHD, NULL);
 80024d4:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <main+0x408>)
  pin->driver = PWMdriver;
 80024d6:	602f      	str	r7, [r5, #0]
 80024d8:	e068      	b.n	80025ac <main+0x42c>
 80024da:	bf00      	nop
 80024dc:	40020000 	.word	0x40020000
 80024e0:	40010800 	.word	0x40010800
 80024e4:	ffffbfdf 	.word	0xffffbfdf
 80024e8:	20000980 	.word	0x20000980
 80024ec:	40010c00 	.word	0x40010c00
 80024f0:	33334b33 	.word	0x33334b33
 80024f4:	40011000 	.word	0x40011000
 80024f8:	08003588 	.word	0x08003588
 80024fc:	40011400 	.word	0x40011400
 8002500:	88888844 	.word	0x88888844
 8002504:	40011800 	.word	0x40011800
 8002508:	20000c48 	.word	0x20000c48
 800250c:	20000c64 	.word	0x20000c64
 8002510:	40000400 	.word	0x40000400
 8002514:	20001248 	.word	0x20001248
 8002518:	08001f01 	.word	0x08001f01
 800251c:	40013800 	.word	0x40013800
 8002520:	200012e0 	.word	0x200012e0
 8002524:	08001f11 	.word	0x08001f11
 8002528:	40004400 	.word	0x40004400
 800252c:	20001378 	.word	0x20001378
 8002530:	08001f21 	.word	0x08001f21
 8002534:	e0042000 	.word	0xe0042000
 8002538:	40004800 	.word	0x40004800
 800253c:	e000ed00 	.word	0xe000ed00
 8002540:	e000e100 	.word	0xe000e100
 8002544:	05fa0300 	.word	0x05fa0300
 8002548:	e000edf0 	.word	0xe000edf0
 800254c:	20001410 	.word	0x20001410
 8002550:	20005000 	.word	0x20005000
 8002554:	20000e08 	.word	0x20000e08
 8002558:	200016c7 	.word	0x200016c7
 800255c:	08001161 	.word	0x08001161
 8002560:	20000e28 	.word	0x20000e28
 8002564:	080035a0 	.word	0x080035a0
 8002568:	08001211 	.word	0x08001211
 800256c:	080035c0 	.word	0x080035c0
 8002570:	080034d0 	.word	0x080034d0
 8002574:	08002da1 	.word	0x08002da1
 8002578:	20000838 	.word	0x20000838
 800257c:	20000800 	.word	0x20000800
 8002580:	200015c4 	.word	0x200015c4
 8002584:	200015f8 	.word	0x200015f8
 8002588:	08002aa1 	.word	0x08002aa1
 800258c:	40021000 	.word	0x40021000
 8002590:	3883b4bb 	.word	0x3883b4bb
 8002594:	bb334b33 	.word	0xbb334b33
 8002598:	88388888 	.word	0x88388888
 800259c:	40005400 	.word	0x40005400
 80025a0:	40012c00 	.word	0x40012c00
 80025a4:	200010fc 	.word	0x200010fc
 80025a8:	200015ec 	.word	0x200015ec
 80025ac:	60ae      	str	r6, [r5, #8]
  pin->channel = PWMchannel;
 80025ae:	f885 b00c 	strb.w	fp, [r5, #12]
  pin->driver = PWMdriver;
 80025b2:	612e      	str	r6, [r5, #16]
 80025b4:	61af      	str	r7, [r5, #24]
 80025b6:	622e      	str	r6, [r5, #32]
  chThdCreateStatic(MotorPWMTHDwa, sizeof(MotorPWMTHDwa), NORMALPRIO + 10, MotorPWMTHD, NULL);
 80025b8:	224a      	movs	r2, #74	; 0x4a
 80025ba:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80025be:	4896      	ldr	r0, [pc, #600]	; (8002818 <main+0x698>)
 80025c0:	f000 fe66 	bl	8003290 <chThdCreateStatic.constprop.16>
 80025c4:	4641      	mov	r1, r8
 80025c6:	4620      	mov	r0, r4
 80025c8:	2250      	movs	r2, #80	; 0x50
 80025ca:	f000 fef1 	bl	80033b0 <memset>
  motor_setting->INB_pin = inbpin;
 80025ce:	2701      	movs	r7, #1
 80025d0:	f04f 0c08 	mov.w	ip, #8
  motor_setting->INA_pin = inapin;
 80025d4:	2604      	movs	r6, #4
  motor_setting->INB_pin = inbpin;
 80025d6:	230d      	movs	r3, #13
 80025d8:	f04f 0e05 	mov.w	lr, #5
  motor_setting->INA_pin = inapin;
 80025dc:	220c      	movs	r2, #12
 80025de:	210e      	movs	r1, #14
  motor_setting->INB_pin = inbpin;
 80025e0:	200f      	movs	r0, #15
 80025e2:	7367      	strb	r7, [r4, #13]
  motor_setting->INA_pin = inapin;
 80025e4:	7726      	strb	r6, [r4, #28]
  motor_setting->PWM_pin = pwm_setting;
 80025e6:	eb05 070c 	add.w	r7, r5, ip
 80025ea:	f105 0610 	add.w	r6, r5, #16
 80025ee:	6127      	str	r7, [r4, #16]
 80025f0:	6226      	str	r6, [r4, #32]
  motor_setting->INA_port = inaport;
 80025f2:	4f8a      	ldr	r7, [pc, #552]	; (800281c <main+0x69c>)
  motor_setting->INB_port = inbport;
 80025f4:	4e8a      	ldr	r6, [pc, #552]	; (8002820 <main+0x6a0>)
  motor_setting->PWM_pin = pwm_setting;
 80025f6:	6025      	str	r5, [r4, #0]
  motor_setting->INB_pin = inbpin;
 80025f8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  motor_setting->PWM_pin = pwm_setting;
 80025fc:	f105 0318 	add.w	r3, r5, #24
 8002600:	444d      	add	r5, r9
  motor_setting->INA_pin = inapin;
 8002602:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  motor_setting->PWM_pin = pwm_setting;
 8002606:	6323      	str	r3, [r4, #48]	; 0x30
  motor_setting->INA_pin = inapin;
 8002608:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  motor_setting->INB_pin = inbpin;
 800260c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  motorSetup(motors + 1, PWMPins + 1, GPIOA, 4, GPIOA, 5);
  motorSetup(motors + 2, PWMPins + 2, GPIOA, 12, GPIOB, 13);
  motorSetup(motors + 3, PWMPins + 3, GPIOB, 14, GPIOB, 15);
  motorSetup(motors + 4, PWMPins + 4, GPIOB, 5, GPIOB, 8);

  chThdCreateStatic(MotorThdwa, sizeof(MotorThdwa), NORMALPRIO + 7, MotorThd, NULL);
 8002610:	4b84      	ldr	r3, [pc, #528]	; (8002824 <main+0x6a4>)
  motor_setting->PWM_pin = pwm_setting;
 8002612:	6425      	str	r5, [r4, #64]	; 0x40
  chThdCreateStatic(MotorThdwa, sizeof(MotorThdwa), NORMALPRIO + 7, MotorThd, NULL);
 8002614:	2247      	movs	r2, #71	; 0x47
 8002616:	f44f 71a4 	mov.w	r1, #328	; 0x148
  motor_setting->INB_pin = inbpin;
 800261a:	f884 c04d 	strb.w	ip, [r4, #77]	; 0x4d
  motor_setting->INA_port = inaport;
 800261e:	6067      	str	r7, [r4, #4]
  motor_setting->INB_port = inbport;
 8002620:	60a7      	str	r7, [r4, #8]
  motor_setting->INA_port = inaport;
 8002622:	6167      	str	r7, [r4, #20]
  motor_setting->INB_port = inbport;
 8002624:	61a7      	str	r7, [r4, #24]
  motor_setting->INA_port = inaport;
 8002626:	6267      	str	r7, [r4, #36]	; 0x24
  motor_setting->INB_pin = inbpin;
 8002628:	f884 e01d 	strb.w	lr, [r4, #29]
  motor_setting->INA_pin = inapin;
 800262c:	f884 e04c 	strb.w	lr, [r4, #76]	; 0x4c
  motor_setting->INB_port = inbport;
 8002630:	62a6      	str	r6, [r4, #40]	; 0x28
  motor_setting->INA_port = inaport;
 8002632:	6366      	str	r6, [r4, #52]	; 0x34
  motor_setting->INB_port = inbport;
 8002634:	63a6      	str	r6, [r4, #56]	; 0x38
  motor_setting->INA_port = inaport;
 8002636:	6466      	str	r6, [r4, #68]	; 0x44
  motor_setting->INB_port = inbport;
 8002638:	64a6      	str	r6, [r4, #72]	; 0x48
  chThdCreateStatic(MotorThdwa, sizeof(MotorThdwa), NORMALPRIO + 7, MotorThd, NULL);
 800263a:	487b      	ldr	r0, [pc, #492]	; (8002828 <main+0x6a8>)
 800263c:	f000 fe28 	bl	8003290 <chThdCreateStatic.constprop.16>
 8002640:	f389 8811 	msr	BASEPRI, r9
  if (sdp->state == SD_STOP) {
 8002644:	4b79      	ldr	r3, [pc, #484]	; (800282c <main+0x6ac>)
 8002646:	7a1b      	ldrb	r3, [r3, #8]
 8002648:	2b01      	cmp	r3, #1
 800264a:	f000 8087 	beq.w	800275c <main+0x5dc>
  usart_init(sdp, config);
 800264e:	4978      	ldr	r1, [pc, #480]	; (8002830 <main+0x6b0>)
 8002650:	4876      	ldr	r0, [pc, #472]	; (800282c <main+0x6ac>)
 8002652:	f7fe fde5 	bl	8001220 <usart_init.lto_priv.50>
 8002656:	2302      	movs	r3, #2
 8002658:	4a74      	ldr	r2, [pc, #464]	; (800282c <main+0x6ac>)
 800265a:	2600      	movs	r6, #0
 800265c:	7213      	strb	r3, [r2, #8]
 800265e:	f386 8811 	msr	BASEPRI, r6

  sdStart(IMUDRIVER, &SerialCfg);

  memset((void*) &imu, 0, sizeof(imu_t));

  memset((void*) imusdrxbuf, 0, SERIAL_BUFFERS_SIZE);
 8002662:	2520      	movs	r5, #32
  memset((void*) &imu, 0, sizeof(imu_t));
 8002664:	4631      	mov	r1, r6
 8002666:	2226      	movs	r2, #38	; 0x26
 8002668:	4872      	ldr	r0, [pc, #456]	; (8002834 <main+0x6b4>)
 800266a:	f000 fea1 	bl	80033b0 <memset>
  memset((void*) imusdrxbuf, 0, SERIAL_BUFFERS_SIZE);
 800266e:	4631      	mov	r1, r6
 8002670:	462a      	mov	r2, r5
 8002672:	4871      	ldr	r0, [pc, #452]	; (8002838 <main+0x6b8>)
 8002674:	f000 fe9c 	bl	80033b0 <memset>

  chThdCreateStatic(imuThd_wa, sizeof(imuThd_wa),
 8002678:	4b70      	ldr	r3, [pc, #448]	; (800283c <main+0x6bc>)
 800267a:	2244      	movs	r2, #68	; 0x44
 800267c:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 8002680:	486f      	ldr	r0, [pc, #444]	; (8002840 <main+0x6c0>)
 8002682:	f000 fe05 	bl	8003290 <chThdCreateStatic.constprop.16>
 8002686:	f385 8811 	msr	BASEPRI, r5
  if (sdp->state == SD_STOP) {
 800268a:	4b6e      	ldr	r3, [pc, #440]	; (8002844 <main+0x6c4>)
 800268c:	7a1b      	ldrb	r3, [r3, #8]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d038      	beq.n	8002704 <main+0x584>
  usart_init(sdp, config);
 8002692:	496d      	ldr	r1, [pc, #436]	; (8002848 <main+0x6c8>)
 8002694:	486b      	ldr	r0, [pc, #428]	; (8002844 <main+0x6c4>)
 8002696:	f7fe fdc3 	bl	8001220 <usart_init.lto_priv.50>
 800269a:	2302      	movs	r3, #2
 800269c:	4a69      	ldr	r2, [pc, #420]	; (8002844 <main+0x6c4>)
 800269e:	2100      	movs	r1, #0
 80026a0:	7213      	strb	r3, [r2, #8]
 80026a2:	f381 8811 	msr	BASEPRI, r1

void tofInit(void) {

  sdStart(TOFDRIVER, &SerialCfg);

  distance = 0;
 80026a6:	4a69      	ldr	r2, [pc, #420]	; (800284c <main+0x6cc>)

  memset((void*) &height, 0, sizeof(height));
 80026a8:	4869      	ldr	r0, [pc, #420]	; (8002850 <main+0x6d0>)

  imu_data = getIMU();
 80026aa:	4d6a      	ldr	r5, [pc, #424]	; (8002854 <main+0x6d4>)
 80026ac:	4e61      	ldr	r6, [pc, #388]	; (8002834 <main+0x6b4>)
  distance = 0;
 80026ae:	8011      	strh	r1, [r2, #0]
  memset((void*) &height, 0, sizeof(height));
 80026b0:	6001      	str	r1, [r0, #0]
  imu_data = getIMU();
 80026b2:	602e      	str	r6, [r5, #0]

  chThdCreateStatic(TofThd_wa, sizeof(TofThd_wa),
 80026b4:	4b68      	ldr	r3, [pc, #416]	; (8002858 <main+0x6d8>)
 80026b6:	2243      	movs	r2, #67	; 0x43
 80026b8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80026bc:	4867      	ldr	r0, [pc, #412]	; (800285c <main+0x6dc>)

  imuInit();

  tofInit();

  motor = getMotor();
 80026be:	4e68      	ldr	r6, [pc, #416]	; (8002860 <main+0x6e0>)
  bthCommand = getBluetoothCommand();
 80026c0:	4d68      	ldr	r5, [pc, #416]	; (8002864 <main+0x6e4>)
 80026c2:	f000 fde5 	bl	8003290 <chThdCreateStatic.constprop.16>

  static uint8_t i = 0;

  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 80026c6:	4b68      	ldr	r3, [pc, #416]	; (8002868 <main+0x6e8>)
 80026c8:	2240      	movs	r2, #64	; 0x40
 80026ca:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80026ce:	4867      	ldr	r0, [pc, #412]	; (800286c <main+0x6ec>)
  motor = getMotor();
 80026d0:	6034      	str	r4, [r6, #0]
  bthCommand = getBluetoothCommand();
 80026d2:	f8c5 a000 	str.w	sl, [r5]
 80026d6:	2705      	movs	r7, #5
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 80026d8:	f000 fdda 	bl	8003290 <chThdCreateStatic.constprop.16>
 80026dc:	4c64      	ldr	r4, [pc, #400]	; (8002870 <main+0x6f0>)
 80026de:	6828      	ldr	r0, [r5, #0]
 80026e0:	6831      	ldr	r1, [r6, #0]
 80026e2:	1e82      	subs	r2, r0, #2
 80026e4:	3008      	adds	r0, #8

  while (true) {

    for (i = 0; i < MOTORNUM; i++) {
//      pins[i].dutycycle = pins[i].dutycycle >= 10000 ? 0 : pins[i].dutycycle + 200;
      motor[i].power = bthCommand[i] * 10;
 80026e6:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 80026ea:	3110      	adds	r1, #16
 80026ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026f0:	005b      	lsls	r3, r3, #1
    for (i = 0; i < MOTORNUM; i++) {
 80026f2:	4290      	cmp	r0, r2
      motor[i].power = bthCommand[i] * 10;
 80026f4:	f821 3c02 	strh.w	r3, [r1, #-2]
    for (i = 0; i < MOTORNUM; i++) {
 80026f8:	d1f5      	bne.n	80026e6 <main+0x566>
    }



    chThdSleepMilliseconds(20);
 80026fa:	20c8      	movs	r0, #200	; 0xc8
 80026fc:	7027      	strb	r7, [r4, #0]
 80026fe:	f7ff fa27 	bl	8001b50 <chThdSleep>
 8002702:	e7ec      	b.n	80026de <main+0x55e>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002704:	26c0      	movs	r6, #192	; 0xc0
      rccEnableUSART1(FALSE);
 8002706:	4a5b      	ldr	r2, [pc, #364]	; (8002874 <main+0x6f4>)
    if (&SD2 == sdp) {
 8002708:	485b      	ldr	r0, [pc, #364]	; (8002878 <main+0x6f8>)
      rccEnableUSART1(FALSE);
 800270a:	6991      	ldr	r1, [r2, #24]
 800270c:	4b5b      	ldr	r3, [pc, #364]	; (800287c <main+0x6fc>)
 800270e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002712:	6191      	str	r1, [r2, #24]
    if (&SD2 == sdp) {
 8002714:	494b      	ldr	r1, [pc, #300]	; (8002844 <main+0x6c4>)
 8002716:	f883 6325 	strb.w	r6, [r3, #805]	; 0x325
 800271a:	4281      	cmp	r1, r0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800271c:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002720:	605d      	str	r5, [r3, #4]
 8002722:	d109      	bne.n	8002738 <main+0x5b8>
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002724:	2040      	movs	r0, #64	; 0x40
      rccEnableUSART2(FALSE);
 8002726:	69d1      	ldr	r1, [r2, #28]
 8002728:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800272c:	61d1      	str	r1, [r2, #28]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800272e:	f883 6326 	strb.w	r6, [r3, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002732:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002736:	6058      	str	r0, [r3, #4]
    if (&SD3 == sdp) {
 8002738:	4b42      	ldr	r3, [pc, #264]	; (8002844 <main+0x6c4>)
 800273a:	4a3c      	ldr	r2, [pc, #240]	; (800282c <main+0x6ac>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d1a8      	bne.n	8002692 <main+0x512>
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002740:	2180      	movs	r1, #128	; 0x80
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002742:	25c0      	movs	r5, #192	; 0xc0
      rccEnableUSART3(FALSE);
 8002744:	484b      	ldr	r0, [pc, #300]	; (8002874 <main+0x6f4>)
 8002746:	4b4d      	ldr	r3, [pc, #308]	; (800287c <main+0x6fc>)
 8002748:	69c2      	ldr	r2, [r0, #28]
 800274a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800274e:	61c2      	str	r2, [r0, #28]
 8002750:	f883 5327 	strb.w	r5, [r3, #807]	; 0x327
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002754:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002758:	6059      	str	r1, [r3, #4]
 800275a:	e79a      	b.n	8002692 <main+0x512>
    if (&SD1 == sdp) {
 800275c:	4b33      	ldr	r3, [pc, #204]	; (800282c <main+0x6ac>)
 800275e:	4a39      	ldr	r2, [pc, #228]	; (8002844 <main+0x6c4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d10c      	bne.n	800277e <main+0x5fe>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002764:	20c0      	movs	r0, #192	; 0xc0
      rccEnableUSART1(FALSE);
 8002766:	4943      	ldr	r1, [pc, #268]	; (8002874 <main+0x6f4>)
 8002768:	4b44      	ldr	r3, [pc, #272]	; (800287c <main+0x6fc>)
 800276a:	698a      	ldr	r2, [r1, #24]
 800276c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002770:	618a      	str	r2, [r1, #24]
 8002772:	f883 0325 	strb.w	r0, [r3, #805]	; 0x325
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002776:	f8c3 9184 	str.w	r9, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800277a:	f8c3 9004 	str.w	r9, [r3, #4]
    if (&SD2 == sdp) {
 800277e:	4b2b      	ldr	r3, [pc, #172]	; (800282c <main+0x6ac>)
 8002780:	4a3d      	ldr	r2, [pc, #244]	; (8002878 <main+0x6f8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d10c      	bne.n	80027a0 <main+0x620>
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002786:	2140      	movs	r1, #64	; 0x40
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002788:	25c0      	movs	r5, #192	; 0xc0
      rccEnableUSART2(FALSE);
 800278a:	483a      	ldr	r0, [pc, #232]	; (8002874 <main+0x6f4>)
 800278c:	4b3b      	ldr	r3, [pc, #236]	; (800287c <main+0x6fc>)
 800278e:	69c2      	ldr	r2, [r0, #28]
 8002790:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002794:	61c2      	str	r2, [r0, #28]
 8002796:	f883 5326 	strb.w	r5, [r3, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800279a:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800279e:	6059      	str	r1, [r3, #4]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80027a0:	2180      	movs	r1, #128	; 0x80
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80027a2:	25c0      	movs	r5, #192	; 0xc0
      rccEnableUSART3(FALSE);
 80027a4:	4833      	ldr	r0, [pc, #204]	; (8002874 <main+0x6f4>)
 80027a6:	4b35      	ldr	r3, [pc, #212]	; (800287c <main+0x6fc>)
 80027a8:	69c2      	ldr	r2, [r0, #28]
 80027aa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80027ae:	61c2      	str	r2, [r0, #28]
 80027b0:	f883 5327 	strb.w	r5, [r3, #807]	; 0x327
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80027b4:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80027b8:	6059      	str	r1, [r3, #4]
 80027ba:	e748      	b.n	800264e <main+0x4ce>
    if (&SD1 == sdp) {
 80027bc:	4b2e      	ldr	r3, [pc, #184]	; (8002878 <main+0x6f8>)
 80027be:	4a21      	ldr	r2, [pc, #132]	; (8002844 <main+0x6c4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d10c      	bne.n	80027de <main+0x65e>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80027c4:	22c0      	movs	r2, #192	; 0xc0
      rccEnableUSART1(FALSE);
 80027c6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80027ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027ce:	f8c8 3018 	str.w	r3, [r8, #24]
 80027d2:	f885 2325 	strb.w	r2, [r5, #805]	; 0x325
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80027d6:	f8c5 b184 	str.w	fp, [r5, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80027da:	f8c5 b004 	str.w	fp, [r5, #4]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80027de:	2040      	movs	r0, #64	; 0x40
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80027e0:	24c0      	movs	r4, #192	; 0xc0
      rccEnableUSART2(FALSE);
 80027e2:	4a24      	ldr	r2, [pc, #144]	; (8002874 <main+0x6f4>)
 80027e4:	4b25      	ldr	r3, [pc, #148]	; (800287c <main+0x6fc>)
 80027e6:	69d1      	ldr	r1, [r2, #28]
 80027e8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80027ec:	61d1      	str	r1, [r2, #28]
 80027ee:	f883 4326 	strb.w	r4, [r3, #806]	; 0x326
    if (&SD3 == sdp) {
 80027f2:	4921      	ldr	r1, [pc, #132]	; (8002878 <main+0x6f8>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80027f4:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80027f8:	6058      	str	r0, [r3, #4]
 80027fa:	480c      	ldr	r0, [pc, #48]	; (800282c <main+0x6ac>)
 80027fc:	4281      	cmp	r1, r0
 80027fe:	f47f ae21 	bne.w	8002444 <main+0x2c4>
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002802:	2080      	movs	r0, #128	; 0x80
      rccEnableUSART3(FALSE);
 8002804:	69d1      	ldr	r1, [r2, #28]
 8002806:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 800280a:	61d1      	str	r1, [r2, #28]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800280c:	f883 4327 	strb.w	r4, [r3, #807]	; 0x327
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002810:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002814:	6058      	str	r0, [r3, #4]
 8002816:	e615      	b.n	8002444 <main+0x2c4>
 8002818:	200009b8 	.word	0x200009b8
 800281c:	40010800 	.word	0x40010800
 8002820:	40010c00 	.word	0x40010c00
 8002824:	080029d1 	.word	0x080029d1
 8002828:	20000b00 	.word	0x20000b00
 800282c:	20001378 	.word	0x20001378
 8002830:	080034f0 	.word	0x080034f0
 8002834:	20001578 	.word	0x20001578
 8002838:	200015a4 	.word	0x200015a4
 800283c:	08002f91 	.word	0x08002f91
 8002840:	20000e30 	.word	0x20000e30
 8002844:	20001248 	.word	0x20001248
 8002848:	080034e0 	.word	0x080034e0
 800284c:	20001562 	.word	0x20001562
 8002850:	20001568 	.word	0x20001568
 8002854:	200015a0 	.word	0x200015a0
 8002858:	08002b41 	.word	0x08002b41
 800285c:	20000c80 	.word	0x20000c80
 8002860:	200010f8 	.word	0x200010f8
 8002864:	20000e00 	.word	0x20000e00
 8002868:	08001f31 	.word	0x08001f31
 800286c:	20001100 	.word	0x20001100
 8002870:	20000e2c 	.word	0x20000e2c
 8002874:	40021000 	.word	0x40021000
 8002878:	200012e0 	.word	0x200012e0
 800287c:	e000e100 	.word	0xe000e100

08002880 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8002880:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <__early_init+0x70>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8002882:	461a      	mov	r2, r3
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8002884:	6819      	ldr	r1, [r3, #0]
 8002886:	f041 0101 	orr.w	r1, r1, #1
 800288a:	6019      	str	r1, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800288c:	6813      	ldr	r3, [r2, #0]
 800288e:	0798      	lsls	r0, r3, #30
 8002890:	d5fc      	bpl.n	800288c <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8002892:	2000      	movs	r0, #0
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002894:	6813      	ldr	r3, [r2, #0]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002896:	4916      	ldr	r1, [pc, #88]	; (80028f0 <__early_init+0x70>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002898:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 800289c:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800289e:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80028a0:	684b      	ldr	r3, [r1, #4]
 80028a2:	f013 0f0c 	tst.w	r3, #12
 80028a6:	d1fb      	bne.n	80028a0 <__early_init+0x20>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 80028a8:	680b      	ldr	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 80028aa:	4a11      	ldr	r2, [pc, #68]	; (80028f0 <__early_init+0x70>)
  RCC->CR |= RCC_CR_HSEON;
 80028ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b0:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 80028b2:	6813      	ldr	r3, [r2, #0]
 80028b4:	0399      	lsls	r1, r3, #14
 80028b6:	d5fc      	bpl.n	80028b2 <__early_init+0x32>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 80028b8:	6853      	ldr	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80028ba:	490d      	ldr	r1, [pc, #52]	; (80028f0 <__early_init+0x70>)
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 80028bc:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80028c0:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 80028c2:	6813      	ldr	r3, [r2, #0]
 80028c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028c8:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80028ca:	680b      	ldr	r3, [r1, #0]
 80028cc:	019b      	lsls	r3, r3, #6
 80028ce:	d5fc      	bpl.n	80028ca <__early_init+0x4a>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80028d0:	2212      	movs	r2, #18
 80028d2:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <__early_init+0x74>)
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 80028d4:	4808      	ldr	r0, [pc, #32]	; (80028f8 <__early_init+0x78>)
 80028d6:	6048      	str	r0, [r1, #4]
  FLASH->ACR = STM32_FLASHBITS;
 80028d8:	601a      	str	r2, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 80028da:	684b      	ldr	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80028dc:	4a04      	ldr	r2, [pc, #16]	; (80028f0 <__early_init+0x70>)
  RCC->CFGR |= STM32_SW;
 80028de:	f043 0302 	orr.w	r3, r3, #2
 80028e2:	604b      	str	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80028e4:	6853      	ldr	r3, [r2, #4]
 80028e6:	f003 030c 	and.w	r3, r3, #12
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d1fa      	bne.n	80028e4 <__early_init+0x64>
 * any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 80028ee:	4770      	bx	lr
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40022000 	.word	0x40022000
 80028f8:	001d6400 	.word	0x001d6400
 80028fc:	00000000 	.word	0x00000000

08002900 <arm_cos_f32>:
 * @return cos(x).
 */

float32_t arm_cos_f32(
  float32_t x)
{
 8002900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 8002902:	491f      	ldr	r1, [pc, #124]	; (8002980 <arm_cos_f32+0x80>)
 8002904:	f7fe f9dc 	bl	8000cc0 <__aeabi_fmul>
 8002908:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800290c:	f7fe f8ce 	bl	8000aac <__addsf3>
 8002910:	4604      	mov	r4, r0

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8002912:	f7fe fb9d 	bl	8001050 <__aeabi_f2iz>

  /* Make negative values towards -infinity */
  if(in < 0.0f)
 8002916:	2100      	movs	r1, #0
  n = (int32_t) in;
 8002918:	4605      	mov	r5, r0
  if(in < 0.0f)
 800291a:	4620      	mov	r0, r4
 800291c:	f7fe fb6e 	bl	8000ffc <__aeabi_fcmplt>
 8002920:	b100      	cbz	r0, 8002924 <arm_cos_f32+0x24>
  {
    n--;
 8002922:	3d01      	subs	r5, #1
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8002924:	4628      	mov	r0, r5
 8002926:	f7fe f975 	bl	8000c14 <__aeabi_i2f>
 800292a:	4601      	mov	r1, r0
 800292c:	4620      	mov	r0, r4
 800292e:	f7fe f8bb 	bl	8000aa8 <__aeabi_fsub>

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8002932:	f04f 4188 	mov.w	r1, #1140850688	; 0x44000000
 8002936:	f7fe f9c3 	bl	8000cc0 <__aeabi_fmul>
 800293a:	4605      	mov	r5, r0
  index = ((uint16_t)findex) & 0x1ff;
 800293c:	f7fe fbb0 	bl	80010a0 <__aeabi_f2uiz>
 8002940:	f3c0 0408 	ubfx	r4, r0, #0, #9

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8002944:	4620      	mov	r0, r4
 8002946:	f7fe f961 	bl	8000c0c <__aeabi_ui2f>
 800294a:	4601      	mov	r1, r0
 800294c:	4628      	mov	r0, r5
 800294e:	f7fe f8ab 	bl	8000aa8 <__aeabi_fsub>

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 8002952:	4e0c      	ldr	r6, [pc, #48]	; (8002984 <arm_cos_f32+0x84>)
  fract = findex - (float32_t) index;
 8002954:	4605      	mov	r5, r0
  b = sinTable_f32[index+1];

  /* Linear interpolation process */
  cosVal = (1.0f-fract)*a + fract*b;
 8002956:	4601      	mov	r1, r0
 8002958:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800295c:	f7fe f8a4 	bl	8000aa8 <__aeabi_fsub>
 8002960:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8002964:	f7fe f9ac 	bl	8000cc0 <__aeabi_fmul>
  b = sinTable_f32[index+1];
 8002968:	3401      	adds	r4, #1
  cosVal = (1.0f-fract)*a + fract*b;
 800296a:	4607      	mov	r7, r0
 800296c:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8002970:	4628      	mov	r0, r5
 8002972:	f7fe f9a5 	bl	8000cc0 <__aeabi_fmul>
 8002976:	4601      	mov	r1, r0
 8002978:	4638      	mov	r0, r7
 800297a:	f7fe f897 	bl	8000aac <__addsf3>

  /* Return the output value */
  return (cosVal);
}
 800297e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002980:	3e22f983 	.word	0x3e22f983
 8002984:	080035d0 	.word	0x080035d0
	...

08002990 <chEvtWaitAny.constprop.9>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 8002990:	4a0d      	ldr	r2, [pc, #52]	; (80029c8 <chEvtWaitAny.constprop.9+0x38>)
eventmask_t chEvtWaitAny(eventmask_t events) {
 8002992:	b510      	push	{r4, lr}
 8002994:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8002996:	6994      	ldr	r4, [r2, #24]
 8002998:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800299c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800299e:	f013 0001 	ands.w	r0, r3, #1
 80029a2:	d007      	beq.n	80029b4 <chEvtWaitAny.constprop.9+0x24>
 80029a4:	f06f 0201 	mvn.w	r2, #1
    ctp->p_u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
    m = ctp->p_epending & events;
  }
  ctp->p_epending &= ~m;
 80029a8:	4013      	ands	r3, r2
 80029aa:	6363      	str	r3, [r4, #52]	; 0x34
 80029ac:	2300      	movs	r3, #0
 80029ae:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 80029b2:	bd10      	pop	{r4, pc}
    ctp->p_u.ewmask = events;
 80029b4:	2301      	movs	r3, #1
    chSchGoSleepS(CH_STATE_WTOREVT);
 80029b6:	200a      	movs	r0, #10
    ctp->p_u.ewmask = events;
 80029b8:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 80029ba:	f7fe fed1 	bl	8001760 <chSchGoSleepS>
    m = ctp->p_epending & events;
 80029be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029c0:	f003 0001 	and.w	r0, r3, #1
 80029c4:	43c2      	mvns	r2, r0
 80029c6:	e7ef      	b.n	80029a8 <chEvtWaitAny.constprop.9+0x18>
 80029c8:	20001410 	.word	0x20001410
 80029cc:	00000000 	.word	0x00000000

080029d0 <MotorThd.lto_priv.45>:
static THD_FUNCTION(MotorThd, arg) {
 80029d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return ch.rlist.r_current;
 80029d4:	4f2c      	ldr	r7, [pc, #176]	; (8002a88 <MotorThd.lto_priv.45+0xb8>)
  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 80029d6:	69bb      	ldr	r3, [r7, #24]
  while (!chThdShouldTerminateX()) {
 80029d8:	7f5b      	ldrb	r3, [r3, #29]
 80029da:	075a      	lsls	r2, r3, #29
 80029dc:	d451      	bmi.n	8002a82 <MotorThd.lto_priv.45+0xb2>
 80029de:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8002a94 <MotorThd.lto_priv.45+0xc4>
 80029e2:	4c2a      	ldr	r4, [pc, #168]	; (8002a8c <MotorThd.lto_priv.45+0xbc>)
    motor_setting->PWM_pin->dutycycle = -motor_setting->power < MAXPWR ?
 80029e4:	4e2a      	ldr	r6, [pc, #168]	; (8002a90 <MotorThd.lto_priv.45+0xc0>)
    for (ii = 0; ii < MOTORNUM; ii++) {
 80029e6:	2300      	movs	r3, #0
    palClearPad(motor_setting->INA_port, motor_setting->INA_pin);
 80029e8:	f04f 0e01 	mov.w	lr, #1
    for (ii = 0; ii < MOTORNUM; ii++) {
 80029ec:	461a      	mov	r2, r3
    motor_setting->PWM_pin->dutycycle = -motor_setting->power < MAXPWR ?
 80029ee:	f242 7c10 	movw	ip, #10000	; 0x2710
 80029f2:	e017      	b.n	8002a24 <MotorThd.lto_priv.45+0x54>
                                        motor_setting->power : MAXPWR;
 80029f4:	4561      	cmp	r1, ip
 80029f6:	bfa8      	it	ge
 80029f8:	4661      	movge	r1, ip
    palSetPad(motor_setting->INA_port, motor_setting->INA_pin);
 80029fa:	f892 900c 	ldrb.w	r9, [r2, #12]
 80029fe:	6855      	ldr	r5, [r2, #4]
 8002a00:	fa0e f009 	lsl.w	r0, lr, r9
 8002a04:	6128      	str	r0, [r5, #16]
    palClearPad(motor_setting->INB_port, motor_setting->INB_pin);
 8002a06:	7b50      	ldrb	r0, [r2, #13]
    for (ii = 0; ii < MOTORNUM; ii++) {
 8002a08:	3301      	adds	r3, #1
    palClearPad(motor_setting->INB_port, motor_setting->INB_pin);
 8002a0a:	f8d2 9008 	ldr.w	r9, [r2, #8]
    motor_setting->PWM_pin->dutycycle = motor_setting->power < MAXPWR ?
 8002a0e:	f854 5008 	ldr.w	r5, [r4, r8]
    for (ii = 0; ii < MOTORNUM; ii++) {
 8002a12:	b2db      	uxtb	r3, r3
    palClearPad(motor_setting->INB_port, motor_setting->INB_pin);
 8002a14:	fa0e f000 	lsl.w	r0, lr, r0
    for (ii = 0; ii < MOTORNUM; ii++) {
 8002a18:	2b05      	cmp	r3, #5
    palClearPad(motor_setting->INB_port, motor_setting->INB_pin);
 8002a1a:	f8c9 0014 	str.w	r0, [r9, #20]
 8002a1e:	461a      	mov	r2, r3
    motor_setting->PWM_pin->dutycycle = motor_setting->power < MAXPWR ?
 8002a20:	80e9      	strh	r1, [r5, #6]
    for (ii = 0; ii < MOTORNUM; ii++) {
 8002a22:	d025      	beq.n	8002a70 <MotorThd.lto_priv.45+0xa0>
      motorSet(motors + ii);
 8002a24:	ea4f 1802 	mov.w	r8, r2, lsl #4
 8002a28:	eb04 0208 	add.w	r2, r4, r8
  if (motor_setting->power > 0) {
 8002a2c:	f9b2 100e 	ldrsh.w	r1, [r2, #14]
 8002a30:	2900      	cmp	r1, #0
 8002a32:	dcdf      	bgt.n	80029f4 <MotorThd.lto_priv.45+0x24>
    motor_setting->PWM_pin->dutycycle = -motor_setting->power < MAXPWR ?
 8002a34:	42b1      	cmp	r1, r6
 8002a36:	f1c1 0100 	rsb	r1, r1, #0
 8002a3a:	bfb8      	it	lt
 8002a3c:	f242 7110 	movwlt	r1, #10000	; 0x2710
    palClearPad(motor_setting->INA_port, motor_setting->INA_pin);
 8002a40:	f892 900c 	ldrb.w	r9, [r2, #12]
 8002a44:	6855      	ldr	r5, [r2, #4]
 8002a46:	fa0e f009 	lsl.w	r0, lr, r9
 8002a4a:	6168      	str	r0, [r5, #20]
    palSetPad(motor_setting->INB_port, motor_setting->INB_pin);
 8002a4c:	7b50      	ldrb	r0, [r2, #13]
    for (ii = 0; ii < MOTORNUM; ii++) {
 8002a4e:	f103 0301 	add.w	r3, r3, #1
    palSetPad(motor_setting->INB_port, motor_setting->INB_pin);
 8002a52:	f8d2 9008 	ldr.w	r9, [r2, #8]
    for (ii = 0; ii < MOTORNUM; ii++) {
 8002a56:	b2db      	uxtb	r3, r3
    palSetPad(motor_setting->INB_port, motor_setting->INB_pin);
 8002a58:	fa0e f200 	lsl.w	r2, lr, r0
    motor_setting->PWM_pin->dutycycle = -motor_setting->power < MAXPWR ?
 8002a5c:	f854 0008 	ldr.w	r0, [r4, r8]
 8002a60:	bfa8      	it	ge
 8002a62:	b289      	uxthge	r1, r1
    for (ii = 0; ii < MOTORNUM; ii++) {
 8002a64:	2b05      	cmp	r3, #5
    palSetPad(motor_setting->INB_port, motor_setting->INB_pin);
 8002a66:	f8c9 2010 	str.w	r2, [r9, #16]
    motor_setting->PWM_pin->dutycycle = -motor_setting->power < MAXPWR ?
 8002a6a:	80c1      	strh	r1, [r0, #6]
 8002a6c:	461a      	mov	r2, r3
    for (ii = 0; ii < MOTORNUM; ii++) {
 8002a6e:	d1d9      	bne.n	8002a24 <MotorThd.lto_priv.45+0x54>
    chThdSleepMilliseconds(1);
 8002a70:	200a      	movs	r0, #10
 8002a72:	f88a 3000 	strb.w	r3, [sl]
 8002a76:	f7ff f86b 	bl	8001b50 <chThdSleep>
 8002a7a:	69bb      	ldr	r3, [r7, #24]
  while (!chThdShouldTerminateX()) {
 8002a7c:	7f5b      	ldrb	r3, [r3, #29]
 8002a7e:	075b      	lsls	r3, r3, #29
 8002a80:	d5b1      	bpl.n	80029e6 <MotorThd.lto_priv.45+0x16>
 8002a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a86:	bf00      	nop
 8002a88:	20001410 	.word	0x20001410
 8002a8c:	200015f8 	.word	0x200015f8
 8002a90:	ffffd8f1 	.word	0xffffd8f1
 8002a94:	20001576 	.word	0x20001576
	...

08002aa0 <MotorPWMTHD.lto_priv.47>:
static THD_FUNCTION(MotorPWMTHD, arg) {
 8002aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return ch.rlist.r_current;
 8002aa4:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8002b34 <MotorPWMTHD.lto_priv.47+0x94>
  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8002aa8:	f8d8 3018 	ldr.w	r3, [r8, #24]
  while (!chThdShouldTerminateX()) {
 8002aac:	7f5b      	ldrb	r3, [r3, #29]
 8002aae:	f013 0604 	ands.w	r6, r3, #4
 8002ab2:	d137      	bne.n	8002b24 <MotorPWMTHD.lto_priv.47+0x84>
 8002ab4:	4c1c      	ldr	r4, [pc, #112]	; (8002b28 <MotorPWMTHD.lto_priv.47+0x88>)
 8002ab6:	4d1d      	ldr	r5, [pc, #116]	; (8002b2c <MotorPWMTHD.lto_priv.47+0x8c>)
  pwmEnableChannel(pin->driver, pin->channel, PWM_PERCENTAGE_TO_WIDTH(pin->driver, pin->dutycycle));
 8002ab8:	4f1d      	ldr	r7, [pc, #116]	; (8002b30 <MotorPWMTHD.lto_priv.47+0x90>)
    for (i = 0; i < MOTORNUM; i++) {
 8002aba:	2300      	movs	r3, #0
 8002abc:	f04f 0e20 	mov.w	lr, #32

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	7026      	strb	r6, [r4, #0]
  pwmEnableChannel(pin->driver, pin->channel, PWM_PERCENTAGE_TO_WIDTH(pin->driver, pin->dutycycle));
 8002ac4:	f855 c033 	ldr.w	ip, [r5, r3, lsl #3]
 8002ac8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002acc:	88d9      	ldrh	r1, [r3, #6]
 8002ace:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8002ad2:	f893 9004 	ldrb.w	r9, [r3, #4]
 8002ad6:	fb02 f201 	mul.w	r2, r2, r1
 8002ada:	fba7 3202 	umull	r3, r2, r7, r2
 8002ade:	0b52      	lsrs	r2, r2, #13
 8002ae0:	f38e 8811 	msr	BASEPRI, lr
 8002ae4:	f8dc 100c 	ldr.w	r1, [ip, #12]
  pwmp->tim->CCR[channel] = width;
 8002ae8:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8002aec:	fa00 fa09 	lsl.w	sl, r0, r9
 8002af0:	f109 090c 	add.w	r9, r9, #12
 8002af4:	ea41 010a 	orr.w	r1, r1, sl
 8002af8:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8002afc:	f8cc 100c 	str.w	r1, [ip, #12]
 8002b00:	f8c9 2004 	str.w	r2, [r9, #4]
 8002b04:	f386 8811 	msr	BASEPRI, r6
    for (i = 0; i < MOTORNUM; i++) {
 8002b08:	7823      	ldrb	r3, [r4, #0]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	7023      	strb	r3, [r4, #0]
 8002b12:	d9d7      	bls.n	8002ac4 <MotorPWMTHD.lto_priv.47+0x24>
    chThdSleepMilliseconds(1);
 8002b14:	200a      	movs	r0, #10
 8002b16:	f7ff f81b 	bl	8001b50 <chThdSleep>
 8002b1a:	f8d8 3018 	ldr.w	r3, [r8, #24]
  while (!chThdShouldTerminateX()) {
 8002b1e:	7f5b      	ldrb	r3, [r3, #29]
 8002b20:	075b      	lsls	r3, r3, #29
 8002b22:	d5ca      	bpl.n	8002aba <MotorPWMTHD.lto_priv.47+0x1a>
 8002b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b28:	2000156c 	.word	0x2000156c
 8002b2c:	200015c4 	.word	0x200015c4
 8002b30:	d1b71759 	.word	0xd1b71759
 8002b34:	20001410 	.word	0x20001410
	...

08002b40 <TofThd.lto_priv.41>:
static THD_FUNCTION(TofThd, arg) {
 8002b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memset((void*) sdrxbuf, 0, SERIAL_BUFFERS_SIZE);
 8002b44:	2420      	movs	r4, #32
static THD_FUNCTION(TofThd, arg) {
 8002b46:	b087      	sub	sp, #28
  memset((void*) sdrxbuf, 0, SERIAL_BUFFERS_SIZE);
 8002b48:	4622      	mov	r2, r4
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4888      	ldr	r0, [pc, #544]	; (8002d70 <TofThd.lto_priv.41+0x230>)
 8002b4e:	f000 fc2f 	bl	80033b0 <memset>
  memset((void*) distance, 0, sizeof(distance));
 8002b52:	2300      	movs	r3, #0
 8002b54:	4a87      	ldr	r2, [pc, #540]	; (8002d74 <TofThd.lto_priv.41+0x234>)
 8002b56:	8812      	ldrh	r2, [r2, #0]
 8002b58:	8013      	strh	r3, [r2, #0]
 8002b5a:	f384 8811 	msr	BASEPRI, r4
  elp->el_events   = events;
 8002b5e:	2501      	movs	r5, #1
  elp->el_wflags   = wflags;
 8002b60:	f240 31e6 	movw	r1, #998	; 0x3e6
  elp->el_next     = esp->es_next;
 8002b64:	4f84      	ldr	r7, [pc, #528]	; (8002d78 <TofThd.lto_priv.41+0x238>)
  elp->el_listener = currp;
 8002b66:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8002d94 <TofThd.lto_priv.41+0x254>
  elp->el_next     = esp->es_next;
 8002b6a:	687c      	ldr	r4, [r7, #4]
 8002b6c:	aa06      	add	r2, sp, #24
  elp->el_listener = currp;
 8002b6e:	f8d9 0018 	ldr.w	r0, [r9, #24]
  elp->el_next     = esp->es_next;
 8002b72:	f842 4d14 	str.w	r4, [r2, #-20]!
  elp->el_flags    = (eventflags_t)0;
 8002b76:	9304      	str	r3, [sp, #16]
  elp->el_listener = currp;
 8002b78:	9002      	str	r0, [sp, #8]
  elp->el_events   = events;
 8002b7a:	9503      	str	r5, [sp, #12]
  elp->el_wflags   = wflags;
 8002b7c:	9105      	str	r1, [sp, #20]
  esp->es_next     = elp;
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	f383 8811 	msr	BASEPRI, r3
 8002b84:	f8d9 3018 	ldr.w	r3, [r9, #24]
  while (!chThdShouldTerminateX()) {
 8002b88:	7f5b      	ldrb	r3, [r3, #29]
 8002b8a:	075a      	lsls	r2, r3, #29
 8002b8c:	d435      	bmi.n	8002bfa <TofThd.lto_priv.41+0xba>
 8002b8e:	4c7b      	ldr	r4, [pc, #492]	; (8002d7c <TofThd.lto_priv.41+0x23c>)
 8002b90:	4e7b      	ldr	r6, [pc, #492]	; (8002d80 <TofThd.lto_priv.41+0x240>)
                    datalength = sdAsynchronousRead(TOFDRIVER, &sdrxbuf,
 8002b92:	4d77      	ldr	r5, [pc, #476]	; (8002d70 <TofThd.lto_priv.41+0x230>)
            FLUSH_I_QUEUE(TOFDRIVER);
 8002b94:	370c      	adds	r7, #12
    chEvtWaitAny(1);                                                //wait for selected serial events
 8002b96:	f7ff fefb 	bl	8002990 <chEvtWaitAny.constprop.9>
 8002b9a:	2320      	movs	r3, #32
 8002b9c:	f383 8811 	msr	BASEPRI, r3
  elp->el_flags = (eventflags_t)0;
 8002ba0:	2300      	movs	r3, #0
  flags = elp->el_flags;
 8002ba2:	9a04      	ldr	r2, [sp, #16]
  elp->el_flags = (eventflags_t)0;
 8002ba4:	9304      	str	r3, [sp, #16]
    pending_flags = chEvtGetAndClearFlagsI(&serial_listener);       //get event flag
 8002ba6:	6022      	str	r2, [r4, #0]
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	6822      	ldr	r2, [r4, #0]
    foundheader = false;
 8002bae:	7033      	strb	r3, [r6, #0]
        current_flag = LEAST_SET_BIT(pending_flags);                  //isolates single flag to work on
 8002bb0:	4253      	negs	r3, r2
 8002bb2:	4013      	ands	r3, r2
        pending_flags &= ~current_flag;                               //removes isolated flag
 8002bb4:	ea22 0203 	bic.w	r2, r2, r3
        switch(current_flag) {
 8002bb8:	2b40      	cmp	r3, #64	; 0x40
        pending_flags &= ~current_flag;                               //removes isolated flag
 8002bba:	6022      	str	r2, [r4, #0]
        switch(current_flag) {
 8002bbc:	d06d      	beq.n	8002c9a <TofThd.lto_priv.41+0x15a>
 8002bbe:	d877      	bhi.n	8002cb0 <TofThd.lto_priv.41+0x170>
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d07e      	beq.n	8002cc2 <TofThd.lto_priv.41+0x182>
 8002bc4:	2b20      	cmp	r3, #32
 8002bc6:	d069      	beq.n	8002c9c <TofThd.lto_priv.41+0x15c>
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d066      	beq.n	8002c9a <TofThd.lto_priv.41+0x15a>
    } while (pending_flags && !foundheader);
 8002bcc:	b112      	cbz	r2, 8002bd4 <TofThd.lto_priv.41+0x94>
 8002bce:	7833      	ldrb	r3, [r6, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0ed      	beq.n	8002bb0 <TofThd.lto_priv.41+0x70>
 8002bd4:	f04f 0820 	mov.w	r8, #32
 8002bd8:	f388 8811 	msr	BASEPRI, r8
    FLUSH_I_QUEUE(TOFDRIVER);
 8002bdc:	4638      	mov	r0, r7
 8002bde:	f7ff f8cf 	bl	8001d80 <chIQResetI>
 8002be2:	2100      	movs	r1, #0
 8002be4:	f381 8811 	msr	BASEPRI, r1
    memset((void*)sdrxbuf, 0, SERIAL_BUFFERS_SIZE);               //Flush RX buffer
 8002be8:	4642      	mov	r2, r8
 8002bea:	4628      	mov	r0, r5
 8002bec:	f000 fbe0 	bl	80033b0 <memset>
 8002bf0:	f8d9 3018 	ldr.w	r3, [r9, #24]
  while (!chThdShouldTerminateX()) {
 8002bf4:	7f5b      	ldrb	r3, [r3, #29]
 8002bf6:	075b      	lsls	r3, r3, #29
 8002bf8:	d5cd      	bpl.n	8002b96 <TofThd.lto_priv.41+0x56>
}
 8002bfa:	b007      	add	sp, #28
 8002bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c00:	f1bb 0f00 	cmp.w	fp, #0
 8002c04:	f040 80ab 	bne.w	8002d5e <TofThd.lto_priv.41+0x21e>
 8002c08:	f1be 0f00 	cmp.w	lr, #0
 8002c0c:	d001      	beq.n	8002c12 <TofThd.lto_priv.41+0xd2>
 8002c0e:	4b5d      	ldr	r3, [pc, #372]	; (8002d84 <TofThd.lto_priv.41+0x244>)
 8002c10:	7019      	strb	r1, [r3, #0]
 8002c12:	f1bc 0f00 	cmp.w	ip, #0
 8002c16:	d002      	beq.n	8002c1e <TofThd.lto_priv.41+0xde>
 8002c18:	4b56      	ldr	r3, [pc, #344]	; (8002d74 <TofThd.lto_priv.41+0x234>)
 8002c1a:	f8a3 8000 	strh.w	r8, [r3]
  height = ((float32_t)distance * arm_cos_f32(imu_data->euler.pit_deg / 360.0 * 2 * PI)) *
 8002c1e:	4b5a      	ldr	r3, [pc, #360]	; (8002d88 <TofThd.lto_priv.41+0x248>)
 8002c20:	f8df a174 	ldr.w	sl, [pc, #372]	; 8002d98 <TofThd.lto_priv.41+0x258>
 8002c24:	f8d3 8000 	ldr.w	r8, [r3]
 8002c28:	f8d8 0016 	ldr.w	r0, [r8, #22]
 8002c2c:	f7fd fc7c 	bl	8000528 <__aeabi_f2d>
 8002c30:	2200      	movs	r2, #0
 8002c32:	4b56      	ldr	r3, [pc, #344]	; (8002d8c <TofThd.lto_priv.41+0x24c>)
 8002c34:	f7fd fdf6 	bl	8000824 <__aeabi_ddiv>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	f7fd fb16 	bl	800026c <__adddf3>
 8002c40:	a349      	add	r3, pc, #292	; (adr r3, 8002d68 <TofThd.lto_priv.41+0x228>)
 8002c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c46:	f7fd fcc3 	bl	80005d0 <__aeabi_dmul>
 8002c4a:	f7fd fed9 	bl	8000a00 <__aeabi_d2f>
 8002c4e:	f7ff fe57 	bl	8002900 <arm_cos_f32>
 8002c52:	4683      	mov	fp, r0
 8002c54:	4b47      	ldr	r3, [pc, #284]	; (8002d74 <TofThd.lto_priv.41+0x234>)
 8002c56:	8818      	ldrh	r0, [r3, #0]
 8002c58:	f7fd ffd8 	bl	8000c0c <__aeabi_ui2f>
 8002c5c:	4659      	mov	r1, fp
 8002c5e:	f7fe f82f 	bl	8000cc0 <__aeabi_fmul>
 8002c62:	4683      	mov	fp, r0
           (arm_cos_f32(imu_data->euler.roll_deg / 360.0 * 2 * PI));
 8002c64:	f8d8 0012 	ldr.w	r0, [r8, #18]
 8002c68:	f7fd fc5e 	bl	8000528 <__aeabi_f2d>
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	4b47      	ldr	r3, [pc, #284]	; (8002d8c <TofThd.lto_priv.41+0x24c>)
 8002c70:	f7fd fdd8 	bl	8000824 <__aeabi_ddiv>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	f7fd faf8 	bl	800026c <__adddf3>
 8002c7c:	a33a      	add	r3, pc, #232	; (adr r3, 8002d68 <TofThd.lto_priv.41+0x228>)
 8002c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c82:	f7fd fca5 	bl	80005d0 <__aeabi_dmul>
 8002c86:	f7fd febb 	bl	8000a00 <__aeabi_d2f>
 8002c8a:	f7ff fe39 	bl	8002900 <arm_cos_f32>
  height = ((float32_t)distance * arm_cos_f32(imu_data->euler.pit_deg / 360.0 * 2 * PI)) *
 8002c8e:	4601      	mov	r1, r0
 8002c90:	4658      	mov	r0, fp
 8002c92:	f7fe f815 	bl	8000cc0 <__aeabi_fmul>
 8002c96:	f8ca 0000 	str.w	r0, [sl]
 8002c9a:	2320      	movs	r3, #32
 8002c9c:	f383 8811 	msr	BASEPRI, r3
            FLUSH_I_QUEUE(TOFDRIVER);
 8002ca0:	4638      	mov	r0, r7
 8002ca2:	f7ff f86d 	bl	8001d80 <chIQResetI>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	6822      	ldr	r2, [r4, #0]
 8002cae:	e78d      	b.n	8002bcc <TofThd.lto_priv.41+0x8c>
        switch(current_flag) {
 8002cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cb4:	d0f1      	beq.n	8002c9a <TofThd.lto_priv.41+0x15a>
 8002cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cba:	d0ee      	beq.n	8002c9a <TofThd.lto_priv.41+0x15a>
 8002cbc:	2b80      	cmp	r3, #128	; 0x80
 8002cbe:	d185      	bne.n	8002bcc <TofThd.lto_priv.41+0x8c>
 8002cc0:	e7eb      	b.n	8002c9a <TofThd.lto_priv.41+0x15a>
                chThdSleep(MS2ST(ACQTIME));                            //Acquire data packet, release CPU
 8002cc2:	200a      	movs	r0, #10
 8002cc4:	f7fe ff44 	bl	8001b50 <chThdSleep>
                if((!pending_flags)) {
 8002cc8:	f8d4 8000 	ldr.w	r8, [r4]
 8002ccc:	f1b8 0f00 	cmp.w	r8, #0
 8002cd0:	d1e3      	bne.n	8002c9a <TofThd.lto_priv.41+0x15a>
                    datalength = sdAsynchronousRead(TOFDRIVER, &sdrxbuf,
 8002cd2:	4643      	mov	r3, r8
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	4629      	mov	r1, r5
 8002cd8:	4638      	mov	r0, r7
 8002cda:	f7fe feb1 	bl	8001a40 <chIQReadTimeout>
  i = 0;
 8002cde:	46c4      	mov	ip, r8
                    datalength = sdAsynchronousRead(TOFDRIVER, &sdrxbuf,
 8002ce0:	4b2b      	ldr	r3, [pc, #172]	; (8002d90 <TofThd.lto_priv.41+0x250>)
 8002ce2:	b2c0      	uxtb	r0, r0
 8002ce4:	7018      	strb	r0, [r3, #0]
 8002ce6:	4a23      	ldr	r2, [pc, #140]	; (8002d74 <TofThd.lto_priv.41+0x234>)
  i = 0;
 8002ce8:	4b26      	ldr	r3, [pc, #152]	; (8002d84 <TofThd.lto_priv.41+0x244>)
 8002cea:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8002d9c <TofThd.lto_priv.41+0x25c>
 8002cee:	f883 8000 	strb.w	r8, [r3]
 8002cf2:	46c6      	mov	lr, r8
 8002cf4:	4641      	mov	r1, r8
 8002cf6:	46c3      	mov	fp, r8
 8002cf8:	f9ba 3000 	ldrsh.w	r3, [sl]
 8002cfc:	f8b2 8000 	ldrh.w	r8, [r2]
 8002d00:	4662      	mov	r2, ip
 8002d02:	e002      	b.n	8002d0a <TofThd.lto_priv.41+0x1ca>
 8002d04:	f04f 0e01 	mov.w	lr, #1
      while((sdrxbuf[i] != TOFFRAMEEND) && (i < datalength)) {
 8002d08:	4611      	mov	r1, r2
  while(i < datalength) {                                                   //Scan for frame head
 8002d0a:	4290      	cmp	r0, r2
 8002d0c:	f67f af78 	bls.w	8002c00 <TofThd.lto_priv.41+0xc0>
    if ((sdrxbuf[i] == TOFFRAMEHEAD)) {
 8002d10:	5ca9      	ldrb	r1, [r5, r2]
      i++;
 8002d12:	3201      	adds	r2, #1
    if ((sdrxbuf[i] == TOFFRAMEHEAD)) {
 8002d14:	2926      	cmp	r1, #38	; 0x26
      i++;
 8002d16:	b2d2      	uxtb	r2, r2
    if ((sdrxbuf[i] == TOFFRAMEHEAD)) {
 8002d18:	d1f4      	bne.n	8002d04 <TofThd.lto_priv.41+0x1c4>
      while((sdrxbuf[i] != TOFFRAMEEND) && (i < datalength)) {
 8002d1a:	5ca9      	ldrb	r1, [r5, r2]
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2940      	cmp	r1, #64	; 0x40
 8002d20:	d01b      	beq.n	8002d5a <TofThd.lto_priv.41+0x21a>
 8002d22:	4290      	cmp	r0, r2
 8002d24:	d802      	bhi.n	8002d2c <TofThd.lto_priv.41+0x1ec>
 8002d26:	e018      	b.n	8002d5a <TofThd.lto_priv.41+0x21a>
 8002d28:	4290      	cmp	r0, r2
 8002d2a:	d90e      	bls.n	8002d4a <TofThd.lto_priv.41+0x20a>
        i++;
 8002d2c:	3201      	adds	r2, #1
 8002d2e:	b2d2      	uxtb	r2, r2
        temp_dis = temp_dis * 10 + (sdrxbuf[i] - 48);
 8002d30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002d34:	f1a1 0e30 	sub.w	lr, r1, #48	; 0x30
      while((sdrxbuf[i] != TOFFRAMEEND) && (i < datalength)) {
 8002d38:	5ca9      	ldrb	r1, [r5, r2]
        temp_dis = temp_dis * 10 + (sdrxbuf[i] - 48);
 8002d3a:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
 8002d3e:	fa1f fe8e 	uxth.w	lr, lr
      while((sdrxbuf[i] != TOFFRAMEEND) && (i < datalength)) {
 8002d42:	2940      	cmp	r1, #64	; 0x40
        temp_dis = temp_dis * 10 + (sdrxbuf[i] - 48);
 8002d44:	fa0f f38e 	sxth.w	r3, lr
      while((sdrxbuf[i] != TOFFRAMEEND) && (i < datalength)) {
 8002d48:	d1ee      	bne.n	8002d28 <TofThd.lto_priv.41+0x1e8>
 8002d4a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002d4e:	bfb8      	it	lt
 8002d50:	46f0      	movlt	r8, lr
 8002d52:	f04f 0c01 	mov.w	ip, #1
 8002d56:	46e3      	mov	fp, ip
 8002d58:	e7d4      	b.n	8002d04 <TofThd.lto_priv.41+0x1c4>
 8002d5a:	4698      	mov	r8, r3
 8002d5c:	e7f9      	b.n	8002d52 <TofThd.lto_priv.41+0x212>
 8002d5e:	f8aa 3000 	strh.w	r3, [sl]
 8002d62:	e751      	b.n	8002c08 <TofThd.lto_priv.41+0xc8>
 8002d64:	f3af 8000 	nop.w
 8002d68:	60000000 	.word	0x60000000
 8002d6c:	400921fb 	.word	0x400921fb
 8002d70:	2000167c 	.word	0x2000167c
 8002d74:	20001562 	.word	0x20001562
 8002d78:	20001248 	.word	0x20001248
 8002d7c:	20001650 	.word	0x20001650
 8002d80:	20001565 	.word	0x20001565
 8002d84:	20001574 	.word	0x20001574
 8002d88:	200015a0 	.word	0x200015a0
 8002d8c:	40768000 	.word	0x40768000
 8002d90:	20001561 	.word	0x20001561
 8002d94:	20001410 	.word	0x20001410
 8002d98:	20001568 	.word	0x20001568
 8002d9c:	200016be 	.word	0x200016be

08002da0 <BluetoothThd.lto_priv.48>:
static THD_FUNCTION(BluetoothThd, arg) {
 8002da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memset((void*) sdrxbuf, 0, SERIAL_BUFFERS_SIZE);
 8002da4:	2420      	movs	r4, #32
static THD_FUNCTION(BluetoothThd, arg) {
 8002da6:	b087      	sub	sp, #28
  memset((void*) sdrxbuf, 0, SERIAL_BUFFERS_SIZE);
 8002da8:	2100      	movs	r1, #0
 8002daa:	4622      	mov	r2, r4
 8002dac:	486c      	ldr	r0, [pc, #432]	; (8002f60 <BluetoothThd.lto_priv.48+0x1c0>)
 8002dae:	f000 faff 	bl	80033b0 <memset>
 8002db2:	f384 8811 	msr	BASEPRI, r4
  elp->el_events   = events;
 8002db6:	2001      	movs	r0, #1
  elp->el_wflags   = wflags;
 8002db8:	f240 31e6 	movw	r1, #998	; 0x3e6
  elp->el_flags    = (eventflags_t)0;
 8002dbc:	2200      	movs	r2, #0
  elp->el_next     = esp->es_next;
 8002dbe:	4f69      	ldr	r7, [pc, #420]	; (8002f64 <BluetoothThd.lto_priv.48+0x1c4>)
  elp->el_listener = currp;
 8002dc0:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8002f80 <BluetoothThd.lto_priv.48+0x1e0>
  elp->el_next     = esp->es_next;
 8002dc4:	687d      	ldr	r5, [r7, #4]
 8002dc6:	ab06      	add	r3, sp, #24
  elp->el_listener = currp;
 8002dc8:	f8d9 4018 	ldr.w	r4, [r9, #24]
  elp->el_next     = esp->es_next;
 8002dcc:	f843 5d14 	str.w	r5, [r3, #-20]!
  elp->el_listener = currp;
 8002dd0:	9402      	str	r4, [sp, #8]
  elp->el_events   = events;
 8002dd2:	9003      	str	r0, [sp, #12]
  elp->el_wflags   = wflags;
 8002dd4:	9105      	str	r1, [sp, #20]
  esp->es_next     = elp;
 8002dd6:	607b      	str	r3, [r7, #4]
  elp->el_flags    = (eventflags_t)0;
 8002dd8:	9204      	str	r2, [sp, #16]
 8002dda:	f382 8811 	msr	BASEPRI, r2
 8002dde:	f8d9 3018 	ldr.w	r3, [r9, #24]
  while (!chThdShouldTerminateX()) {
 8002de2:	7f5b      	ldrb	r3, [r3, #29]
 8002de4:	075a      	lsls	r2, r3, #29
 8002de6:	d435      	bmi.n	8002e54 <BluetoothThd.lto_priv.48+0xb4>
 8002de8:	4c5f      	ldr	r4, [pc, #380]	; (8002f68 <BluetoothThd.lto_priv.48+0x1c8>)
 8002dea:	4e60      	ldr	r6, [pc, #384]	; (8002f6c <BluetoothThd.lto_priv.48+0x1cc>)
                    datalength = sdAsynchronousRead(BLUETOOTHDRIVER, &sdrxbuf,
 8002dec:	f8df b170 	ldr.w	fp, [pc, #368]	; 8002f60 <BluetoothThd.lto_priv.48+0x1c0>
            FLUSH_I_QUEUE(BLUETOOTHDRIVER);
 8002df0:	370c      	adds	r7, #12
    chEvtWaitAny(1);                                                //wait for selected serial events
 8002df2:	f7ff fdcd 	bl	8002990 <chEvtWaitAny.constprop.9>
 8002df6:	2320      	movs	r3, #32
 8002df8:	f383 8811 	msr	BASEPRI, r3
  elp->el_flags = (eventflags_t)0;
 8002dfc:	2300      	movs	r3, #0
  flags = elp->el_flags;
 8002dfe:	9a04      	ldr	r2, [sp, #16]
  elp->el_flags = (eventflags_t)0;
 8002e00:	9304      	str	r3, [sp, #16]
    pending_flags = chEvtGetAndClearFlagsI(&serial_listener);       //get event flag
 8002e02:	6022      	str	r2, [r4, #0]
 8002e04:	f383 8811 	msr	BASEPRI, r3
 8002e08:	6822      	ldr	r2, [r4, #0]
    foundheader = false;
 8002e0a:	7033      	strb	r3, [r6, #0]
        current_flag = LEAST_SET_BIT(pending_flags);                  //isolates single flag to work on
 8002e0c:	4253      	negs	r3, r2
 8002e0e:	4013      	ands	r3, r2
        pending_flags &= ~current_flag;                               //removes isolated flag
 8002e10:	ea22 0203 	bic.w	r2, r2, r3
        switch(current_flag) {
 8002e14:	2b40      	cmp	r3, #64	; 0x40
        pending_flags &= ~current_flag;                               //removes isolated flag
 8002e16:	6022      	str	r2, [r4, #0]
        switch(current_flag) {
 8002e18:	d026      	beq.n	8002e68 <BluetoothThd.lto_priv.48+0xc8>
 8002e1a:	d830      	bhi.n	8002e7e <BluetoothThd.lto_priv.48+0xde>
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d037      	beq.n	8002e90 <BluetoothThd.lto_priv.48+0xf0>
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	d022      	beq.n	8002e6a <BluetoothThd.lto_priv.48+0xca>
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d01f      	beq.n	8002e68 <BluetoothThd.lto_priv.48+0xc8>
    } while (pending_flags && !foundheader);
 8002e28:	b112      	cbz	r2, 8002e30 <BluetoothThd.lto_priv.48+0x90>
 8002e2a:	7833      	ldrb	r3, [r6, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0ed      	beq.n	8002e0c <BluetoothThd.lto_priv.48+0x6c>
 8002e30:	2520      	movs	r5, #32
 8002e32:	f385 8811 	msr	BASEPRI, r5
    FLUSH_I_QUEUE(BLUETOOTHDRIVER);
 8002e36:	4638      	mov	r0, r7
 8002e38:	f7fe ffa2 	bl	8001d80 <chIQResetI>
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	f381 8811 	msr	BASEPRI, r1
    memset((void*)sdrxbuf, 0, SERIAL_BUFFERS_SIZE);               //Flush RX buffer
 8002e42:	462a      	mov	r2, r5
 8002e44:	4658      	mov	r0, fp
 8002e46:	f000 fab3 	bl	80033b0 <memset>
 8002e4a:	f8d9 3018 	ldr.w	r3, [r9, #24]
  while (!chThdShouldTerminateX()) {
 8002e4e:	7f5b      	ldrb	r3, [r3, #29]
 8002e50:	075b      	lsls	r3, r3, #29
 8002e52:	d5ce      	bpl.n	8002df2 <BluetoothThd.lto_priv.48+0x52>
}
 8002e54:	b007      	add	sp, #28
 8002e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e5a:	2d00      	cmp	r5, #0
 8002e5c:	d17d      	bne.n	8002f5a <BluetoothThd.lto_priv.48+0x1ba>
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d177      	bne.n	8002f52 <BluetoothThd.lto_priv.48+0x1b2>
  i = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	4a42      	ldr	r2, [pc, #264]	; (8002f70 <BluetoothThd.lto_priv.48+0x1d0>)
 8002e66:	7013      	strb	r3, [r2, #0]
 8002e68:	2320      	movs	r3, #32
 8002e6a:	f383 8811 	msr	BASEPRI, r3
            FLUSH_I_QUEUE(BLUETOOTHDRIVER);
 8002e6e:	4638      	mov	r0, r7
 8002e70:	f7fe ff86 	bl	8001d80 <chIQResetI>
 8002e74:	2300      	movs	r3, #0
 8002e76:	f383 8811 	msr	BASEPRI, r3
 8002e7a:	6822      	ldr	r2, [r4, #0]
 8002e7c:	e7d4      	b.n	8002e28 <BluetoothThd.lto_priv.48+0x88>
        switch(current_flag) {
 8002e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e82:	d0f1      	beq.n	8002e68 <BluetoothThd.lto_priv.48+0xc8>
 8002e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e88:	d0ee      	beq.n	8002e68 <BluetoothThd.lto_priv.48+0xc8>
 8002e8a:	2b80      	cmp	r3, #128	; 0x80
 8002e8c:	d1cc      	bne.n	8002e28 <BluetoothThd.lto_priv.48+0x88>
 8002e8e:	e7eb      	b.n	8002e68 <BluetoothThd.lto_priv.48+0xc8>
                chThdSleep(MS2ST(ACQTIME));                            //Acquire data packet, release CPU
 8002e90:	2096      	movs	r0, #150	; 0x96
 8002e92:	f7fe fe5d 	bl	8001b50 <chThdSleep>
                if((!pending_flags)) {
 8002e96:	6825      	ldr	r5, [r4, #0]
 8002e98:	2d00      	cmp	r5, #0
 8002e9a:	d1e5      	bne.n	8002e68 <BluetoothThd.lto_priv.48+0xc8>
                    datalength = sdAsynchronousRead(BLUETOOTHDRIVER, &sdrxbuf,
 8002e9c:	462b      	mov	r3, r5
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	4659      	mov	r1, fp
 8002ea2:	4638      	mov	r0, r7
 8002ea4:	f7fe fdcc 	bl	8001a40 <chIQReadTimeout>
 8002ea8:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8002f84 <BluetoothThd.lto_priv.48+0x1e4>
 8002eac:	4a31      	ldr	r2, [pc, #196]	; (8002f74 <BluetoothThd.lto_priv.48+0x1d4>)
 8002eae:	4932      	ldr	r1, [pc, #200]	; (8002f78 <BluetoothThd.lto_priv.48+0x1d8>)
 8002eb0:	b2c0      	uxtb	r0, r0
 8002eb2:	7010      	strb	r0, [r2, #0]
  i = 0;
 8002eb4:	462b      	mov	r3, r5
 8002eb6:	462a      	mov	r2, r5
 8002eb8:	f9b8 e000 	ldrsh.w	lr, [r8]
 8002ebc:	f891 c000 	ldrb.w	ip, [r1]
 8002ec0:	e001      	b.n	8002ec6 <BluetoothThd.lto_priv.48+0x126>
        i++;
 8002ec2:	3201      	adds	r2, #1
 8002ec4:	b2d2      	uxtb	r2, r2
  while(i < datalength) {                                                   //Scan for frame head
 8002ec6:	4290      	cmp	r0, r2
 8002ec8:	d9c7      	bls.n	8002e5a <BluetoothThd.lto_priv.48+0xba>
    if ((sdrxbuf[i] == FRAMEHEAD) &&                                  //Verify first byte value
 8002eca:	f81b 1002 	ldrb.w	r1, [fp, r2]
 8002ece:	2940      	cmp	r1, #64	; 0x40
 8002ed0:	d1f7      	bne.n	8002ec2 <BluetoothThd.lto_priv.48+0x122>
        (sdrxbuf[i + 2] == FRAMEINDEXER)) {
 8002ed2:	eb0b 0102 	add.w	r1, fp, r2
    if ((sdrxbuf[i] == FRAMEHEAD) &&                                  //Verify first byte value
 8002ed6:	7889      	ldrb	r1, [r1, #2]
 8002ed8:	293a      	cmp	r1, #58	; 0x3a
 8002eda:	d1f2      	bne.n	8002ec2 <BluetoothThd.lto_priv.48+0x122>
      i++;
 8002edc:	1c53      	adds	r3, r2, #1
      i++;
 8002ede:	3203      	adds	r2, #3
      motornum = sdrxbuf[i] - 48;
 8002ee0:	b2db      	uxtb	r3, r3
      i++;
 8002ee2:	b2d2      	uxtb	r2, r2
      motornum = sdrxbuf[i] - 48;
 8002ee4:	f81b 5003 	ldrb.w	r5, [fp, r3]
      while((sdrxbuf[i] != FRAMEEND) && (i < datalength)) {
 8002ee8:	f81b a002 	ldrb.w	sl, [fp, r2]
      motornum = sdrxbuf[i] - 48;
 8002eec:	3d30      	subs	r5, #48	; 0x30
      while((sdrxbuf[i] != FRAMEEND) && (i < datalength)) {
 8002eee:	f1ba 0f26 	cmp.w	sl, #38	; 0x26
      motornum = sdrxbuf[i] - 48;
 8002ef2:	b2ed      	uxtb	r5, r5
      while((sdrxbuf[i] != FRAMEEND) && (i < datalength)) {
 8002ef4:	d028      	beq.n	8002f48 <BluetoothThd.lto_priv.48+0x1a8>
 8002ef6:	4290      	cmp	r0, r2
 8002ef8:	d926      	bls.n	8002f48 <BluetoothThd.lto_priv.48+0x1a8>
 8002efa:	f04f 0c00 	mov.w	ip, #0
 8002efe:	46e6      	mov	lr, ip
 8002f00:	e001      	b.n	8002f06 <BluetoothThd.lto_priv.48+0x166>
 8002f02:	4290      	cmp	r0, r2
 8002f04:	d913      	bls.n	8002f2e <BluetoothThd.lto_priv.48+0x18e>
        i++;
 8002f06:	3201      	adds	r2, #1
 8002f08:	b2d2      	uxtb	r2, r2
        if (sdrxbuf[i] == NEGATIVECHAR) {
 8002f0a:	f1ba 0f2d 	cmp.w	sl, #45	; 0x2d
          power = power * 10 + (sdrxbuf[i] - 48);
 8002f0e:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 8002f12:	f1aa 0130 	sub.w	r1, sl, #48	; 0x30
      while((sdrxbuf[i] != FRAMEEND) && (i < datalength)) {
 8002f16:	f81b a002 	ldrb.w	sl, [fp, r2]
          power = power * 10 + (sdrxbuf[i] - 48);
 8002f1a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8002f1e:	bf14      	ite	ne
 8002f20:	fa0f fe83 	sxthne.w	lr, r3
          negative = true;
 8002f24:	f04f 0c01 	moveq.w	ip, #1
      while((sdrxbuf[i] != FRAMEEND) && (i < datalength)) {
 8002f28:	f1ba 0f26 	cmp.w	sl, #38	; 0x26
 8002f2c:	d1e9      	bne.n	8002f02 <BluetoothThd.lto_priv.48+0x162>
      power = negative ? -power : power;
 8002f2e:	f1bc 0f00 	cmp.w	ip, #0
 8002f32:	d00b      	beq.n	8002f4c <BluetoothThd.lto_priv.48+0x1ac>
 8002f34:	f1ce 0e00 	rsb	lr, lr, #0
 8002f38:	fa0f fe8e 	sxth.w	lr, lr
      motorPwrCommand[motornum] = power;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	490f      	ldr	r1, [pc, #60]	; (8002f7c <BluetoothThd.lto_priv.48+0x1dc>)
 8002f40:	f821 e015 	strh.w	lr, [r1, r5, lsl #1]
 8002f44:	461d      	mov	r5, r3
 8002f46:	e7be      	b.n	8002ec6 <BluetoothThd.lto_priv.48+0x126>
      while((sdrxbuf[i] != FRAMEEND) && (i < datalength)) {
 8002f48:	f04f 0e00 	mov.w	lr, #0
 8002f4c:	f04f 0c00 	mov.w	ip, #0
 8002f50:	e7f4      	b.n	8002f3c <BluetoothThd.lto_priv.48+0x19c>
 8002f52:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <BluetoothThd.lto_priv.48+0x1d8>)
 8002f54:	f883 c000 	strb.w	ip, [r3]
 8002f58:	e783      	b.n	8002e62 <BluetoothThd.lto_priv.48+0xc2>
 8002f5a:	f8a8 e000 	strh.w	lr, [r8]
 8002f5e:	e77e      	b.n	8002e5e <BluetoothThd.lto_priv.48+0xbe>
 8002f60:	2000165c 	.word	0x2000165c
 8002f64:	200012e0 	.word	0x200012e0
 8002f68:	2000164c 	.word	0x2000164c
 8002f6c:	20001564 	.word	0x20001564
 8002f70:	2000156d 	.word	0x2000156d
 8002f74:	20001560 	.word	0x20001560
 8002f78:	20001648 	.word	0x20001648
 8002f7c:	200015ec 	.word	0x200015ec
 8002f80:	20001410 	.word	0x20001410
 8002f84:	20001658 	.word	0x20001658
	...

08002f90 <imuThd.lto_priv.44>:
static THD_FUNCTION(imuThd, arg) {
 8002f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memset((void*) imusdrxbuf, 0, SERIAL_BUFFERS_SIZE);
 8002f94:	2420      	movs	r4, #32
static THD_FUNCTION(imuThd, arg) {
 8002f96:	b087      	sub	sp, #28
  memset((void*) imusdrxbuf, 0, SERIAL_BUFFERS_SIZE);
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4622      	mov	r2, r4
 8002f9c:	48a7      	ldr	r0, [pc, #668]	; (800323c <imuThd.lto_priv.44+0x2ac>)
 8002f9e:	f000 fa07 	bl	80033b0 <memset>
 8002fa2:	f384 8811 	msr	BASEPRI, r4
  elp->el_events   = events;
 8002fa6:	2401      	movs	r4, #1
  elp->el_wflags   = wflags;
 8002fa8:	f240 30e6 	movw	r0, #998	; 0x3e6
  elp->el_flags    = (eventflags_t)0;
 8002fac:	2200      	movs	r2, #0
  elp->el_next     = esp->es_next;
 8002fae:	49a4      	ldr	r1, [pc, #656]	; (8003240 <imuThd.lto_priv.44+0x2b0>)
  elp->el_listener = currp;
 8002fb0:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 8003278 <imuThd.lto_priv.44+0x2e8>
  elp->el_next     = esp->es_next;
 8002fb4:	684e      	ldr	r6, [r1, #4]
 8002fb6:	ab06      	add	r3, sp, #24
  elp->el_listener = currp;
 8002fb8:	f8d8 5018 	ldr.w	r5, [r8, #24]
  elp->el_next     = esp->es_next;
 8002fbc:	f843 6d14 	str.w	r6, [r3, #-20]!
  elp->el_listener = currp;
 8002fc0:	9502      	str	r5, [sp, #8]
  elp->el_events   = events;
 8002fc2:	9403      	str	r4, [sp, #12]
  elp->el_wflags   = wflags;
 8002fc4:	9005      	str	r0, [sp, #20]
  esp->es_next     = elp;
 8002fc6:	604b      	str	r3, [r1, #4]
  elp->el_flags    = (eventflags_t)0;
 8002fc8:	9204      	str	r2, [sp, #16]
 8002fca:	f382 8811 	msr	BASEPRI, r2
                      datalength = sdAsynchronousRead(IMUDRIVER, &imusdrxbuf,
 8002fce:	f8df 926c 	ldr.w	r9, [pc, #620]	; 800323c <imuThd.lto_priv.44+0x2ac>
  return ch.rlist.r_current;
 8002fd2:	f8d8 4018 	ldr.w	r4, [r8, #24]
  while (!chThdShouldTerminateX()) {
 8002fd6:	7f63      	ldrb	r3, [r4, #29]
 8002fd8:	f013 0304 	ands.w	r3, r3, #4
 8002fdc:	d14d      	bne.n	800307a <imuThd.lto_priv.44+0xea>
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f382 8811 	msr	BASEPRI, r2
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8002fe4:	6b62      	ldr	r2, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8002fe6:	f012 0501 	ands.w	r5, r2, #1
 8002fea:	f040 80b3 	bne.w	8003154 <imuThd.lto_priv.44+0x1c4>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8002fee:	2301      	movs	r3, #1
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8002ff0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ctp->p_u.ewmask = events;
 8002ff4:	6223      	str	r3, [r4, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8002ff6:	200a      	movs	r0, #10
 8002ff8:	f7fe fbca 	bl	8001790 <chSchGoSleepTimeoutS>
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	f2c0 80af 	blt.w	8003160 <imuThd.lto_priv.44+0x1d0>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 8003002:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 8003004:	f023 0201 	bic.w	r2, r3, #1
 8003008:	6362      	str	r2, [r4, #52]	; 0x34
 800300a:	f385 8811 	msr	BASEPRI, r5
    if (chEvtWaitAnyTimeout(1,1000)) {                                                //wait for selected serial events
 800300e:	07db      	lsls	r3, r3, #31
 8003010:	f140 80a8 	bpl.w	8003164 <imuThd.lto_priv.44+0x1d4>
 8003014:	2320      	movs	r3, #32
 8003016:	f383 8811 	msr	BASEPRI, r3
  elp->el_flags = (eventflags_t)0;
 800301a:	2300      	movs	r3, #0
  flags = elp->el_flags;
 800301c:	9a04      	ldr	r2, [sp, #16]
      pending_flags = chEvtGetAndClearFlagsI(&serial_listener);       //get event flag
 800301e:	4c89      	ldr	r4, [pc, #548]	; (8003244 <imuThd.lto_priv.44+0x2b4>)
  elp->el_flags = (eventflags_t)0;
 8003020:	9304      	str	r3, [sp, #16]
 8003022:	6022      	str	r2, [r4, #0]
 8003024:	f383 8811 	msr	BASEPRI, r3
      foundheader = false;
 8003028:	4d87      	ldr	r5, [pc, #540]	; (8003248 <imuThd.lto_priv.44+0x2b8>)
 800302a:	6822      	ldr	r2, [r4, #0]
              FLUSH_I_QUEUE(IMUDRIVER);
 800302c:	4e87      	ldr	r6, [pc, #540]	; (800324c <imuThd.lto_priv.44+0x2bc>)
      foundheader = false;
 800302e:	702b      	strb	r3, [r5, #0]
          current_flag = LEAST_SET_BIT(pending_flags);                  //isolates single flag to work on
 8003030:	4253      	negs	r3, r2
 8003032:	4013      	ands	r3, r2
          pending_flags &= ~current_flag;                               //removes isolated flag
 8003034:	ea22 0203 	bic.w	r2, r2, r3
          switch(current_flag) {
 8003038:	2b40      	cmp	r3, #64	; 0x40
          pending_flags &= ~current_flag;                               //removes isolated flag
 800303a:	6022      	str	r2, [r4, #0]
          switch(current_flag) {
 800303c:	d05e      	beq.n	80030fc <imuThd.lto_priv.44+0x16c>
 800303e:	d868      	bhi.n	8003112 <imuThd.lto_priv.44+0x182>
 8003040:	2b04      	cmp	r3, #4
 8003042:	d06f      	beq.n	8003124 <imuThd.lto_priv.44+0x194>
 8003044:	2b20      	cmp	r3, #32
 8003046:	d05a      	beq.n	80030fe <imuThd.lto_priv.44+0x16e>
 8003048:	2b02      	cmp	r3, #2
 800304a:	d057      	beq.n	80030fc <imuThd.lto_priv.44+0x16c>
      } while (pending_flags && !foundheader);
 800304c:	b112      	cbz	r2, 8003054 <imuThd.lto_priv.44+0xc4>
 800304e:	782b      	ldrb	r3, [r5, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0ed      	beq.n	8003030 <imuThd.lto_priv.44+0xa0>
 8003054:	2420      	movs	r4, #32
 8003056:	f384 8811 	msr	BASEPRI, r4
      FLUSH_I_QUEUE(IMUDRIVER);
 800305a:	487c      	ldr	r0, [pc, #496]	; (800324c <imuThd.lto_priv.44+0x2bc>)
 800305c:	f7fe fe90 	bl	8001d80 <chIQResetI>
 8003060:	2100      	movs	r1, #0
 8003062:	f381 8811 	msr	BASEPRI, r1
      memset((void*)imusdrxbuf, 0, SERIAL_BUFFERS_SIZE);               //Flush RX buffer
 8003066:	4622      	mov	r2, r4
 8003068:	4648      	mov	r0, r9
 800306a:	f000 f9a1 	bl	80033b0 <memset>
 800306e:	f8d8 4018 	ldr.w	r4, [r8, #24]
  while (!chThdShouldTerminateX()) {
 8003072:	7f63      	ldrb	r3, [r4, #29]
 8003074:	f013 0304 	ands.w	r3, r3, #4
 8003078:	d0b1      	beq.n	8002fde <imuThd.lto_priv.44+0x4e>
}
 800307a:	b007      	add	sp, #28
 800307c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (imusdrxbuf[0 + 1] == IMURXFRAMEHEAD) &&
 8003080:	f899 2001 	ldrb.w	r2, [r9, #1]
    if ((imusdrxbuf[0] == IMURXFRAMEHEAD) &&
 8003084:	2a5a      	cmp	r2, #90	; 0x5a
 8003086:	d161      	bne.n	800314c <imuThd.lto_priv.44+0x1bc>
        (getchecksum(&imusdrxbuf[0], 4 + imusdrxbuf[0 + 3]) == imusdrxbuf[imusdrxbuf[0 + 3] + 4])) {
 8003088:	f899 0003 	ldrb.w	r0, [r9, #3]
  sum = 0;
 800308c:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 800327c <imuThd.lto_priv.44+0x2ec>
  for(i = 0; i < n; i++) {
 8003090:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 8003260 <imuThd.lto_priv.44+0x2d0>
        (getchecksum(&imusdrxbuf[0], 4 + imusdrxbuf[0 + 3]) == imusdrxbuf[imusdrxbuf[0 + 3] + 4])) {
 8003094:	1d01      	adds	r1, r0, #4
  for(i = 0; i < n; i++) {
 8003096:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
  sum = 0;
 800309a:	f88c 7000 	strb.w	r7, [ip]
  for(i = 0; i < n; i++) {
 800309e:	f8ce 7000 	str.w	r7, [lr]
 80030a2:	f000 808c 	beq.w	80031be <imuThd.lto_priv.44+0x22e>
 80030a6:	4b6a      	ldr	r3, [pc, #424]	; (8003250 <imuThd.lto_priv.44+0x2c0>)
 80030a8:	eb09 0b01 	add.w	fp, r9, r1
 80030ac:	e001      	b.n	80030b2 <imuThd.lto_priv.44+0x122>
 80030ae:	f813 2b01 	ldrb.w	r2, [r3], #1
    sum += *data;
 80030b2:	4417      	add	r7, r2
  for(i = 0; i < n; i++) {
 80030b4:	459b      	cmp	fp, r3
    sum += *data;
 80030b6:	b2ff      	uxtb	r7, r7
  for(i = 0; i < n; i++) {
 80030b8:	d1f9      	bne.n	80030ae <imuThd.lto_priv.44+0x11e>
 80030ba:	f88c 7000 	strb.w	r7, [ip]
 80030be:	f8ce 1000 	str.w	r1, [lr]
        (getchecksum(&imusdrxbuf[0], 4 + imusdrxbuf[0 + 3]) == imusdrxbuf[imusdrxbuf[0 + 3] + 4])) {
 80030c2:	4448      	add	r0, r9
        (imusdrxbuf[0 + 1] == IMURXFRAMEHEAD) &&
 80030c4:	7903      	ldrb	r3, [r0, #4]
 80030c6:	42bb      	cmp	r3, r7
 80030c8:	d140      	bne.n	800314c <imuThd.lto_priv.44+0x1bc>
 80030ca:	2320      	movs	r3, #32
 80030cc:	f383 8811 	msr	BASEPRI, r3
        switch (imusdrxbuf[0 + 2]) {
 80030d0:	f899 3002 	ldrb.w	r3, [r9, #2]
 80030d4:	2b35      	cmp	r3, #53	; 0x35
 80030d6:	d05f      	beq.n	8003198 <imuThd.lto_priv.44+0x208>
 80030d8:	d966      	bls.n	80031a8 <imuThd.lto_priv.44+0x218>
 80030da:	2b45      	cmp	r3, #69	; 0x45
 80030dc:	d071      	beq.n	80031c2 <imuThd.lto_priv.44+0x232>
 80030de:	2b65      	cmp	r3, #101	; 0x65
 80030e0:	d104      	bne.n	80030ec <imuThd.lto_priv.44+0x15c>
            memcpy(&imu.quad, &imusdrxbuf[0 + 4], 8);
 80030e2:	4a5c      	ldr	r2, [pc, #368]	; (8003254 <imuThd.lto_priv.44+0x2c4>)
 80030e4:	4b5c      	ldr	r3, [pc, #368]	; (8003258 <imuThd.lto_priv.44+0x2c8>)
 80030e6:	cb03      	ldmia	r3!, {r0, r1}
 80030e8:	6010      	str	r0, [r2, #0]
 80030ea:	6051      	str	r1, [r2, #4]
          i += 10;
 80030ec:	f89a 3000 	ldrb.w	r3, [sl]
 80030f0:	2200      	movs	r2, #0
 80030f2:	330a      	adds	r3, #10
 80030f4:	f88a 3000 	strb.w	r3, [sl]
 80030f8:	f382 8811 	msr	BASEPRI, r2
 80030fc:	2320      	movs	r3, #32
 80030fe:	f383 8811 	msr	BASEPRI, r3
              FLUSH_I_QUEUE(IMUDRIVER);
 8003102:	4630      	mov	r0, r6
 8003104:	f7fe fe3c 	bl	8001d80 <chIQResetI>
 8003108:	2300      	movs	r3, #0
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	6822      	ldr	r2, [r4, #0]
 8003110:	e79c      	b.n	800304c <imuThd.lto_priv.44+0xbc>
          switch(current_flag) {
 8003112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003116:	d0f1      	beq.n	80030fc <imuThd.lto_priv.44+0x16c>
 8003118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800311c:	d0ee      	beq.n	80030fc <imuThd.lto_priv.44+0x16c>
 800311e:	2b80      	cmp	r3, #128	; 0x80
 8003120:	d194      	bne.n	800304c <imuThd.lto_priv.44+0xbc>
 8003122:	e7eb      	b.n	80030fc <imuThd.lto_priv.44+0x16c>
                  chThdSleep(MS2ST(ACQTIME));                            //Acquire data packet, release CPU
 8003124:	2014      	movs	r0, #20
 8003126:	f7fe fd13 	bl	8001b50 <chThdSleep>
                  if((!pending_flags)) {
 800312a:	6827      	ldr	r7, [r4, #0]
 800312c:	2f00      	cmp	r7, #0
 800312e:	d1e5      	bne.n	80030fc <imuThd.lto_priv.44+0x16c>
                      datalength = sdAsynchronousRead(IMUDRIVER, &imusdrxbuf,
 8003130:	463b      	mov	r3, r7
 8003132:	2220      	movs	r2, #32
 8003134:	4649      	mov	r1, r9
 8003136:	4630      	mov	r0, r6
 8003138:	f7fe fc82 	bl	8001a40 <chIQReadTimeout>
    if ((imusdrxbuf[0] == IMURXFRAMEHEAD) &&
 800313c:	f899 3000 	ldrb.w	r3, [r9]
  i = 0;
 8003140:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8003280 <imuThd.lto_priv.44+0x2f0>
    if ((imusdrxbuf[0] == IMURXFRAMEHEAD) &&
 8003144:	2b5a      	cmp	r3, #90	; 0x5a
  i = 0;
 8003146:	f88a 7000 	strb.w	r7, [sl]
    if ((imusdrxbuf[0] == IMURXFRAMEHEAD) &&
 800314a:	d099      	beq.n	8003080 <imuThd.lto_priv.44+0xf0>
          i++;
 800314c:	2301      	movs	r3, #1
 800314e:	f88a 3000 	strb.w	r3, [sl]
 8003152:	e7d3      	b.n	80030fc <imuThd.lto_priv.44+0x16c>
  ctp->p_epending &= ~m;
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	6362      	str	r2, [r4, #52]	; 0x34
 800315a:	f383 8811 	msr	BASEPRI, r3
 800315e:	e759      	b.n	8003014 <imuThd.lto_priv.44+0x84>
 8003160:	f385 8811 	msr	BASEPRI, r5
  memset((void*)sdtxbuf, 0, sizeof(sdtxbuf));
 8003164:	4c3d      	ldr	r4, [pc, #244]	; (800325c <imuThd.lto_priv.44+0x2cc>)
 8003166:	2220      	movs	r2, #32
 8003168:	4620      	mov	r0, r4
 800316a:	2100      	movs	r1, #0
 800316c:	f000 f920 	bl	80033b0 <memset>
  sdtxbuf[0] = IMUTXFRAMEHEAD;
 8003170:	22a5      	movs	r2, #165	; 0xa5
  sdtxbuf[1] = OUT_EULER;
 8003172:	2045      	movs	r0, #69	; 0x45
 8003174:	25ea      	movs	r5, #234	; 0xea
 8003176:	2702      	movs	r7, #2
 8003178:	f8df e100 	ldr.w	lr, [pc, #256]	; 800327c <imuThd.lto_priv.44+0x2ec>
 800317c:	4e38      	ldr	r6, [pc, #224]	; (8003260 <imuThd.lto_priv.44+0x2d0>)
  sdtxbuf[0] = IMUTXFRAMEHEAD;
 800317e:	7022      	strb	r2, [r4, #0]
  sdtxbuf[1] = OUT_EULER;
 8003180:	7060      	strb	r0, [r4, #1]
  sdWriteTimeout(IMUDRIVER, sdtxbuf, 3, 20);
 8003182:	4621      	mov	r1, r4
 8003184:	2314      	movs	r3, #20
 8003186:	2203      	movs	r2, #3
 8003188:	4836      	ldr	r0, [pc, #216]	; (8003264 <imuThd.lto_priv.44+0x2d4>)
  sdtxbuf[2] = getchecksum(sdtxbuf, 2);
 800318a:	70a5      	strb	r5, [r4, #2]
 800318c:	f88e 5000 	strb.w	r5, [lr]
 8003190:	6037      	str	r7, [r6, #0]
  sdWriteTimeout(IMUDRIVER, sdtxbuf, 3, 20);
 8003192:	f7fe fbbd 	bl	8001910 <chOQWriteTimeout>
 8003196:	e71c      	b.n	8002fd2 <imuThd.lto_priv.44+0x42>
            memcpy(&imu.mag, &imusdrxbuf[0 + 4], 6);
 8003198:	4b33      	ldr	r3, [pc, #204]	; (8003268 <imuThd.lto_priv.44+0x2d8>)
 800319a:	4a2f      	ldr	r2, [pc, #188]	; (8003258 <imuThd.lto_priv.44+0x2c8>)
 800319c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031a0:	f843 0b04 	str.w	r0, [r3], #4
 80031a4:	8019      	strh	r1, [r3, #0]
 80031a6:	e7a1      	b.n	80030ec <imuThd.lto_priv.44+0x15c>
        switch (imusdrxbuf[0 + 2]) {
 80031a8:	2b15      	cmp	r3, #21
 80031aa:	d03f      	beq.n	800322c <imuThd.lto_priv.44+0x29c>
 80031ac:	2b25      	cmp	r3, #37	; 0x25
 80031ae:	d19d      	bne.n	80030ec <imuThd.lto_priv.44+0x15c>
            memcpy(&imu.gyro, &imusdrxbuf[0 + 4], 6);
 80031b0:	4a29      	ldr	r2, [pc, #164]	; (8003258 <imuThd.lto_priv.44+0x2c8>)
 80031b2:	4b2e      	ldr	r3, [pc, #184]	; (800326c <imuThd.lto_priv.44+0x2dc>)
 80031b4:	6810      	ldr	r0, [r2, #0]
 80031b6:	8892      	ldrh	r2, [r2, #4]
 80031b8:	6018      	str	r0, [r3, #0]
 80031ba:	809a      	strh	r2, [r3, #4]
 80031bc:	e796      	b.n	80030ec <imuThd.lto_priv.44+0x15c>
  for(i = 0; i < n; i++) {
 80031be:	460f      	mov	r7, r1
 80031c0:	e77f      	b.n	80030c2 <imuThd.lto_priv.44+0x132>
            imu.euler.roll_deg = ((int16_t)(imusdrxbuf[0 + 4] << 8 | imusdrxbuf[0 + 5] )) / 100.0;
 80031c2:	f899 3004 	ldrb.w	r3, [r9, #4]
 80031c6:	f899 0005 	ldrb.w	r0, [r9, #5]
 80031ca:	4f29      	ldr	r7, [pc, #164]	; (8003270 <imuThd.lto_priv.44+0x2e0>)
 80031cc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80031d0:	b200      	sxth	r0, r0
 80031d2:	f7fd f997 	bl	8000504 <__aeabi_i2d>
 80031d6:	2200      	movs	r2, #0
 80031d8:	4b26      	ldr	r3, [pc, #152]	; (8003274 <imuThd.lto_priv.44+0x2e4>)
 80031da:	f7fd fb23 	bl	8000824 <__aeabi_ddiv>
 80031de:	f7fd fc0f 	bl	8000a00 <__aeabi_d2f>
            imu.euler.pit_deg = ((int16_t)(imusdrxbuf[0 + 6] << 8 | imusdrxbuf[0 + 7] )) / 100.0;
 80031e2:	f899 2006 	ldrb.w	r2, [r9, #6]
 80031e6:	f899 3007 	ldrb.w	r3, [r9, #7]
            imu.euler.roll_deg = ((int16_t)(imusdrxbuf[0 + 4] << 8 | imusdrxbuf[0 + 5] )) / 100.0;
 80031ea:	f8c7 0012 	str.w	r0, [r7, #18]
            imu.euler.pit_deg = ((int16_t)(imusdrxbuf[0 + 6] << 8 | imusdrxbuf[0 + 7] )) / 100.0;
 80031ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80031f2:	b218      	sxth	r0, r3
 80031f4:	f7fd f986 	bl	8000504 <__aeabi_i2d>
 80031f8:	2200      	movs	r2, #0
 80031fa:	4b1e      	ldr	r3, [pc, #120]	; (8003274 <imuThd.lto_priv.44+0x2e4>)
 80031fc:	f7fd fb12 	bl	8000824 <__aeabi_ddiv>
 8003200:	f7fd fbfe 	bl	8000a00 <__aeabi_d2f>
            imu.euler.yaw_deg = ((int16_t)(imusdrxbuf[0 + 8] << 8 | imusdrxbuf[0 + 9] )) / 100.0;
 8003204:	f899 2008 	ldrb.w	r2, [r9, #8]
 8003208:	f899 3009 	ldrb.w	r3, [r9, #9]
            imu.euler.pit_deg = ((int16_t)(imusdrxbuf[0 + 6] << 8 | imusdrxbuf[0 + 7] )) / 100.0;
 800320c:	f8c7 0016 	str.w	r0, [r7, #22]
            imu.euler.yaw_deg = ((int16_t)(imusdrxbuf[0 + 8] << 8 | imusdrxbuf[0 + 9] )) / 100.0;
 8003210:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003214:	b218      	sxth	r0, r3
 8003216:	f7fd f975 	bl	8000504 <__aeabi_i2d>
 800321a:	2200      	movs	r2, #0
 800321c:	4b15      	ldr	r3, [pc, #84]	; (8003274 <imuThd.lto_priv.44+0x2e4>)
 800321e:	f7fd fb01 	bl	8000824 <__aeabi_ddiv>
 8003222:	f7fd fbed 	bl	8000a00 <__aeabi_d2f>
 8003226:	f8c7 001a 	str.w	r0, [r7, #26]
 800322a:	e75f      	b.n	80030ec <imuThd.lto_priv.44+0x15c>
            memcpy(&imu.acc, &imusdrxbuf[0 + 4], 6);
 800322c:	4b10      	ldr	r3, [pc, #64]	; (8003270 <imuThd.lto_priv.44+0x2e0>)
 800322e:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <imuThd.lto_priv.44+0x2c8>)
 8003230:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003234:	6018      	str	r0, [r3, #0]
 8003236:	8099      	strh	r1, [r3, #4]
 8003238:	e758      	b.n	80030ec <imuThd.lto_priv.44+0x15c>
 800323a:	bf00      	nop
 800323c:	200015a4 	.word	0x200015a4
 8003240:	20001378 	.word	0x20001378
 8003244:	20001654 	.word	0x20001654
 8003248:	20001566 	.word	0x20001566
 800324c:	20001384 	.word	0x20001384
 8003250:	200015a5 	.word	0x200015a5
 8003254:	20001596 	.word	0x20001596
 8003258:	200015a8 	.word	0x200015a8
 800325c:	2000169c 	.word	0x2000169c
 8003260:	20001570 	.word	0x20001570
 8003264:	200013a8 	.word	0x200013a8
 8003268:	20001584 	.word	0x20001584
 800326c:	2000157e 	.word	0x2000157e
 8003270:	20001578 	.word	0x20001578
 8003274:	40590000 	.word	0x40590000
 8003278:	20001410 	.word	0x20001410
 800327c:	200016bc 	.word	0x200016bc
 8003280:	20001575 	.word	0x20001575
	...

08003290 <chThdCreateStatic.constprop.16>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8003290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003292:	461d      	mov	r5, r3
 8003294:	4604      	mov	r4, r0
 8003296:	2320      	movs	r3, #32
 8003298:	f383 8811 	msr	BASEPRI, r3
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800329c:	2000      	movs	r0, #0
  tp->p_refs = (trefs_t)1;
 800329e:	2701      	movs	r7, #1
  tp->p_state = CH_STATE_WTSTART;
 80032a0:	f04f 0e02 	mov.w	lr, #2
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80032a4:	3924      	subs	r1, #36	; 0x24
 80032a6:	1866      	adds	r6, r4, r1
 80032a8:	60e6      	str	r6, [r4, #12]
 80032aa:	4b20      	ldr	r3, [pc, #128]	; (800332c <chThdCreateStatic.constprop.16+0x9c>)
 80032ac:	5065      	str	r5, [r4, r1]
  REG_INSERT(tp);
 80032ae:	4d20      	ldr	r5, [pc, #128]	; (8003330 <chThdCreateStatic.constprop.16+0xa0>)
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80032b0:	6233      	str	r3, [r6, #32]
 80032b2:	6070      	str	r0, [r6, #4]
  REG_INSERT(tp);
 80032b4:	6125      	str	r5, [r4, #16]
 80032b6:	696b      	ldr	r3, [r5, #20]
  tp->p_refs = (trefs_t)1;
 80032b8:	77a7      	strb	r7, [r4, #30]
  REG_INSERT(tp);
 80032ba:	6163      	str	r3, [r4, #20]
  tp->p_prio = prio;
 80032bc:	60a2      	str	r2, [r4, #8]
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80032be:	7760      	strb	r0, [r4, #29]
  tp->p_state = CH_STATE_WTSTART;
 80032c0:	f884 e01c 	strb.w	lr, [r4, #28]
  tp->p_realprio = prio;
 80032c4:	63e2      	str	r2, [r4, #60]	; 0x3c
  tp->p_mtxlist = NULL;
 80032c6:	63a0      	str	r0, [r4, #56]	; 0x38
  tp->p_epending = (eventmask_t)0;
 80032c8:	6360      	str	r0, [r4, #52]	; 0x34
  tp->p_name = NULL;
 80032ca:	61a0      	str	r0, [r4, #24]
  REG_INSERT(tp);
 80032cc:	611c      	str	r4, [r3, #16]
  if (ntp->p_prio <= currp->p_prio) {
 80032ce:	69ae      	ldr	r6, [r5, #24]
  ntp->p_u.rdymsg = msg;
 80032d0:	6220      	str	r0, [r4, #32]
  if (ntp->p_prio <= currp->p_prio) {
 80032d2:	68b1      	ldr	r1, [r6, #8]
  queue_init(&tp->p_msgqueue);
 80032d4:	f104 0328 	add.w	r3, r4, #40	; 0x28
  list_init(&tp->p_waiting);
 80032d8:	f104 0724 	add.w	r7, r4, #36	; 0x24
 80032dc:	428a      	cmp	r2, r1
  REG_INSERT(tp);
 80032de:	616c      	str	r4, [r5, #20]
  tlp->p_next = (thread_t *)tlp;
 80032e0:	6267      	str	r7, [r4, #36]	; 0x24
  tqp->p_next = (thread_t *)tqp;
 80032e2:	62a3      	str	r3, [r4, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 80032e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032e6:	d80e      	bhi.n	8003306 <chThdCreateStatic.constprop.16+0x76>
  tp->p_state = CH_STATE_READY;
 80032e8:	7720      	strb	r0, [r4, #28]
    cp = cp->p_next;
 80032ea:	682d      	ldr	r5, [r5, #0]
  } while (cp->p_prio >= tp->p_prio);
 80032ec:	68a9      	ldr	r1, [r5, #8]
 80032ee:	428a      	cmp	r2, r1
 80032f0:	d9fb      	bls.n	80032ea <chThdCreateStatic.constprop.16+0x5a>
  tp->p_prev = cp->p_prev;
 80032f2:	686a      	ldr	r2, [r5, #4]
  tp->p_next = cp;
 80032f4:	6025      	str	r5, [r4, #0]
  tp->p_prev = cp->p_prev;
 80032f6:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 80032f8:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80032fa:	606c      	str	r4, [r5, #4]
 80032fc:	2300      	movs	r3, #0
 80032fe:	f383 8811 	msr	BASEPRI, r3
}
 8003302:	4620      	mov	r0, r4
 8003304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  cp = (thread_t *)&ch.rlist.r_queue;
 8003306:	462b      	mov	r3, r5
  tp->p_state = CH_STATE_READY;
 8003308:	7730      	strb	r0, [r6, #28]
    cp = cp->p_next;
 800330a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	4291      	cmp	r1, r2
 8003310:	d9fb      	bls.n	800330a <chThdCreateStatic.constprop.16+0x7a>
    ntp->p_state = CH_STATE_CURRENT;
 8003312:	2701      	movs	r7, #1
  tp->p_prev = cp->p_prev;
 8003314:	685a      	ldr	r2, [r3, #4]
    chSysSwitch(ntp, otp);
 8003316:	4631      	mov	r1, r6
  tp->p_next = cp;
 8003318:	6033      	str	r3, [r6, #0]
  tp->p_prev = cp->p_prev;
 800331a:	6072      	str	r2, [r6, #4]
    chSysSwitch(ntp, otp);
 800331c:	4620      	mov	r0, r4
  tp->p_prev->p_next = tp;
 800331e:	6016      	str	r6, [r2, #0]
  cp->p_prev = tp;
 8003320:	605e      	str	r6, [r3, #4]
    ntp->p_state = CH_STATE_CURRENT;
 8003322:	7727      	strb	r7, [r4, #28]
    setcurrp(ntp);
 8003324:	61ac      	str	r4, [r5, #24]
    chSysSwitch(ntp, otp);
 8003326:	f7fc ff83 	bl	8000230 <_port_switch>
 800332a:	e7e7      	b.n	80032fc <chThdCreateStatic.constprop.16+0x6c>
 800332c:	08000241 	.word	0x08000241
 8003330:	20001410 	.word	0x20001410
	...

08003340 <chTMStartMeasurementX.constprop.14>:
  return DWT->CYCCNT;
 8003340:	4b01      	ldr	r3, [pc, #4]	; (8003348 <chTMStartMeasurementX.constprop.14+0x8>)
 8003342:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8003344:	6083      	str	r3, [r0, #8]
 8003346:	4770      	bx	lr
 8003348:	e0001000 	.word	0xe0001000
 800334c:	00000000 	.word	0x00000000

08003350 <sdObjectInit.constprop.5>:
  sdp->vmt = &vmt;
 8003350:	4603      	mov	r3, r0
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8003352:	b5f0      	push	{r4, r5, r6, r7, lr}
  iqp->q_counter = 0;
 8003354:	2500      	movs	r5, #0
  sdp->state = SD_STOP;
 8003356:	f04f 0e01 	mov.w	lr, #1
  oqp->q_counter = size;
 800335a:	2720      	movs	r7, #32
  sdp->vmt = &vmt;
 800335c:	4a11      	ldr	r2, [pc, #68]	; (80033a4 <sdObjectInit.constprop.5+0x54>)
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 800335e:	f100 040c 	add.w	r4, r0, #12
  sdp->vmt = &vmt;
 8003362:	f843 2b04 	str.w	r2, [r3], #4
  oqp->q_top     = bp + size;
 8003366:	f100 0694 	add.w	r6, r0, #148	; 0x94
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 800336a:	f100 0254 	add.w	r2, r0, #84	; 0x54
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 800336e:	6043      	str	r3, [r0, #4]
  oqp->q_notify  = onfy;
 8003370:	64c1      	str	r1, [r0, #76]	; 0x4c
  iqp->q_top     = bp + size;
 8003372:	f100 0374 	add.w	r3, r0, #116	; 0x74
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8003376:	f100 0130 	add.w	r1, r0, #48	; 0x30
  iqp->q_counter = 0;
 800337a:	6145      	str	r5, [r0, #20]
  iqp->q_link    = link;
 800337c:	62c0      	str	r0, [r0, #44]	; 0x2c
  oqp->q_link    = link;
 800337e:	6500      	str	r0, [r0, #80]	; 0x50
  sdp->state = SD_STOP;
 8003380:	f880 e008 	strb.w	lr, [r0, #8]
  iqp->q_notify  = infy;
 8003384:	6285      	str	r5, [r0, #40]	; 0x28
  oqp->q_counter = size;
 8003386:	6387      	str	r7, [r0, #56]	; 0x38
  oqp->q_top     = bp + size;
 8003388:	6406      	str	r6, [r0, #64]	; 0x40
  tqp->p_next = (thread_t *)tqp;
 800338a:	60c4      	str	r4, [r0, #12]
  tqp->p_prev = (thread_t *)tqp;
 800338c:	6104      	str	r4, [r0, #16]
  iqp->q_buffer  = bp;
 800338e:	6182      	str	r2, [r0, #24]
  iqp->q_rdptr   = bp;
 8003390:	6242      	str	r2, [r0, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8003392:	6202      	str	r2, [r0, #32]
  iqp->q_top     = bp + size;
 8003394:	61c3      	str	r3, [r0, #28]
  oqp->q_buffer  = bp;
 8003396:	63c3      	str	r3, [r0, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8003398:	6483      	str	r3, [r0, #72]	; 0x48
  oqp->q_wrptr   = bp;
 800339a:	6443      	str	r3, [r0, #68]	; 0x44
  tqp->p_next = (thread_t *)tqp;
 800339c:	6301      	str	r1, [r0, #48]	; 0x30
  tqp->p_prev = (thread_t *)tqp;
 800339e:	6341      	str	r1, [r0, #52]	; 0x34
 80033a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033a2:	bf00      	nop
 80033a4:	08003de0 	.word	0x08003de0
	...

080033b0 <memset>:
 80033b0:	b470      	push	{r4, r5, r6}
 80033b2:	0786      	lsls	r6, r0, #30
 80033b4:	d046      	beq.n	8003444 <memset+0x94>
 80033b6:	1e54      	subs	r4, r2, #1
 80033b8:	2a00      	cmp	r2, #0
 80033ba:	d041      	beq.n	8003440 <memset+0x90>
 80033bc:	b2ca      	uxtb	r2, r1
 80033be:	4603      	mov	r3, r0
 80033c0:	e002      	b.n	80033c8 <memset+0x18>
 80033c2:	f114 34ff 	adds.w	r4, r4, #4294967295
 80033c6:	d33b      	bcc.n	8003440 <memset+0x90>
 80033c8:	f803 2b01 	strb.w	r2, [r3], #1
 80033cc:	079d      	lsls	r5, r3, #30
 80033ce:	d1f8      	bne.n	80033c2 <memset+0x12>
 80033d0:	2c03      	cmp	r4, #3
 80033d2:	d92e      	bls.n	8003432 <memset+0x82>
 80033d4:	b2cd      	uxtb	r5, r1
 80033d6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80033da:	2c0f      	cmp	r4, #15
 80033dc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80033e0:	d919      	bls.n	8003416 <memset+0x66>
 80033e2:	4626      	mov	r6, r4
 80033e4:	f103 0210 	add.w	r2, r3, #16
 80033e8:	3e10      	subs	r6, #16
 80033ea:	2e0f      	cmp	r6, #15
 80033ec:	f842 5c10 	str.w	r5, [r2, #-16]
 80033f0:	f842 5c0c 	str.w	r5, [r2, #-12]
 80033f4:	f842 5c08 	str.w	r5, [r2, #-8]
 80033f8:	f842 5c04 	str.w	r5, [r2, #-4]
 80033fc:	f102 0210 	add.w	r2, r2, #16
 8003400:	d8f2      	bhi.n	80033e8 <memset+0x38>
 8003402:	f1a4 0210 	sub.w	r2, r4, #16
 8003406:	f022 020f 	bic.w	r2, r2, #15
 800340a:	f004 040f 	and.w	r4, r4, #15
 800340e:	3210      	adds	r2, #16
 8003410:	2c03      	cmp	r4, #3
 8003412:	4413      	add	r3, r2
 8003414:	d90d      	bls.n	8003432 <memset+0x82>
 8003416:	461e      	mov	r6, r3
 8003418:	4622      	mov	r2, r4
 800341a:	3a04      	subs	r2, #4
 800341c:	2a03      	cmp	r2, #3
 800341e:	f846 5b04 	str.w	r5, [r6], #4
 8003422:	d8fa      	bhi.n	800341a <memset+0x6a>
 8003424:	1f22      	subs	r2, r4, #4
 8003426:	f022 0203 	bic.w	r2, r2, #3
 800342a:	3204      	adds	r2, #4
 800342c:	4413      	add	r3, r2
 800342e:	f004 0403 	and.w	r4, r4, #3
 8003432:	b12c      	cbz	r4, 8003440 <memset+0x90>
 8003434:	b2c9      	uxtb	r1, r1
 8003436:	441c      	add	r4, r3
 8003438:	f803 1b01 	strb.w	r1, [r3], #1
 800343c:	429c      	cmp	r4, r3
 800343e:	d1fb      	bne.n	8003438 <memset+0x88>
 8003440:	bc70      	pop	{r4, r5, r6}
 8003442:	4770      	bx	lr
 8003444:	4614      	mov	r4, r2
 8003446:	4603      	mov	r3, r0
 8003448:	e7c2      	b.n	80033d0 <memset+0x20>
 800344a:	bf00      	nop
 800344c:	0000      	movs	r0, r0
	...

08003450 <ram_areas>:
 8003450:	3e34 0800 16c0 2000 16c0 2000 16c0 2000     4>..... ... ... 
 8003460:	3e34 0800 0000 0000 0000 0000 0000 0000     4>..............
 8003470:	3e34 0800 0000 0000 0000 0000 0000 0000     4>..............
 8003480:	3e34 0800 0000 0000 0000 0000 0000 0000     4>..............
 8003490:	3e34 0800 0000 0000 0000 0000 0000 0000     4>..............
 80034a0:	3e34 0800 0000 0000 0000 0000 0000 0000     4>..............
 80034b0:	3e34 0800 0000 0000 0000 0000 0000 0000     4>..............
 80034c0:	3e34 0800 0000 0000 0000 0000 0000 0000     4>..............

080034d0 <SerialCfg.lto_priv.35>:
 80034d0:	2580 0000 2000 4000 0000 0000 0000 0000     .%... .@........

080034e0 <SerialCfg.lto_priv.36>:
 80034e0:	c200 0001 2000 4000 0000 0000 0000 0000     ..... .@........

080034f0 <SerialCfg.lto_priv.37>:
 80034f0:	c200 0001 2000 4000 0000 0000 0000 0000     ..... .@........
 8003500:	6c62 6e69 656b 0072 0000 0000 0000 0000     blinker.........

08003510 <_stm32_dma_streams>:
 8003510:	0000 4002 0008 4002 0001 0000 0000 0000     ...@...@........
 8003520:	0000 000b 0000 4002 001c 4002 0002 0000     .......@...@....
 8003530:	0000 0000 0104 000c 0000 4002 0030 4002     ...........@0..@
 8003540:	0004 0000 0000 0000 0208 000d 0000 4002     ...............@
 8003550:	0044 4002 0008 0000 0000 0000 030c 000e     D..@............
 8003560:	0000 4002 0058 4002 0010 0000 0000 0000     ...@X..@........
 8003570:	0410 000f 0000 4002 006c 4002 0020 0000     .......@l..@ ...
 8003580:	0000 0000 0514 0010 0000 4002 0080 4002     ...........@...@
 8003590:	0040 0000 0000 0000 0618 0011 0000 0000     @...............

080035a0 <ch_debug>:
 80035a0:	616d 6e69 1600 1880 0204 0844 100c 1814     main......D.....
 80035b0:	1c00 1e1d 0000 0000 0000 0000 0000 0000     ................
 80035c0:	6469 656c 0000 0000 0000 0000 0000 0000     idle............

080035d0 <sinTable_f32>:
 80035d0:	0000 0000 0e92 3c49 0ab1 3cc9 c32b 3d16     ......I<...<+..=
 80035e0:	fb2e 3d48 2b75 3d7b a904 3d96 b680 3daf     ..H=u+{=...=...=
 80035f0:	bd36 3dc8 bc2f 3de1 b273 3dfa cf87 3e09     6..=/..=s..=...>
 8003600:	4083 3e16 abb5 3e22 10a2 3e2f 6ecf 3e3b     .@.>..">../>.n;>
 8003610:	c5c2 3e47 1501 3e54 5c13 3e60 9a7f 3e6c     ..G>..T>.\`>..l>
 8003620:	cfcc 3e78 7dc0 3e82 8e93 3e88 9a22 3e8e     ..x>.}.>...>"..>
 8003630:	a032 3e94 a086 3e9a 9ae5 3ea0 8f12 3ea6     2..>...>...>...>
 8003640:	7cd4 3eac 63ef 3eb2 442a 3eb8 1d49 3ebe     .|.>.c.>*D.>I..>
 8003650:	ef15 3ec3 b953 3ec9 7bca 3ecf 3641 3ed5     ...>S..>.{.>A6.>
 8003660:	e880 3eda 924f 3ee0 3375 3ee6 cbbb 3eeb     ...>O..>u3.>...>
 8003670:	5aea 3ef1 e0cb 3ef6 5d27 3efc e7e4 3f00     .Z.>...>'].>...?
 8003680:	9c3d 3f03 4b82 3f06 f59b 3f08 9a6b 3f0b     =..?.K.?...?k..?
 8003690:	39da 3f0e d3cd 3f10 682a 3f13 f6d9 3f15     .9.?...?*h.?...?
 80036a0:	7fc0 3f18 02c6 3f1b 7fd1 3f1d f6cb 3f1f     ...?...?...?...?
 80036b0:	6799 3f22 d225 3f24 3656 3f27 9415 3f29     .g"?%.$?V6'?..)?
 80036c0:	eb4a 3f2b 3bde 3f2e 85bb 3f30 c8c9 3f32     J.+?.;.?..0?..2?
 80036d0:	04f3 3f35 3a23 3f37 6842 3f39 8f3b 3f3b     ..5?#:7?Bh9?;.;?
 80036e0:	aef9 3f3d c767 3f3f d870 3f41 e201 3f43     ..=?g.??p.A?..C?
 80036f0:	e403 3f45 de65 3f47 d112 3f49 bbf8 3f4b     ..E?e.G?..I?..K?
 8003700:	9f02 3f4d 7a20 3f4f 4d3d 3f51 1849 3f53     ..M? zO?=MQ?I.S?
 8003710:	db31 3f54 95e5 3f56 4853 3f58 f26a 3f59     1.T?..V?SHX?j.Y?
 8003720:	941a 3f5b 2d53 3f5d be05 3f5e 4621 3f60     ..[?S-]?..^?!F`?
 8003730:	c597 3f61 3c5a 3f63 aa59 3f64 0f88 3f66     ..a?Z<c?Y.d?..f?
 8003740:	6bd8 3f67 bf3c 3f68 09a7 3f6a 4b0c 3f6b     .kg?<.h?..j?.Kk?
 8003750:	835e 3f6c b293 3f6d d89e 3f6e f573 3f6f     ^.l?..m?..n?s.o?
 8003760:	0908 3f71 1352 3f72 1447 3f73 0bdd 3f74     ..q?R.r?G.s?..t?
 8003770:	fa0b 3f74 dec6 3f75 ba07 3f76 8bc5 3f77     ..t?..u?..v?..w?
 8003780:	53f8 3f78 1298 3f79 c79d 3f79 7302 3f7a     .Sx?..y?..y?.sz?
 8003790:	14be 3f7b accd 3f7b 3b28 3f7c bfc9 3f7c     ..{?..{?(;|?..|?
 80037a0:	3aac 3f7d abcc 3f7d 1323 3f7e 70b0 3f7e     .:}?..}?#.~?.p~?
 80037b0:	c46d 3f7e 0e58 3f7f 4e6d 3f7f 84ab 3f7f     m.~?X..?mN.?...?
 80037c0:	b10f 3f7f d397 3f7f ec43 3f7f fb11 3f7f     ...?...?C..?...?
 80037d0:	0000 3f80 fb11 3f7f ec43 3f7f d397 3f7f     ...?...?C..?...?
 80037e0:	b10f 3f7f 84ab 3f7f 4e6d 3f7f 0e58 3f7f     ...?...?mN.?X..?
 80037f0:	c46d 3f7e 70b0 3f7e 1323 3f7e abcc 3f7d     m.~?.p~?#.~?..}?
 8003800:	3aac 3f7d bfc9 3f7c 3b28 3f7c accd 3f7b     .:}?..|?(;|?..{?
 8003810:	14be 3f7b 7302 3f7a c79d 3f79 1298 3f79     ..{?.sz?..y?..y?
 8003820:	53f8 3f78 8bc5 3f77 ba07 3f76 dec6 3f75     .Sx?..w?..v?..u?
 8003830:	fa0b 3f74 0bdd 3f74 1447 3f73 1352 3f72     ..t?..t?G.s?R.r?
 8003840:	0908 3f71 f573 3f6f d89e 3f6e b293 3f6d     ..q?s.o?..n?..m?
 8003850:	835e 3f6c 4b0c 3f6b 09a7 3f6a bf3c 3f68     ^.l?.Kk?..j?<.h?
 8003860:	6bd8 3f67 0f88 3f66 aa59 3f64 3c5a 3f63     .kg?..f?Y.d?Z<c?
 8003870:	c597 3f61 4621 3f60 be05 3f5e 2d53 3f5d     ..a?!F`?..^?S-]?
 8003880:	941a 3f5b f26a 3f59 4853 3f58 95e5 3f56     ..[?j.Y?SHX?..V?
 8003890:	db31 3f54 1849 3f53 4d3d 3f51 7a20 3f4f     1.T?I.S?=MQ? zO?
 80038a0:	9f02 3f4d bbf8 3f4b d112 3f49 de65 3f47     ..M?..K?..I?e.G?
 80038b0:	e403 3f45 e201 3f43 d870 3f41 c767 3f3f     ..E?..C?p.A?g.??
 80038c0:	aef9 3f3d 8f3b 3f3b 6842 3f39 3a23 3f37     ..=?;.;?Bh9?#:7?
 80038d0:	04f3 3f35 c8c9 3f32 85bb 3f30 3bde 3f2e     ..5?..2?..0?.;.?
 80038e0:	eb4a 3f2b 9415 3f29 3656 3f27 d225 3f24     J.+?..)?V6'?%.$?
 80038f0:	6799 3f22 f6cb 3f1f 7fd1 3f1d 02c6 3f1b     .g"?...?...?...?
 8003900:	7fc0 3f18 f6d9 3f15 682a 3f13 d3cd 3f10     ...?...?*h.?...?
 8003910:	39da 3f0e 9a6b 3f0b f59b 3f08 4b82 3f06     .9.?k..?...?.K.?
 8003920:	9c3d 3f03 e7e4 3f00 5d27 3efc e0cb 3ef6     =..?...?'].>...>
 8003930:	5aea 3ef1 cbbb 3eeb 3375 3ee6 924f 3ee0     .Z.>...>u3.>O..>
 8003940:	e880 3eda 3641 3ed5 7bca 3ecf b953 3ec9     ...>A6.>.{.>S..>
 8003950:	ef15 3ec3 1d49 3ebe 442a 3eb8 63ef 3eb2     ...>I..>*D.>.c.>
 8003960:	7cd4 3eac 8f12 3ea6 9ae5 3ea0 a086 3e9a     .|.>...>...>...>
 8003970:	a032 3e94 9a22 3e8e 8e93 3e88 7dc0 3e82     2..>"..>...>.}.>
 8003980:	cfcc 3e78 9a7f 3e6c 5c13 3e60 1501 3e54     ..x>..l>.\`>..T>
 8003990:	c5c2 3e47 6ecf 3e3b 10a2 3e2f abb5 3e22     ..G>.n;>../>..">
 80039a0:	4083 3e16 cf87 3e09 b273 3dfa bc2f 3de1     .@.>...>s..=/..=
 80039b0:	bd36 3dc8 b680 3daf a904 3d96 2b75 3d7b     6..=...=...=u+{=
 80039c0:	fb2e 3d48 c32b 3d16 0ab1 3cc9 0e92 3c49     ..H=+..=...<..I<
 80039d0:	0000 0000 0e92 bc49 0ab1 bcc9 c32b bd16     ......I.....+...
 80039e0:	fb2e bd48 2b75 bd7b a904 bd96 b680 bdaf     ..H.u+{.........
 80039f0:	bd36 bdc8 bc2f bde1 b273 bdfa cf87 be09     6.../...s.......
 8003a00:	4083 be16 abb5 be22 10a2 be2f 6ecf be3b     .@....".../..n;.
 8003a10:	c5c2 be47 1501 be54 5c13 be60 9a7f be6c     ..G...T..\`...l.
 8003a20:	cfcc be78 7dc0 be82 8e93 be88 9a22 be8e     ..x..}......"...
 8003a30:	a032 be94 a086 be9a 9ae5 bea0 8f12 bea6     2...............
 8003a40:	7cd4 beac 63ef beb2 442a beb8 1d49 bebe     .|...c..*D..I...
 8003a50:	ef15 bec3 b953 bec9 7bca becf 3641 bed5     ....S....{..A6..
 8003a60:	e880 beda 924f bee0 3375 bee6 cbbb beeb     ....O...u3......
 8003a70:	5aea bef1 e0cb bef6 5d27 befc e7e4 bf00     .Z......']......
 8003a80:	9c3d bf03 4b82 bf06 f59b bf08 9a6b bf0b     =....K......k...
 8003a90:	39da bf0e d3cd bf10 682a bf13 f6d9 bf15     .9......*h......
 8003aa0:	7fc0 bf18 02c6 bf1b 7fd1 bf1d f6cb bf1f     ................
 8003ab0:	6799 bf22 d225 bf24 3656 bf27 9415 bf29     .g".%.$.V6'...).
 8003ac0:	eb4a bf2b 3bde bf2e 85bb bf30 c8c9 bf32     J.+..;....0...2.
 8003ad0:	04f3 bf35 3a23 bf37 6842 bf39 8f3b bf3b     ..5.#:7.Bh9.;.;.
 8003ae0:	aef9 bf3d c767 bf3f d870 bf41 e201 bf43     ..=.g.?.p.A...C.
 8003af0:	e403 bf45 de65 bf47 d112 bf49 bbf8 bf4b     ..E.e.G...I...K.
 8003b00:	9f02 bf4d 7a20 bf4f 4d3d bf51 1849 bf53     ..M. zO.=MQ.I.S.
 8003b10:	db31 bf54 95e5 bf56 4853 bf58 f26a bf59     1.T...V.SHX.j.Y.
 8003b20:	941a bf5b 2d53 bf5d be05 bf5e 4621 bf60     ..[.S-]...^.!F`.
 8003b30:	c597 bf61 3c5a bf63 aa59 bf64 0f88 bf66     ..a.Z<c.Y.d...f.
 8003b40:	6bd8 bf67 bf3c bf68 09a7 bf6a 4b0c bf6b     .kg.<.h...j..Kk.
 8003b50:	835e bf6c b293 bf6d d89e bf6e f573 bf6f     ^.l...m...n.s.o.
 8003b60:	0908 bf71 1352 bf72 1447 bf73 0bdd bf74     ..q.R.r.G.s...t.
 8003b70:	fa0b bf74 dec6 bf75 ba07 bf76 8bc5 bf77     ..t...u...v...w.
 8003b80:	53f8 bf78 1298 bf79 c79d bf79 7302 bf7a     .Sx...y...y..sz.
 8003b90:	14be bf7b accd bf7b 3b28 bf7c bfc9 bf7c     ..{...{.(;|...|.
 8003ba0:	3aac bf7d abcc bf7d 1323 bf7e 70b0 bf7e     .:}...}.#.~..p~.
 8003bb0:	c46d bf7e 0e58 bf7f 4e6d bf7f 84ab bf7f     m.~.X...mN......
 8003bc0:	b10f bf7f d397 bf7f ec43 bf7f fb11 bf7f     ........C.......
 8003bd0:	0000 bf80 fb11 bf7f ec43 bf7f d397 bf7f     ........C.......
 8003be0:	b10f bf7f 84ab bf7f 4e6d bf7f 0e58 bf7f     ........mN..X...
 8003bf0:	c46d bf7e 70b0 bf7e 1323 bf7e abcc bf7d     m.~..p~.#.~...}.
 8003c00:	3aac bf7d bfc9 bf7c 3b28 bf7c accd bf7b     .:}...|.(;|...{.
 8003c10:	14be bf7b 7302 bf7a c79d bf79 1298 bf79     ..{..sz...y...y.
 8003c20:	53f8 bf78 8bc5 bf77 ba07 bf76 dec6 bf75     .Sx...w...v...u.
 8003c30:	fa0b bf74 0bdd bf74 1447 bf73 1352 bf72     ..t...t.G.s.R.r.
 8003c40:	0908 bf71 f573 bf6f d89e bf6e b293 bf6d     ..q.s.o...n...m.
 8003c50:	835e bf6c 4b0c bf6b 09a7 bf6a bf3c bf68     ^.l..Kk...j.<.h.
 8003c60:	6bd8 bf67 0f88 bf66 aa59 bf64 3c5a bf63     .kg...f.Y.d.Z<c.
 8003c70:	c597 bf61 4621 bf60 be05 bf5e 2d53 bf5d     ..a.!F`...^.S-].
 8003c80:	941a bf5b f26a bf59 4853 bf58 95e5 bf56     ..[.j.Y.SHX...V.
 8003c90:	db31 bf54 1849 bf53 4d3d bf51 7a20 bf4f     1.T.I.S.=MQ. zO.
 8003ca0:	9f02 bf4d bbf8 bf4b d112 bf49 de65 bf47     ..M...K...I.e.G.
 8003cb0:	e403 bf45 e201 bf43 d870 bf41 c767 bf3f     ..E...C.p.A.g.?.
 8003cc0:	aef9 bf3d 8f3b bf3b 6842 bf39 3a23 bf37     ..=.;.;.Bh9.#:7.
 8003cd0:	04f3 bf35 c8c9 bf32 85bb bf30 3bde bf2e     ..5...2...0..;..
 8003ce0:	eb4a bf2b 9415 bf29 3656 bf27 d225 bf24     J.+...).V6'.%.$.
 8003cf0:	6799 bf22 f6cb bf1f 7fd1 bf1d 02c6 bf1b     .g".............
 8003d00:	7fc0 bf18 f6d9 bf15 682a bf13 d3cd bf10     ........*h......
 8003d10:	39da bf0e 9a6b bf0b f59b bf08 4b82 bf06     .9..k........K..
 8003d20:	9c3d bf03 e7e4 bf00 5d27 befc e0cb bef6     =.......']......
 8003d30:	5aea bef1 cbbb beeb 3375 bee6 924f bee0     .Z......u3..O...
 8003d40:	e880 beda 3641 bed5 7bca becf b953 bec9     ....A6...{..S...
 8003d50:	ef15 bec3 1d49 bebe 442a beb8 63ef beb2     ....I...*D...c..
 8003d60:	7cd4 beac 8f12 bea6 9ae5 bea0 a086 be9a     .|..............
 8003d70:	a032 be94 9a22 be8e 8e93 be88 7dc0 be82     2..."........}..
 8003d80:	cfcc be78 9a7f be6c 5c13 be60 1501 be54     ..x...l..\`...T.
 8003d90:	c5c2 be47 6ecf be3b 10a2 be2f abb5 be22     ..G..n;.../...".
 8003da0:	4083 be16 cf87 be09 b273 bdfa bc2f bde1     .@......s.../...
 8003db0:	bd36 bdc8 b680 bdaf a904 bd96 2b75 bd7b     6...........u+{.
 8003dc0:	fb2e bd48 c32b bd16 0ab1 bcc9 0e92 bc49     ..H.+.........I.
 8003dd0:	0000 8000 0000 0000 0000 0000 0000 0000     ................

08003de0 <vmt>:
 8003de0:	19b1 0800 1ad1 0800 1a31 0800 1b41 0800     ........1...A...
 8003df0:	1a21 0800 1b31 0800 19a1 0800 1ac1 0800     !...1...........
